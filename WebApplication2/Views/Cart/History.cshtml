@model WebApplication2.Controllers.OrderHistoryVM
@using System.Globalization;

@{
    ViewBag.Title = "Order History";
    var selectedStatus = Context.Request.Query["status"].ToString();
}

@section Scripts {
    <script src="/js/email-receipt.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function () {
            // --- Enhanced Layout/Design: Card and Button Styling ---
            $(".order-card .card").addClass("shadow border-0");
            $(".order-card .card-header").addClass("bg-light border-bottom-0");
            
            // Apply consistent button styling
            $(".order-card .btn").addClass("rounded-pill px-3 fw-semibold");
            $(".order-card .btn").css({
                "min-width": "120px", 
                "margin-right": "8px",
                "transition": "all 0.3s ease",
                "position": "relative",
                "overflow": "hidden"
            });
            
            // Style specific button types
            $(".order-card .btn-outline-primary").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(0,123,255,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-outline-info").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(23,162,184,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-outline-success").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(40,167,69,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-outline-danger").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(220,53,69,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-warning").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(255,193,7,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-success").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(40,167,69,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-secondary").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(108,117,125,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            // Add ripple effect to buttons
            $(".order-card .btn").on("click", function(e) {
                const btn = $(this);
                const x = e.pageX - btn.offset().left;
                const y = e.pageY - btn.offset().top;
                
                const ripple = $('<span class="btn-ripple"></span>');
                ripple.css({
                    left: x + 'px',
                    top: y + 'px'
                });
                
                btn.append(ripple);
                
                setTimeout(function() {
                    ripple.remove();
                }, 700);
            });
            
            // Style images
            $(".order-card img").addClass("rounded shadow-sm border");

            // --- Status Filter: Reload with Query Param for Server-Side Filtering ---
            $('#statusFilter').off('change').on('change', function() {
                const status = $(this).val();
                const url = new URL(window.location.href);
                if (status) {
                    url.searchParams.set('status', status);
                } else {
                    url.searchParams.delete('status');
                }
                window.location.href = url.toString();
            });

            // --- Track Order Button: Go to Track Page with Order Number ---
            $(document).on('click', '.track-order-btn', function() {
                const orderId = $(this).data('order-id');
                window.location.href = '/Cart/Track?orderNumber=' + orderId;
            });
            
            // --- Reorder Button: Add items to cart ---
            $(document).on('click', '.reorder-btn', function() {
                const orderId = $(this).data('order-id');
                const btn = $(this);
                
                // Show loading state
                const originalText = btn.html();
                btn.html('<i class="fas fa-spinner fa-spin me-1"></i> Processing...');
                btn.prop('disabled', true);
                
                // Send AJAX request to reorder endpoint
                $.ajax({
                    url: '/Cart/Reorder',
                    type: 'POST',
                    data: { orderId: orderId },
                    success: function(response) {
                        if (response.success) {
                            // Show success message
                            const successAlert = $('<div class="alert alert-success alert-dismissible fade show" role="alert">' +
                                '<i class="fas fa-check-circle me-2"></i> Items added to cart successfully!' +
                                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                                '</div>');
                            $('.container.mt-3').prepend(successAlert);
                            
                            // Redirect to cart page after a short delay
                            setTimeout(function() {
                                window.location.href = '/Cart';
                            }, 1000);
                        } else {
                            // Show error message
                            const errorAlert = $('<div class="alert alert-dismissible fade show" role="alert">' +
                                '<i class="fas fa-exclamation-circle me-2"></i> ' + (response.message || 'Failed to add items to cart.') +
                                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                                '</div>');
                            $('.container.mt-3').prepend(errorAlert);
                            
                            // Reset button state
                            btn.html(originalText);
                            btn.prop('disabled', false);
                        }
                    },
                    error: function() {
                        // Show error message
                        const errorAlert = $('<div class="alert alert-danger alert-dismissible fade show" role="alert">' +
                            '<i class="fas fa-exclamation-circle me-2"></i> An error occurred while processing your request.' +
                            '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                            '</div>');
                        $('.container.mt-3').prepend(errorAlert);
                        
                        // Reset button state
                        btn.html(originalText);
                        btn.prop('disabled', false);
                    }
                });
            });
            
            // --- Search Functionality ---
            $('#searchBtn').on('click', function() {
                performSearch();
            });
            
            $('#searchInput').on('keypress', function(e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    performSearch();
                }
            });
            
            // Clear search functionality
            $('#clearSearchBtn').on('click', function() {
                $('#searchInput').val('');
                performSearch(); // This will show all orders
            });
            
            // --- Sorting Functionality ---
            $('#sortOptions').on('change', function() {
                const sortOption = $(this).val();
                sortOrders(sortOption);
            });
            
            // --- Load Chart Data ---
            loadChartData();
            
            // --- Initialize Pagination ---
            initPagination();
        });
        
        // Function to sort orders based on selected option
        function sortOrders(sortOption) {
            const orderCards = $('.order-card').toArray();
            
            // Sort the order cards based on the selected option
            orderCards.sort(function(a, b) {
                const cardA = $(a);
                const cardB = $(b);
                
                switch(sortOption) {
                    case 'date-newest':
                        const dateA = new Date(cardA.find('.order-date').data('date'));
                        const dateB = new Date(cardB.find('.order-date').data('date'));
                        return dateB - dateA; // Newest first
                    case 'date-oldest':
                        const dateC = new Date(cardA.find('.order-date').data('date'));
                        const dateD = new Date(cardB.find('.order-date').data('date'));
                        return dateC - dateD; // Oldest first
                    case 'price-highest':
                        const priceA = parseFloat(cardA.find('.order-total').data('price'));
                        const priceB = parseFloat(cardB.find('.order-total').data('price'));
                        return priceB - priceA; // Highest first
                    case 'price-lowest':
                        const priceC = parseFloat(cardA.find('.order-total').data('price'));
                        const priceD = parseFloat(cardB.find('.order-total').data('price'));
                        return priceC - priceD; // Lowest first
                    default:
                        return 0; // No sorting
                }
            });
            
            // Reappend the sorted cards to the container
            const container = $('.order-history-list');
            $.each(orderCards, function(index, card) {
                container.append(card);
            });
            
            // Show animation effect for sorting
            $('.order-card').addClass('sort-animation');
            setTimeout(function() {
                $('.order-card').removeClass('sort-animation');
            }, 500);
            
            // Reinitialize pagination after sorting
            initPagination();
        }
        
        // Global variables for pagination
        let currentPage = 1;
        const ordersPerPage = 5;
        let filteredOrders = [];
        
        // Function to initialize pagination
        function initPagination() {
            // Get all visible order cards
            filteredOrders = $('.order-card:visible').toArray();
            const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
            
            // Reset to first page when filtering changes
            currentPage = 1;
            
            // Update pagination controls
            updatePaginationControls(totalPages);
            
            // Show orders for current page
            showOrdersForPage(currentPage);
        }
        
        // Function to update pagination controls
        function updatePaginationControls(totalPages) {
            // Clear existing pagination
            $('.pagination-controls').remove();
            
            if (totalPages <= 1) {
                return; // No need for pagination
            }
            
            // Create pagination controls
            let paginationHtml = '<div class="pagination-controls">';
            
            // First page button
            paginationHtml += `<button class="page-btn first-btn" ${currentPage === 1 ? 'disabled' : ''} title="First Page">
                <i class="fas fa-angle-double-left"></i>
            </button>`;
            
            // Previous button
            paginationHtml += `<button class="page-btn prev-btn" ${currentPage === 1 ? 'disabled' : ''} title="Previous Page">
                <i class="fas fa-chevron-left"></i> Prev
            </button>`;
            
            // Page buttons (show max 5 pages)
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, startPage + 4);
            
            // Show ellipsis for first pages if needed
            if (startPage > 1) {
                paginationHtml += `<button class="page-btn" data-page="1">1</button>`;
                if (startPage > 2) {
                    paginationHtml += `<span class="page-ellipsis">...</span>`;
                }
            }
            
            // Show page buttons
            for (let i = startPage; i <= endPage; i++) {
                paginationHtml += `<button class="page-btn ${i === currentPage ? 'active' : ''}" data-page="${i}">${i}</button>`;
            }
            
            // Show ellipsis for last pages if needed
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHtml += `<span class="page-ellipsis">...</span>`;
                }
                paginationHtml += `<button class="page-btn" data-page="${totalPages}">${totalPages}</button>`;
            }
            
            // Next button
            paginationHtml += `<button class="page-btn next-btn" ${currentPage === totalPages ? 'disabled' : ''} title="Next Page">
                Next <i class="fas fa-chevron-right"></i>
            </button>`;
            
            // Last page button
            paginationHtml += `<button class="page-btn last-btn" ${currentPage === totalPages ? 'disabled' : ''} title="Last Page">
                <i class="fas fa-angle-double-right"></i>
            </button>`;
            
            // Page info
            paginationHtml += `<span class="page-info">
                <i class="fas fa-file-alt me-1"></i> Page ${currentPage} of ${totalPages}
            </span>`;
            
            paginationHtml += '</div>';
            
            // Append pagination controls
            $('.order-history-list').after(paginationHtml);
            
            // Add event listeners
            $('.page-btn[data-page]').on('click', function() {
                currentPage = parseInt($(this).data('page'));
                showOrdersForPage(currentPage);
                updatePaginationControls(totalPages);
            });
            
            $('.prev-btn').on('click', function() {
                if (currentPage > 1) {
                    currentPage--;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
            
            $('.next-btn').on('click', function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
            
            $('.first-btn').on('click', function() {
                if (currentPage > 1) {
                    currentPage = 1;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
            
            $('.last-btn').on('click', function() {
                if (currentPage < totalPages) {
                    currentPage = totalPages;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
        }
        
        // Function to show orders for the current page
        function showOrdersForPage(page) {
            // Hide all orders
            $('.order-card').hide();
            
            // Calculate start and end index
            const startIndex = (page - 1) * ordersPerPage;
            const endIndex = Math.min(startIndex + ordersPerPage, filteredOrders.length);
            
            // Show orders for current page with animation
            for (let i = startIndex; i < endIndex; i++) {
                const orderCard = $(filteredOrders[i]);
                orderCard.addClass('page-transition');
                orderCard.show();
                
                // Remove animation class after animation completes
                setTimeout(() => {
                    orderCard.removeClass('page-transition');
                }, 400); // Match the animation duration
            }
            
            // Scroll to top of order list
            $('html, body').animate({
                scrollTop: $('.order-history-list').offset().top - 100
            }, 300);
        }
        
        // Function to perform search on orders
        function performSearch() {
            const searchTerm = $('#searchInput').val().trim().toLowerCase();
            if (!searchTerm) {
                // If search is empty, show all orders
                $('.order-card').show();
                // Initialize pagination with all orders
                initPagination();
                return;
            }
            
            // Hide all orders initially
            $('.order-card').hide();
            
            // Split search term into individual words for better matching
            const searchWords = searchTerm.split(/\s+/).filter(word => word.length > 0);
            
            // Show orders that match the search term
            $('.order-card').each(function() {
                const orderCard = $(this);
                const orderId = orderCard.find('.order-id').text().toLowerCase();
                const orderDate = orderCard.find('.order-date').text().toLowerCase();
                const orderTotal = orderCard.find('.order-total').text().toLowerCase();
                const orderStatus = orderCard.find('.badge').text().toLowerCase();
                
                // Search in order items (product names) with word matching
                let orderItemsMatch = false;
                orderCard.find('.order-item-name').each(function() {
                    const itemName = $(this).text().toLowerCase();
                    
                    // Check if any search word matches the item name
                    for (let word of searchWords) {
                        if (itemName.includes(word)) {
                            orderItemsMatch = true;
                            break;
                        }
                    }
                    
                    if (orderItemsMatch) {
                        return false; // Break out of each loop
                    }
                });
                
                // Also search in the order card data attributes for product names
                const orderData = orderCard.data('order-items') || '';
                const orderItemsData = orderData.toLowerCase();
                
                // Check if any search word matches the order data
                let orderDataMatch = false;
                for (let word of searchWords) {
                    if (orderItemsData.includes(word)) {
                        orderDataMatch = true;
                        break;
                    }
                }
                
                // Check basic fields
                let basicMatch = false;
                for (let word of searchWords) {
                    if (orderId.includes(word) || 
                        orderDate.includes(word) || 
                        orderTotal.includes(word) ||
                        orderStatus.includes(word)) {
                        basicMatch = true;
                        break;
                    }
                }
                
                if (basicMatch || orderItemsMatch || orderDataMatch) {
                    orderCard.show();
                }
            });
            
            // Show message if no results found
            if ($('.order-card:visible').length === 0) {
                if ($('#no-results-message').length === 0) {
                    $('.order-history-container').append(
                        '<div id="no-results-message" class="alert mt-3">' +
                        '<i class="fas fa-search me-2"></i>No orders found matching your search for "' + searchTerm + '".' +
                        '<br><small class="text-muted">Try searching by order ID, date, product name, or order status.</small>' +
                        '<br><small class="text-muted"><strong>Examples:</strong> "cola", "pizza", "burger", "drink", "food"</small>' +
                        '</div>'
                    );
                }
            } else {
                $('#no-results-message').remove();
                // Initialize pagination with filtered results
                initPagination();
            }
        }
        
        // Function to load chart data from the server
        function loadChartData() {
            $.ajax({
                url: '/Cart/GetPurchaseSummaryData',
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    if (data.error) {
                        console.error('Error loading chart data:', data.error);
                        return;
                    }
                    
                    // Initialize Monthly Spending Chart
                    initMonthlySpendingChart(data.monthlyLabels, data.monthlyData);
                    
                    // Initialize Order Categories Chart
                    initOrderCategoriesChart(data.categoryLabels, data.categoryData);
                },
                error: function(xhr, status, error) {
                    console.error('AJAX error:', error);
                }
            });
        }
        
        // Initialize Monthly Spending Chart
        function initMonthlySpendingChart(labels, data) {
            const ctx = document.getElementById('monthlySpendingChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Monthly Spending',
                        data: data,
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return 'RM ' + value;
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'RM ' + context.raw.toFixed(2);
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // Initialize Order Categories Chart
        function initOrderCategoriesChart(labels, data) {
            const ctx = document.getElementById('orderCategoriesChart').getContext('2d');
            const backgroundColors = [
                'rgba(255, 99, 132, 0.7)',
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)'
            ];
            
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: backgroundColors.map(color => color.replace('0.7', '1')),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 15,
                                padding: 15
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
                });
        }
    </script>
    <style>
        /* Main Container Styling */
        .order-history-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        /* Enhanced Header Styling */
        .order-history-header {
            background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .header-icon {
            width: 60px;
            height: 60px;
            background: rgba(255,255,255,0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            backdrop-filter: blur(10px);
        }
        
        .page-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin: 0;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .page-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 0;
        }
        
        .admin-btn {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .admin-btn:hover {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.5);
            transform: translateY(-2px);
        }
        
        .stats-card {
            background: rgba(255,255,255,0.15);
            border-radius: 15px;
            padding: 1.5rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .stats-item {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .stats-item i {
            font-size: 2rem;
        }
        
        .stats-number {
            display: block;
            font-size: 2rem;
            font-weight: 700;
            line-height: 1;
        }
        
        .stats-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        /* Search and Filter Section */
        .search-filter-section {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 1.5rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .search-group {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .search-group .input-group-text {
            border: none;
            color: #6c757d;
        }
        
        .search-group .form-control {
            border: none;
            font-size: 1rem;
            padding: 0.75rem 1rem;
        }
        
        .search-group .form-control:focus {
            box-shadow: none;
        }
        
        .filter-select {
            background: white;
            border: none;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border-radius: 10px;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
        }
        
        .filter-select:focus {
            box-shadow: 0 0 0 0.2rem rgba(255,255,255,0.25);
        }
        
        /* Modern Order Card Styling */
        .order-card-modern {
            background: white;
            border-radius: 20px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            overflow: hidden;
            border: 1px solid rgba(0,0,0,0.05);
        }
        
        .order-card-modern:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.12);
        }
        
        .order-header {
            background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
            padding: 1.5rem;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }
        
        .order-info {
            margin-bottom: 1rem;
        }
        
        .order-id-section {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .order-id {
            font-size: 1.2rem;
            font-weight: 700;
            color: #2c3e50;
        }
        
        .order-date-section {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #6c757d;
        }
        
        .order-date {
            font-weight: 500;
        }
        
        .order-time {
            background: rgba(108, 117, 125, 0.1);
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            font-size: 0.85rem;
        }
        
        .order-status {
            display: flex;
            justify-content: flex-end;
        }
        
        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: 600;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .status-pending {
            background: linear-gradient(135deg, #ffc107, #ffb300);
            color: white;
        }
        
        .status-served {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }
        
        .status-cancelled {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }
        
        .status-refunded {
            background: linear-gradient(135deg, #fd7e14, #e83e8c);
            color: white;
        }
        
        .status-other {
            background: linear-gradient(135deg, #6c757d, #495057);
            color: white;
        }
        
        .order-body {
            background: var(--card-bg);
            padding: 1.5rem;
        }
        
        .order-items-section {
            margin-bottom: 1.5rem;
        }
        
        .section-header {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #f8f9fa;
        }
        
        .section-title {
            font-weight: 600;
            color: #2c3e50;
            margin-right: 0.5rem;
        }
        
        .item-count {
            background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .items-list {
            max-height: 200px;
            overflow-y: auto;
        }
        
        .order-item {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            border-radius: 12px;
            transition: all 0.2s ease;
            background: var(--card-bg);
        }
        
        .order-item:hover {
            background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
            transform: translateX(5px);
        }
        
        .item-image {
            width: 50px;
            height: 50px;
            margin-right: 1rem;
            flex-shrink: 0;
        }
        
        .item-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
            border: 2px solid #dee2e6;
        }
        
        .item-placeholder {
            width: 100%;
            height: 100%;
            background: #e9ecef;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d;
        }
        
        .item-details {
            flex: 1;
            margin-right: 1rem;
        }
        
        .item-name {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 0.25rem;
        }
        
        .item-quantity {
            font-size: 0.85rem;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }
        
        .item-personalization {
            font-size: 0.8rem;
            color: #495057;
            background: rgba(108, 117, 125, 0.1);
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            display: inline-block;
        }
        
        .item-price {
            font-weight: 700;
            color: #28a745;
            font-size: 1.1rem;
        }
        
        .order-details-section {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .detail-row {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .detail-row:last-child {
            margin-bottom: 0;
        }
        
        .detail-label {
            font-weight: 600;
            color: #495057;
            margin-right: 0.5rem;
            min-width: 80px;
        }
        
        .detail-value {
            color: #6c757d;
        }
        
        .order-footer {
            border-top: 2px solid #f8f9fa;
            padding-top: 1.5rem;
        }
        
        .total-section {
            text-align: center;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: var(--card-bg);
            border-radius: 12px;
        }
        
        .total-label {
            font-size: 0.9rem;
            color: #6c757d;
            margin-bottom: 0.5rem;
        }
        
        .total-amount {
            font-size: 1.8rem;
            font-weight: 700;
            color: #28a745;
        }
        
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }
        
        .btn-row {
            display: flex;
            gap: 0.5rem;
        }
        
        .action-btn {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 0.75rem 0.5rem;
            border-radius: 12px;
            text-decoration: none;
            transition: all 0.3s ease;
            border: none;
            font-size: 0.85rem;
            font-weight: 600;
        }
        
        .action-btn i {
            font-size: 1.2rem;
            margin-bottom: 0.25rem;
        }
        
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .action-btn.btn-primary {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
        }
        
        .action-btn.btn-info {
            background: linear-gradient(135deg, #17a2b8, #138496);
            color: white;
        }
        
        .action-btn.btn-success {
            background: linear-gradient(135deg, #28a745, #1e7e34);
            color: white;
        }
        
        .action-btn.btn-secondary {
            background: linear-gradient(135deg, #6c757d, #495057);
            color: white;
        }
        
        .action-btn.btn-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }
        
        .action-btn.btn-warning {
            background: linear-gradient(135deg, #ffc107, #e0a800);
            color: #212529;
        }
        .order-card .card-header {
            font-size: 1.1rem;
            font-weight: 600;
            background-color: #f8f9fa;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }
        .order-card .btn-group .btn {
            margin-bottom: 8px;
        }
        .order-card .btn-group {
            flex-wrap: wrap;
            gap: 0.75rem;
        }
        .order-card img {
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
            border-radius: 8px;
        }
        .order-card img:hover {
            transform: scale(1.05);
            border-color: #adb5bd;
        }
        .order-card .badge {
            font-size: 1rem;
            padding: 0.5em 1em;
            border-radius: 50px;
        }
        .order-card .card-title {
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 1rem;
            color: #343a40;
        }
        .order-card .list-group-item {
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: background-color 0.2s;
        }
        .order-card .list-group-item:hover {
            background: #e9ecef;
        }
        .order-card .btn {
            font-size: 0.95rem;
            border-radius: 2rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .order-card .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .order-card .btn i {
            margin-right: 4px;
        }
        .order-card .btn-outline-info {
            color: #0dcaf0;
            border-color: #0dcaf0;
        }
        .order-card .btn-outline-info:hover {
            background: #0dcaf0;
            color: #fff;
        }
        .order-card .btn-outline-success {
            color: #198754;
            border-color: #198754;
        }
        .order-card .btn-outline-success:hover {
            background: #198754;
            color: #fff;
        }
        .order-card .btn-outline-danger {
            color: #dc3545;
            border-color: #dc3545;
        }
        .order-card .btn-outline-danger:hover {
            background: #dc3545;
            color: #fff;
        }
        .order-card .btn-outline-primary {
            color: #0d6efd;
            border-color: #0d6efd;
        }
        .order-card .btn-outline-primary:hover {
            background: #0d6efd;
            color: #fff;
        }
        .order-card .btn-warning {
            color: #fff;
            background: #ffc107;
            border-color: #ffc107;
        }
        .order-card .btn-warning:hover {
            background: #ffb300;
            color: #fff;
        }
        .order-card .btn-secondary {
            color: #fff;
            background: #6c757d;
            border-color: #6c757d;
        }
        .order-card .btn-secondary:hover {
            background: #495057;
            color: #fff;
        }
        .order-card .btn-success {
            color: #fff;
            background: #198754;
            border-color: #198754;
        }
        .order-card .btn-success:hover {
            background: #157347;
            color: #fff;
        }
        .order-card .btn-group .btn:last-child {
            margin-right: 0;
        }
        .order-card .btn-group .btn {
            min-width: 110px;
        }
        .order-card .btn .spinner-border {
            margin-left: 6px;
        }
        
        /* Search and Filter Controls */
        .search-container {
            position: relative;
            margin-bottom: 20px;
        }
        
        .search-container .form-control {
            border-radius: 50px;
            padding-left: 30px;
            padding-right: 50px;
            height: 45px;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }
        
        /* Enhanced Search Bar Styling */
        .input-group .form-control {
            border-radius: 0.375rem 0 0 0.375rem;
            border-right: none;
            height: 45px;
            font-size: 0.95rem;
            transition: all 0.3s ease;
        }
        
        .input-group .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        
        .input-group .input-group-text {
            border-radius: 0.375rem 0 0 0.375rem;
            border-right: none;
            background-color: #f8f9fa;
            border-color: #e9ecef;
        }
        
        .input-group .btn {
            height: 45px;
            padding: 0.5rem 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .input-group .btn:last-child {
            border-radius: 0 0.375rem 0.375rem 0;
            padding: 0.5rem 1.5rem;
        }
        
        .input-group .btn:not(:last-child) {
            border-radius: 0;
            border-right: 1px solid #dee2e6;
        }
        
        .input-group .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        .input-group .btn-outline-secondary:hover {
            background-color: #6c757d;
            border-color: #6c757d;
            color: white;
        }
        
        /* Filter and Sort Controls */
        .form-select {
            height: 45px;
            border-radius: 0.375rem;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }
        
        .form-select:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        
        /* Search Results Styling */
        #no-results-message {
            border-radius: 0.5rem;
            border: none;
            background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        #no-results-message .fas {
            color: #6c757d;
        }
        
        /* Pagination Styling */
        .pagination .page-item .page-link {
            border-radius: 50px;
            margin: 0 5px;
            width: 80px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
            border: 2px solid #e9ecef;
            color: #495057;
            transition: all 0.3s ease;
        }
        
        .pagination .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
            color: white;
        }
        
        /* Enhanced Chart Styling */
        .charts-section {
            margin-bottom: 3rem;
        }
        
        .chart-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.08);
            overflow: hidden;
            border: 1px solid rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }
        
        .chart-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.12);
        }
        
        .chart-header {
            background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
            padding: 1.5rem;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }
        
        .chart-title {
            font-size: 1.3rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }
        
        .chart-subtitle {
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .chart-body {
            background: var(--card-bg);
            padding: 1.5rem;
        }
        
        .chart-container {
            height: 300px;
            position: relative;
        }
        
        .chart-container canvas {
            max-height: 100%;
            max-width: 100%;
        }
         
         /* Button Ripple Effect */
         .btn-ripple {
             position: absolute;
             background: rgba(255, 255, 255, 0.4);
             border-radius: 50%;
             transform: scale(0);
             animation: ripple 0.6s linear;
             pointer-events: none;
             width: 100px;
             height: 100px;
         }
         
         @@keyframes ripple {
             to {
                 transform: scale(4);
                 opacity: 0;
             }
         }
         
         /* Sort Animation */
         .sort-animation {
             animation: sortFade 0.5s ease;
         }
         
         @@keyframes sortFade {
             0% { opacity: 0.5; transform: translateY(10px); }
             100% { opacity: 1; transform: translateY(0); }
         }
         
         /* Pagination Controls */
         .pagination-controls {
             display: flex;
             justify-content: center;
             align-items: center;
             margin-top: 30px;
             margin-bottom: 20px;
             gap: 8px;
             background-color: #f8f9fa;
             padding: 12px 20px;
             border-radius: 50px;
             box-shadow: 0 2px 10px rgba(0,0,0,0.05);
             flex-wrap: wrap;
         }
         
         .pagination-controls .page-btn {
             min-width: 40px;
             height: 40px;
             border-radius: 50%;
             display: flex;
             align-items: center;
             justify-content: center;
             border: 2px solid #e9ecef;
             background-color: white;
             color: #495057;
             font-weight: 500;
             transition: all 0.3s ease;
             cursor: pointer;
             box-shadow: 0 2px 5px rgba(0,0,0,0.05);
             margin: 0 2px;
         }
         
         .pagination-controls .page-btn:hover {
             background-color: #e9ecef;
             transform: translateY(-2px);
             box-shadow: 0 4px 8px rgba(0,0,0,0.1);
         }
         
         .pagination-controls .page-btn.active {
             background-color: #007bff;
             border-color: #007bff;
             color: white;
             box-shadow: 0 4px 8px rgba(0,123,255,0.25);
         }
         
         .pagination-controls .page-btn:disabled {
             opacity: 0.5;
             cursor: not-allowed;
             box-shadow: none;
             transform: none;
         }
         
         .pagination-controls .prev-btn,
         .pagination-controls .next-btn {
             font-size: 0.9rem;
             padding: 0 15px;
             border-radius: 20px;
             width: auto;
         }
         
         .pagination-controls .page-info {
             font-size: 0.9rem;
             color: #6c757d;
             background-color: white;
             padding: 8px 15px;
             border-radius: 20px;
             margin-left: 10px;
             box-shadow: 0 2px 5px rgba(0,0,0,0.05);
             display: flex;
             align-items: center;
         }
         
         .pagination-controls .page-ellipsis {
             display: inline-flex;
             align-items: center;
             justify-content: center;
             padding: 0 5px;
             font-weight: bold;
             color: #6c757d;
         }
         
         /* Animation for page transitions */
         .order-card.page-transition {
             animation: pageTransition 0.4s ease;
         }
         
         @@keyframes pageTransition {
             0% { opacity: 0; transform: translateY(10px); }
             100% { opacity: 1; transform: translateY(0); }
         }
     </style>
}

<!-- Notification alerts for success/error messages -->
<div class="container mt-3">
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

        <!-- Enhanced Order History Header -->
    <div class="order-history-header mb-5">
        <div class="row align-items-center">
            <div class="col-lg-8">
                <div class="d-flex align-items-center mb-3">
                    <div class="header-icon me-3">
                        <i class="fas fa-history"></i>
                    </div>
                    <div>
                        <h1 class="page-title mb-1">Order History</h1>
                        <p class="page-subtitle text-muted">Track and manage your past orders</p>
                    </div>
                </div>
                @if (User.IsInRole("Admin"))
                {
                    <a href="@Url.Action("Orders", "Admin")" class="btn btn-outline-primary admin-btn">
                        <i class="fas fa-cog me-2"></i>Manage All Orders
                    </a>
                }
            </div>
            <div class="col-lg-4">
                <div class="stats-card">
                    <div class="stats-item">
                        <i class="fas fa-shopping-bag text-primary"></i>
                        <div>
                            <span class="stats-number">@Model.Orders.Count</span>
                            <span class="stats-label">Total Orders</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Enhanced Search and Filter Section -->
        <div class="search-filter-section mt-4">
            <div class="row g-3">
                <div class="col-lg-6">
                    <div class="input-group search-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" id="searchInput" class="form-control" placeholder="Search orders by ID, date, product name, or related items..." aria-label="Search orders">
                        <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn" title="Clear search">
                            <i class="fas fa-times"></i>
                        </button>
                        <button class="btn btn-primary" type="button" id="searchBtn">
                            <i class="fas fa-search me-1"></i> Search
                        </button>
                    </div>
                </div>
                <div class="col-lg-3">
                    <select id="statusFilter" class="form-select filter-select">
                        <option value="" selected="@(string.IsNullOrEmpty(selectedStatus))">
                            <i class="fas fa-filter me-2"></i>All Statuses
                        </option>
                        <option value="Pending" selected="@(selectedStatus == "Pending")">🟡 Pending</option>
                        <option value="Preparing" selected="@(selectedStatus == "Preparing")">🔵 Preparing</option>
                        <option value="Served" selected="@(selectedStatus == "Served")">🟢 Served</option>
                        <option value="Cancelled" selected="@(selectedStatus == "Cancelled")">🔴 Cancelled</option>
                        <option value="Refunded" selected="@(selectedStatus == "Refunded")">🟠 Refunded</option>
                    </select>
                </div>
                <div class="col-lg-3">
                    <select id="sortOptions" class="form-select filter-select">
                        <option value="date-newest">📅 Newest First</option>
                        <option value="date-oldest">📅 Oldest First</option>
                        <option value="price-highest">💰 Highest Amount</option>
                        <option value="price-lowest">💰 Lowest Amount</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Purchase Summary Charts -->
    <div class="charts-section mb-5">
        <div class="row g-4">
            <div class="col-lg-6">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-title">
                            <i class="fas fa-chart-line text-primary me-2"></i>
                            Monthly Spending
                        </div>
                        <div class="chart-subtitle">Your spending trends over time</div>
                    </div>
                    <div class="chart-body">
                        <div class="chart-container">
                            <canvas id="monthlySpendingChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-title">
                            <i class="fas fa-chart-pie text-success me-2"></i>
                            Order Categories
                        </div>
                        <div class="chart-subtitle">Distribution of your purchases</div>
                    </div>
                    <div class="chart-body">
                        <div class="chart-container">
                            <canvas id="orderCategoriesChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <!-- Order listing container with pagination -->
    <div id="orderListingContainer">
        <!-- Displays a message if no orders exist;
        otherwise, lists each past order with details,
        items, total price, and a link to view the receipt,
        with two orders side by side per row. -->
        @if (!Model.Orders.Any())
        {
            <div class="text-center empty-cart py-4">
                <i class="fas fa-solid fa-clipboard-list fa-3x mb-3"></i>
                <p class="in-the-middle lead">You have no past orders.</p>
                <a asp-action="Index" asp-controller="MenuItem" class="btn btn-primary">Start Shopping</a>
            </div>
        }
        else
        {
            <div class="row" id="ordersList">
                @foreach (var order in Model.Orders)
                {
                    <div class="col-lg-6 col-xl-4 mb-4 order-card" data-order-id="@order.OrderId" data-order-date="@order.OrderDate.ToString("yyyy-MM-ddTHH:mm:ss")" data-order-total="@order.Total" data-order-status="@order.Status" data-order-items="@string.Join(",", order.Items.Select(i => i.MenuItemName))">
                        <div class="order-card-modern">
                            <div class="order-header">
                                <div class="order-info">
                                    <div class="order-id-section">
                                        <i class="fas fa-receipt text-primary me-2"></i>
                                        <span class="order-id">Order #@order.OrderId</span>
                                    </div>
                                    <div class="order-date-section">
                                        <i class="fas fa-calendar-alt text-muted me-2"></i>
                                        <span class="order-date">@order.OrderDate.ToString("MMM dd, yyyy")</span>
                                        <span class="order-time">@order.OrderDate.ToString("HH:mm")</span>
                                    </div>
                                </div>
                                <div class="order-status">
                                    @if (order.Status == "Pending" || order.Status == "Preparing")
                                    {
                                        <span class="status-badge status-pending">
                                            <i class="fas fa-clock me-1"></i>@order.Status
                                        </span>
                                    }
                                    else if (order.Status == "Served")
                                    {
                                        <span class="status-badge status-served">
                                            <i class="fas fa-check-circle me-1"></i>@order.Status
                                        </span>
                                    }
                                    else if (order.Status == "Cancelled")
                                    {
                                        <span class="status-badge status-cancelled">
                                            <i class="fas fa-times-circle me-1"></i>@order.Status
                                        </span>
                                    }
                                    else if (order.Status == "Refunded")
                                    {
                                        <span class="status-badge status-refunded">
                                            <i class="fas fa-undo me-1"></i>@order.Status
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="status-badge status-other">
                                            <i class="fas fa-info-circle me-1"></i>@order.Status
                                        </span>
                                    }
                                </div>
                            </div>
                            <div class="order-body">
                                <div class="order-items-section">
                                    <div class="section-header">
                                        <i class="fas fa-shopping-basket text-primary me-2"></i>
                                        <span class="section-title">Order Items</span>
                                        <span class="item-count">(@order.Items.Count items)</span>
                                    </div>
                                    <div class="items-list">
                                        @foreach (var item in order.Items)
                                        {
                                            <div class="order-item">
                                                <div class="item-image">
                                                    @if (!string.IsNullOrEmpty(item.PhotoURL))
                                                    {
                                                        <img src="/Images/@item.PhotoURL" alt="@item.MenuItemName" class="item-img">
                                                    }
                                                    else
                                                    {
                                                        <div class="item-placeholder">
                                                            <i class="fas fa-image"></i>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="item-details">
                                                    <div class="item-name order-item-name">@item.MenuItemName</div>
                                                    <div class="item-quantity">Qty: @item.Quantity</div>
                                                    @if (!string.IsNullOrEmpty(item.SelectedPersonalizations))
                                                    {
                                                        <div class="item-personalization">
                                                            <i class="fas fa-cog me-1"></i>@item.SelectedPersonalizations
                                                        </div>
                                                    }
                                                </div>
                                                <div class="item-price">@((item.UnitPrice * item.Quantity).ToString("C", new CultureInfo("en-MY")))</div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <div class="order-details-section">
                                    <div class="detail-row">
                                        <i class="fas fa-map-marker-alt text-info me-2"></i>
                                        <span class="detail-label">Delivery:</span>
                                        <span class="detail-value">@order.DeliveryOption</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(order.DeliveryAddress))
                                    {
                                        <div class="detail-row">
                                            <i class="fas fa-home text-secondary me-2"></i>
                                            <span class="detail-label">Address:</span>
                                            <span class="detail-value">@order.DeliveryAddress</span>
                                        </div>
                                    }
                                </div>
                                
                                <div class="order-footer">
                                    <div class="total-section">
                                        <div class="total-label">Total Amount</div>
                                        <div class="total-amount order-total">@order.Total.ToString("C", new CultureInfo("en-MY"))</div>
                                    </div>
                                    <div class="action-buttons">
                                        <div class="btn-row">
                                            <a asp-action="Receipt" asp-controller="Cart" asp-route-id="@order.OrderId" class="action-btn btn-primary">
                                                <i class="fas fa-receipt"></i>
                                                <span>Receipt</span>
                                            </a>
                                            <a asp-action="Track" asp-controller="Cart" asp-route-orderNumber="@order.OrderId" class="action-btn btn-info track-order-btn" data-order-id="@order.OrderId">
                                                <i class="fas fa-truck"></i>
                                                <span>Track</span>
                                            </a>
                                        </div>
                                        <div class="btn-row">
                                            <form asp-action="SendReceiptEmail" asp-controller="Cart" asp-route-id="@order.OrderId" method="post" class="email-form" style="flex:1;">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="action-btn btn-success email-button w-100" style="min-width:180px;max-width:280px;height:48px;display:flex;align-items:center;justify-content:center;">
                                                    <i class="fas fa-envelope"></i>
                                                    <span>Email</span>
                                                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                                </button>
                                            </form>
                                            <button type="button" class="action-btn btn-secondary reorder-btn" data-order-id="@order.OrderId">
                                                <i class="fas fa-redo"></i>
                                                <span>Reorder</span>
                                            </button>
                                        </div>
                                        @if (order.Status == "Pending" || order.Status == "Preparing")
                                        {
                                            <div class="btn-row">
                                                <button type="button" class="action-btn btn-danger cancel-order-btn" data-order-id="@order.OrderId">
                                                    <i class="fas fa-times"></i>
                                                    <span>Cancel</span>
                                                </button>
                                            </div>
                                        }
                                        else if (order.Status == "Served")
                                        {
                                            <div class="btn-row">
                                                <a asp-action="Refund" asp-controller="Cart" asp-route-id="@order.OrderId" class="action-btn btn-warning">
                                                    <i class="fas fa-undo"></i>
                                                    <span>Refund</span>
                                                </a>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Pagination controls -->
            <div class="d-flex justify-content-center mt-4">
                <nav aria-label="Order history pagination">
                    <ul class="pagination" id="orderPagination">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    </div>

    <!-- Order Cancellation Modal -->
    <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to cancel this order? This action cannot be undone.</p>
                    <p>If you proceed, you will receive an SMS notification confirming the cancellation.</p>
                    <div class="form-group">
                        <label for="cancelReason">Reason for cancellation (optional):</label>
                        <textarea id="cancelReason" class="form-control" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" id="confirmCancelOrder">Cancel Order</button>
                </div>
            </div>
        </div>
    </div>
</div></div>