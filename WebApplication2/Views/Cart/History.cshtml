@model WebApplication2.Controllers.OrderHistoryVM
@using System.Globalization;

@{
    ViewBag.Title = "Order History";
    var selectedStatus = Context.Request.Query["status"].ToString();
}

@section Scripts {
    <script src="/js/email-receipt.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function () {
            // --- Enhanced Layout/Design: Card and Button Styling ---
            $(".order-card .card").addClass("shadow border-0");
            $(".order-card .card-header").addClass("bg-light border-bottom-0");
            
            // Apply consistent button styling
            $(".order-card .btn").addClass("rounded-pill px-3 fw-semibold");
            $(".order-card .btn").css({
                "min-width": "120px", 
                "margin-right": "8px",
                "transition": "all 0.3s ease",
                "position": "relative",
                "overflow": "hidden"
            });
            
            // Style specific button types
            $(".order-card .btn-outline-primary").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(0,123,255,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-outline-info").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(23,162,184,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-outline-success").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(40,167,69,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-outline-danger").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(220,53,69,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-warning").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(255,193,7,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-success").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(40,167,69,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            $(".order-card .btn-secondary").addClass("border-2").hover(function() {
                $(this).css("box-shadow", "0 4px 8px rgba(108,117,125,0.25)");
            }, function() {
                $(this).css("box-shadow", "none");
            });
            
            // Add ripple effect to buttons
            $(".order-card .btn").on("click", function(e) {
                const btn = $(this);
                const x = e.pageX - btn.offset().left;
                const y = e.pageY - btn.offset().top;
                
                const ripple = $('<span class="btn-ripple"></span>');
                ripple.css({
                    left: x + 'px',
                    top: y + 'px'
                });
                
                btn.append(ripple);
                
                setTimeout(function() {
                    ripple.remove();
                }, 700);
            });
            
            // Style images
            $(".order-card img").addClass("rounded shadow-sm border");

            // --- Status Filter: Reload with Query Param for Server-Side Filtering ---
            $('#statusFilter').off('change').on('change', function() {
                const status = $(this).val();
                const url = new URL(window.location.href);
                if (status) {
                    url.searchParams.set('status', status);
                } else {
                    url.searchParams.delete('status');
                }
                window.location.href = url.toString();
            });

            // --- Track Order Button: Go to Track Page with Order Number ---
            $(document).on('click', '.track-order-btn', function() {
                const orderId = $(this).data('order-id');
                window.location.href = '/Cart/Track?orderNumber=' + orderId;
            });
            
            // --- Reorder Button: Add items to cart ---
            $(document).on('click', '.reorder-btn', function() {
                const orderId = $(this).data('order-id');
                const btn = $(this);
                
                // Show loading state
                const originalText = btn.html();
                btn.html('<i class="fas fa-spinner fa-spin me-1"></i> Processing...');
                btn.prop('disabled', true);
                
                // Send AJAX request to reorder endpoint
                $.ajax({
                    url: '/Cart/Reorder',
                    type: 'POST',
                    data: { orderId: orderId },
                    success: function(response) {
                        if (response.success) {
                            // Show success message
                            const successAlert = $('<div class="alert alert-success alert-dismissible fade show" role="alert">' +
                                '<i class="fas fa-check-circle me-2"></i> Items added to cart successfully!' +
                                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                                '</div>');
                            $('.container.mt-3').prepend(successAlert);
                            
                            // Redirect to cart page after a short delay
                            setTimeout(function() {
                                window.location.href = '/Cart';
                            }, 1000);
                        } else {
                            // Show error message
                            const errorAlert = $('<div class="alert alert-dismissible fade show" role="alert">' +
                                '<i class="fas fa-exclamation-circle me-2"></i> ' + (response.message || 'Failed to add items to cart.') +
                                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                                '</div>');
                            $('.container.mt-3').prepend(errorAlert);
                            
                            // Reset button state
                            btn.html(originalText);
                            btn.prop('disabled', false);
                        }
                    },
                    error: function() {
                        // Show error message
                        const errorAlert = $('<div class="alert alert-danger alert-dismissible fade show" role="alert">' +
                            '<i class="fas fa-exclamation-circle me-2"></i> An error occurred while processing your request.' +
                            '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                            '</div>');
                        $('.container.mt-3').prepend(errorAlert);
                        
                        // Reset button state
                        btn.html(originalText);
                        btn.prop('disabled', false);
                    }
                });
            });
            
            // --- Search Functionality ---
            $('#searchBtn').on('click', function() {
                performSearch();
            });
            
            $('#searchInput').on('keypress', function(e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    performSearch();
                }
            });
            
            // --- Sorting Functionality ---
            $('#sortOptions').on('change', function() {
                const sortOption = $(this).val();
                sortOrders(sortOption);
            });
            
            // --- Load Chart Data ---
            loadChartData();
            
            // --- Initialize Pagination ---
            initPagination();
        });
        
        // Function to sort orders based on selected option
        function sortOrders(sortOption) {
            const orderCards = $('.order-card').toArray();
            
            // Sort the order cards based on the selected option
            orderCards.sort(function(a, b) {
                const cardA = $(a);
                const cardB = $(b);
                
                switch(sortOption) {
                    case 'date-newest':
                        const dateA = new Date(cardA.find('.order-date').data('date'));
                        const dateB = new Date(cardB.find('.order-date').data('date'));
                        return dateB - dateA; // Newest first
                    case 'date-oldest':
                        const dateC = new Date(cardA.find('.order-date').data('date'));
                        const dateD = new Date(cardB.find('.order-date').data('date'));
                        return dateC - dateD; // Oldest first
                    case 'price-highest':
                        const priceA = parseFloat(cardA.find('.order-total').data('price'));
                        const priceB = parseFloat(cardB.find('.order-total').data('price'));
                        return priceB - priceA; // Highest first
                    case 'price-lowest':
                        const priceC = parseFloat(cardA.find('.order-total').data('price'));
                        const priceD = parseFloat(cardB.find('.order-total').data('price'));
                        return priceC - priceD; // Lowest first
                    default:
                        return 0; // No sorting
                }
            });
            
            // Reappend the sorted cards to the container
            const container = $('.order-history-list');
            $.each(orderCards, function(index, card) {
                container.append(card);
            });
            
            // Show animation effect for sorting
            $('.order-card').addClass('sort-animation');
            setTimeout(function() {
                $('.order-card').removeClass('sort-animation');
            }, 500);
            
            // Reinitialize pagination after sorting
            initPagination();
        }
        
        // Global variables for pagination
        let currentPage = 1;
        const ordersPerPage = 5;
        let filteredOrders = [];
        
        // Function to initialize pagination
        function initPagination() {
            // Get all visible order cards
            filteredOrders = $('.order-card:visible').toArray();
            const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
            
            // Reset to first page when filtering changes
            currentPage = 1;
            
            // Update pagination controls
            updatePaginationControls(totalPages);
            
            // Show orders for current page
            showOrdersForPage(currentPage);
        }
        
        // Function to update pagination controls
        function updatePaginationControls(totalPages) {
            // Clear existing pagination
            $('.pagination-controls').remove();
            
            if (totalPages <= 1) {
                return; // No need for pagination
            }
            
            // Create pagination controls
            let paginationHtml = '<div class="pagination-controls">';
            
            // First page button
            paginationHtml += `<button class="page-btn first-btn" ${currentPage === 1 ? 'disabled' : ''} title="First Page">
                <i class="fas fa-angle-double-left"></i>
            </button>`;
            
            // Previous button
            paginationHtml += `<button class="page-btn prev-btn" ${currentPage === 1 ? 'disabled' : ''} title="Previous Page">
                <i class="fas fa-chevron-left"></i> Prev
            </button>`;
            
            // Page buttons (show max 5 pages)
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, startPage + 4);
            
            // Show ellipsis for first pages if needed
            if (startPage > 1) {
                paginationHtml += `<button class="page-btn" data-page="1">1</button>`;
                if (startPage > 2) {
                    paginationHtml += `<span class="page-ellipsis">...</span>`;
                }
            }
            
            // Show page buttons
            for (let i = startPage; i <= endPage; i++) {
                paginationHtml += `<button class="page-btn ${i === currentPage ? 'active' : ''}" data-page="${i}">${i}</button>`;
            }
            
            // Show ellipsis for last pages if needed
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHtml += `<span class="page-ellipsis">...</span>`;
                }
                paginationHtml += `<button class="page-btn" data-page="${totalPages}">${totalPages}</button>`;
            }
            
            // Next button
            paginationHtml += `<button class="page-btn next-btn" ${currentPage === totalPages ? 'disabled' : ''} title="Next Page">
                Next <i class="fas fa-chevron-right"></i>
            </button>`;
            
            // Last page button
            paginationHtml += `<button class="page-btn last-btn" ${currentPage === totalPages ? 'disabled' : ''} title="Last Page">
                <i class="fas fa-angle-double-right"></i>
            </button>`;
            
            // Page info
            paginationHtml += `<span class="page-info">
                <i class="fas fa-file-alt me-1"></i> Page ${currentPage} of ${totalPages}
            </span>`;
            
            paginationHtml += '</div>';
            
            // Append pagination controls
            $('.order-history-list').after(paginationHtml);
            
            // Add event listeners
            $('.page-btn[data-page]').on('click', function() {
                currentPage = parseInt($(this).data('page'));
                showOrdersForPage(currentPage);
                updatePaginationControls(totalPages);
            });
            
            $('.prev-btn').on('click', function() {
                if (currentPage > 1) {
                    currentPage--;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
            
            $('.next-btn').on('click', function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
            
            $('.first-btn').on('click', function() {
                if (currentPage > 1) {
                    currentPage = 1;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
            
            $('.last-btn').on('click', function() {
                if (currentPage < totalPages) {
                    currentPage = totalPages;
                    showOrdersForPage(currentPage);
                    updatePaginationControls(totalPages);
                }
            });
        }
        
        // Function to show orders for the current page
        function showOrdersForPage(page) {
            // Hide all orders
            $('.order-card').hide();
            
            // Calculate start and end index
            const startIndex = (page - 1) * ordersPerPage;
            const endIndex = Math.min(startIndex + ordersPerPage, filteredOrders.length);
            
            // Show orders for current page with animation
            for (let i = startIndex; i < endIndex; i++) {
                const orderCard = $(filteredOrders[i]);
                orderCard.addClass('page-transition');
                orderCard.show();
                
                // Remove animation class after animation completes
                setTimeout(() => {
                    orderCard.removeClass('page-transition');
                }, 400); // Match the animation duration
            }
            
            // Scroll to top of order list
            $('html, body').animate({
                scrollTop: $('.order-history-list').offset().top - 100
            }, 300);
        }
        
        // Function to perform search on orders
        function performSearch() {
            const searchTerm = $('#searchInput').val().trim().toLowerCase();
            if (!searchTerm) {
                // If search is empty, show all orders
                $('.order-card').show();
                // Initialize pagination with all orders
                initPagination();
                return;
            }
            
            // Hide all orders initially
            $('.order-card').hide();
            
            // Show orders that match the search term
            $('.order-card').each(function() {
                const orderCard = $(this);
                const orderId = orderCard.find('.order-id').text().toLowerCase();
                const orderDate = orderCard.find('.order-date').text().toLowerCase();
                const orderItems = orderCard.find('.order-item-name').text().toLowerCase();
                
                if (orderId.includes(searchTerm) || 
                    orderDate.includes(searchTerm) || 
                    orderItems.includes(searchTerm)) {
                    orderCard.show();
                }
            });
            
            // Show message if no results found
            if ($('.order-card:visible').length === 0) {
                if ($('#no-results-message').length === 0) {
                    $('.order-history-container').append(
                        '<div id="no-results-message" class="alert alert-info mt-3">No orders found matching your search.</div>'
                    );
                }
            } else {
                $('#no-results-message').remove();
                // Initialize pagination with filtered results
                initPagination();
            }
        }
        
        // Function to load chart data from the server
        function loadChartData() {
            $.ajax({
                url: '/Cart/GetPurchaseSummaryData',
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    if (data.error) {
                        console.error('Error loading chart data:', data.error);
                        return;
                    }
                    
                    // Initialize Monthly Spending Chart
                    initMonthlySpendingChart(data.monthlyLabels, data.monthlyData);
                    
                    // Initialize Order Categories Chart
                    initOrderCategoriesChart(data.categoryLabels, data.categoryData);
                },
                error: function(xhr, status, error) {
                    console.error('AJAX error:', error);
                }
            });
        }
        
        // Initialize Monthly Spending Chart
        function initMonthlySpendingChart(labels, data) {
            const ctx = document.getElementById('monthlySpendingChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Monthly Spending',
                        data: data,
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return 'RM ' + value;
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'RM ' + context.raw.toFixed(2);
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // Initialize Order Categories Chart
        function initOrderCategoriesChart(labels, data) {
            const ctx = document.getElementById('orderCategoriesChart').getContext('2d');
            const backgroundColors = [
                'rgba(255, 99, 132, 0.7)',
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)'
            ];
            
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: backgroundColors.map(color => color.replace('0.7', '1')),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 15,
                                padding: 15
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }
    </script>
    <style>
        /* Main Container Styling */
        .order-history-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        /* Order Card Styling */
        .order-card .card {
            transition: box-shadow 0.3s, transform 0.2s;
            border-radius: 12px;
            overflow: hidden;
        }
        .order-card .card:hover {
            box-shadow: 0 0 0 4px #4caf5040, 0 8px 24px rgba(0,0,0,0.12);
            transform: translateY(-5px);
        }
        .order-card .card-header {
            font-size: 1.1rem;
            font-weight: 600;
            background-color: #f8f9fa;
            border-bottom: 1px solid rgba(0,0,0,0.05);
        }
        .order-card .btn-group .btn {
            margin-bottom: 8px;
        }
        .order-card .btn-group {
            flex-wrap: wrap;
            gap: 0.75rem;
        }
        .order-card img {
            border: 2px solid #e0e0e0;
            transition: all 0.3s ease;
            border-radius: 8px;
        }
        .order-card img:hover {
            transform: scale(1.05);
            border-color: #adb5bd;
        }
        .order-card .badge {
            font-size: 1rem;
            padding: 0.5em 1em;
            border-radius: 50px;
        }
        .order-card .card-title {
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 1rem;
            color: #343a40;
        }
        .order-card .list-group-item {
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: background-color 0.2s;
        }
        .order-card .list-group-item:hover {
            background: #e9ecef;
        }
        .order-card .btn {
            font-size: 0.95rem;
            border-radius: 2rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .order-card .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .order-card .btn i {
            margin-right: 4px;
        }
        .order-card .btn-outline-info {
            color: #0dcaf0;
            border-color: #0dcaf0;
        }
        .order-card .btn-outline-info:hover {
            background: #0dcaf0;
            color: #fff;
        }
        .order-card .btn-outline-success {
            color: #198754;
            border-color: #198754;
        }
        .order-card .btn-outline-success:hover {
            background: #198754;
            color: #fff;
        }
        .order-card .btn-outline-danger {
            color: #dc3545;
            border-color: #dc3545;
        }
        .order-card .btn-outline-danger:hover {
            background: #dc3545;
            color: #fff;
        }
        .order-card .btn-outline-primary {
            color: #0d6efd;
            border-color: #0d6efd;
        }
        .order-card .btn-outline-primary:hover {
            background: #0d6efd;
            color: #fff;
        }
        .order-card .btn-warning {
            color: #fff;
            background: #ffc107;
            border-color: #ffc107;
        }
        .order-card .btn-warning:hover {
            background: #ffb300;
            color: #fff;
        }
        .order-card .btn-secondary {
            color: #fff;
            background: #6c757d;
            border-color: #6c757d;
        }
        .order-card .btn-secondary:hover {
            background: #495057;
            color: #fff;
        }
        .order-card .btn-success {
            color: #fff;
            background: #198754;
            border-color: #198754;
        }
        .order-card .btn-success:hover {
            background: #157347;
            color: #fff;
        }
        .order-card .btn-group .btn:last-child {
            margin-right: 0;
        }
        .order-card .btn-group .btn {
            min-width: 110px;
        }
        .order-card .btn .spinner-border {
            margin-left: 6px;
        }
        
        /* Search and Filter Controls */
        .search-container {
            position: relative;
            margin-bottom: 20px;
        }
        
        .search-container .form-control {
            border-radius: 50px;
            padding-left: 30px;
            padding-right: 50px;
            height: 45px;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }
        
        /* Pagination Styling */
        .pagination .page-item .page-link {
            border-radius: 50px;
            margin: 0 5px;
            width: 80px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
            border: 2px solid #e9ecef;
            color: #495057;
            transition: all 0.3s ease;
        }
        
        .pagination .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
            color: white;
        }
        
        /* Chart Containers */
        .chart-container {
            height: 350px;
            background-color: #fff;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }
        
        .chart-container:hover {
             box-shadow: 0 4px 15px rgba(0,0,0,0.1);
         }
         
         /* Button Ripple Effect */
         .btn-ripple {
             position: absolute;
             background: rgba(255, 255, 255, 0.4);
             border-radius: 50%;
             transform: scale(0);
             animation: ripple 0.6s linear;
             pointer-events: none;
             width: 100px;
             height: 100px;
         }
         
         @@keyframes ripple {
             to {
                 transform: scale(4);
                 opacity: 0;
             }
         }
         
         /* Sort Animation */
         .sort-animation {
             animation: sortFade 0.5s ease;
         }
         
         @@keyframes sortFade {
             0% { opacity: 0.5; transform: translateY(10px); }
             100% { opacity: 1; transform: translateY(0); }
         }
         
         /* Pagination Controls */
         .pagination-controls {
             display: flex;
             justify-content: center;
             align-items: center;
             margin-top: 30px;
             margin-bottom: 20px;
             gap: 8px;
             background-color: #f8f9fa;
             padding: 12px 20px;
             border-radius: 50px;
             box-shadow: 0 2px 10px rgba(0,0,0,0.05);
             flex-wrap: wrap;
         }
         
         .pagination-controls .page-btn {
             min-width: 40px;
             height: 40px;
             border-radius: 50%;
             display: flex;
             align-items: center;
             justify-content: center;
             border: 2px solid #e9ecef;
             background-color: white;
             color: #495057;
             font-weight: 500;
             transition: all 0.3s ease;
             cursor: pointer;
             box-shadow: 0 2px 5px rgba(0,0,0,0.05);
             margin: 0 2px;
         }
         
         .pagination-controls .page-btn:hover {
             background-color: #e9ecef;
             transform: translateY(-2px);
             box-shadow: 0 4px 8px rgba(0,0,0,0.1);
         }
         
         .pagination-controls .page-btn.active {
             background-color: #007bff;
             border-color: #007bff;
             color: white;
             box-shadow: 0 4px 8px rgba(0,123,255,0.25);
         }
         
         .pagination-controls .page-btn:disabled {
             opacity: 0.5;
             cursor: not-allowed;
             box-shadow: none;
             transform: none;
         }
         
         .pagination-controls .prev-btn,
         .pagination-controls .next-btn {
             font-size: 0.9rem;
             padding: 0 15px;
             border-radius: 20px;
             width: auto;
         }
         
         .pagination-controls .page-info {
             font-size: 0.9rem;
             color: #6c757d;
             background-color: white;
             padding: 8px 15px;
             border-radius: 20px;
             margin-left: 10px;
             box-shadow: 0 2px 5px rgba(0,0,0,0.05);
             display: flex;
             align-items: center;
         }
         
         .pagination-controls .page-ellipsis {
             display: inline-flex;
             align-items: center;
             justify-content: center;
             padding: 0 5px;
             font-weight: bold;
             color: #6c757d;
         }
         
         /* Animation for page transitions */
         .order-card.page-transition {
             animation: pageTransition 0.4s ease;
         }
         
         @@keyframes pageTransition {
             0% { opacity: 0; transform: translateY(10px); }
             100% { opacity: 1; transform: translateY(0); }
         }
     </style>
}

<!-- Notification alerts for success/error messages -->
<div class="container mt-3">
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Order History Header with Filters -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>My Order History</h2>
        @if (User.IsInRole("Admin"))
        {
            <a href="@Url.Action("Orders", "Admin")" class="btn btn-primary">Manage All Orders</a>
        }
    </div>
        <div class="d-flex gap-2">
            <div class="input-group">
                <input type="text" id="searchInput" class="form-control" placeholder="Search orders..." aria-label="Search orders">
                <button class="btn btn-outline-secondary" type="button" id="searchButton">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <select id="statusFilter" class="form-select">
                <option value="" selected="@(string.IsNullOrEmpty(selectedStatus))">All Statuses</option>
                <option value="Pending" selected="@(selectedStatus == "Pending")">Pending</option>
                <option value="Preparing" selected="@(selectedStatus == "Preparing")">Preparing</option>
                <option value="Served" selected="@(selectedStatus == "Served")">Served</option>
                <option value="Cancelled" selected="@(selectedStatus == "Cancelled")">Cancelled</option>
                <option value="Refunded" selected="@(selectedStatus == "Refunded")">Refunded</option>
            </select>
            <select id="sortOrder" class="form-select">
                <option value="date_desc">Newest First</option>
                <option value="date_asc">Oldest First</option>
                <option value="total_desc">Highest Amount</option>
                <option value="total_asc">Lowest Amount</option>
            </select>
        </div>
    </div>

    <!-- Purchase Summary Charts -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Monthly Spending</div>
                <div class="card-body">
                    <div style="height: 350px; width: 350px; margin: 0 auto;">
                        <canvas id="monthlySpendingChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Order Categories</div>
                <div class="card-body">
                    <div style="height: 350px; width: 350px; margin: 0 auto;">
                        <canvas id="orderCategoriesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <!-- Order listing container with pagination -->
    <div id="orderListingContainer">
        <!-- Displays a message if no orders exist;
        otherwise, lists each past order with details,
        items, total price, and a link to view the receipt,
        with two orders side by side per row. -->
        @if (!Model.Orders.Any())
        {
            <div class="text-center empty-cart py-4">
                <i class="fas fa-solid fa-clipboard-list fa-3x mb-3"></i>
                <p class="in-the-middle lead">You have no past orders.</p>
                <a asp-action="Index" asp-controller="MenuItem" class="btn btn-primary">Start Shopping</a>
            </div>
        }
        else
        {
            <div class="row" id="ordersList">
                @foreach (var order in Model.Orders)
                {
                    <div class="col-md-6 mb-4 order-card" data-order-id="@order.OrderId" data-order-date="@order.OrderDate.ToString("yyyy-MM-ddTHH:mm:ss")" data-order-total="@order.Total" data-order-status="@order.Status">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>Order #@order.OrderId</strong> - @order.OrderDate.ToString("yyyy-MM-dd HH:mm")
                                </div>
                                @if (order.Status == "Pending" || order.Status == "Preparing")
                                {
                                    <span class="badge bg-primary">@order.Status</span>
                                }
                                else if (order.Status == "Served")
                                {
                                    <span class="badge bg-success">@order.Status</span>
                                }
                                else if (order.Status == "Cancelled")
                                {
                                    <span class="badge bg-danger">@order.Status</span>
                                }
                                else if (order.Status == "Refunded")
                                {
                                    <span class="badge bg-warning text-dark">@order.Status</span>
                                }
                                else
                                {
                                    <span class="badge bg-info">@order.Status</span>
                                }
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">Items:</h5>
                                <ul class="list-group list-group-flush mb-3">
                                    @foreach (var item in order.Items)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                @if (!string.IsNullOrEmpty(item.PhotoURL))
                                                {
                                                    <img src="/Images/@item.PhotoURL" alt="@item.MenuItemName" style="width:50px; height:50px; object-fit:cover; margin-right:10px;">
                                                }
                                                @item.MenuItemName x @item.Quantity
                                            </div>
                                            <span>@((item.UnitPrice * item.Quantity).ToString("C", new CultureInfo("en-MY")))</span>
                                        </li>
                                    }
                                </ul>
                                <div class="mt-2">
                                    <strong>Delivery Address:</strong> @order.DeliveryAddress
                                    <br>
                                    <strong>Delivery Option:</strong> @order.DeliveryOption
                                </div>
                                <div class="d-flex justify-content-between align-items-center mt-auto pt-3">
                                    <h4 class="mb-0">Total: @order.Total.ToString("C", new CultureInfo("en-MY"))</h4>
                                    <div class="btn-group">
                                        <a asp-action="Receipt" asp-controller="Cart" asp-route-id="@order.OrderId" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-receipt me-1"></i> View Receipt
                                        </a>
                                        <a asp-action="Track" asp-controller="Cart" asp-route-orderNumber="@order.OrderId" class="btn btn-sm btn-outline-info track-order-btn" data-order-id="@order.OrderId">
                                            <i class="fas fa-truck me-1"></i> Track Order
                                        </a>
                                        <form asp-action="SendReceiptEmail" asp-controller="Cart" asp-route-id="@order.OrderId" method="post" style="display:inline-block;" class="email-form">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-sm btn-success email-button">
                                                <i class="fas fa-envelope me-1"></i> Email
                                                <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                            </button>
                                        </form>
                                        <button type="button" class="btn btn-sm btn-secondary reorder-btn" data-order-id="@order.OrderId">
                                            <i class="fas fa-redo me-1"></i> Reorder
                                        </button>
                                        @if (order.Status == "Pending" || order.Status == "Preparing")
                                        {
                                            <button type="button" class="btn btn-sm btn-danger cancel-order-btn" data-order-id="@order.OrderId">
                                                <i class="fas fa-times me-1"></i> Cancel
                                            </button>
                                        }
                                        else if (order.Status == "Served")
                                        {
                                            <a asp-action="Refund" asp-controller="Cart" asp-route-id="@order.OrderId" class="btn btn-sm btn-warning">
                                                <i class="fas fa-undo me-1"></i> Refund
                                            </a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Pagination controls -->
            <div class="d-flex justify-content-center mt-4">
                <nav aria-label="Order history pagination">
                    <ul class="pagination" id="orderPagination">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    </div>

    <!-- Order Cancellation Modal -->
    <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to cancel this order? This action cannot be undone.</p>
                    <p>If you proceed, you will receive an SMS notification confirming the cancellation.</p>
                    <div class="form-group">
                        <label for="cancelReason">Reason for cancellation (optional):</label>
                        <textarea id="cancelReason" class="form-control" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" id="confirmCancelOrder">Cancel Order</button>
                </div>
            </div>
        </div>
    </div>
</div>