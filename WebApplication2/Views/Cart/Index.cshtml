@model List<WebApplication2.Models.CartItemVM>
@using Microsoft.AspNetCore.Http;
@inject IHtmlHelper Html

@{
    ViewBag.Title = "Your Cart";
}

<div class="container py-4">
    <!-- Enhanced Cart Header -->
    <div class="cart-header mb-5">
        <div class="row align-items-center">
            <div class="col-lg-8">
                <div class="d-flex align-items-center mb-3">
                    <div class="header-icon me-3">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                    <div>
                        <h1 class="page-title mb-1">Your Cart</h1>
                        <p class="page-subtitle text-muted">Review and manage your selected items</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="stats-card">
                    <div class="stats-item">
                        <i class="fas fa-shopping-bag text-primary"></i>
                        <div>
                            <span class="stats-number" id="itemCount">@Model.Sum(item => item.Quantity)</span>
                            <span class="stats-label">Items in Cart</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Enhanced Search and Filter Section -->
        <div class="search-filter-section mt-4">
            <form id="filterForm" class="row g-3">
                <div class="col-lg-4">
                    <div class="input-group search-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" name="search" id="searchInput" placeholder="Search items..." class="form-control" />
                        <button class="btn btn-outline-secondary" type="button" id="clearFilters" title="Clear filters">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="col-lg-3">
                    <input type="number" name="minPrice" id="minPriceInput" placeholder="Min Price (RM)" class="form-control filter-input" min="0" step="0.01" />
                </div>
                <div class="col-lg-3">
                    <input type="number" name="maxPrice" id="maxPriceInput" placeholder="Max Price (RM)" class="form-control filter-input" min="0" step="0.01" />
                </div>
                <div class="col-lg-2">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter me-1"></i> Filter
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div id="cartContent" style="@(Model.Any() ? "" : "display:none;")">
        <!-- Modern Cart Items Section -->
        <div class="cart-items-section">
            <div class="section-header mb-4">
                <h3 class="section-title">
                    <i class="fas fa-list-ul me-2"></i>Cart Items
                </h3>
            </div>
            
            <div class="cart-items-container">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 100px">Photo</th>
                                <th>Item</th>
                                <th class="text-end">Price</th>
                                <th style="width: 150px" class="text-center">Quantity</th>
                                <th class="text-end">Subtotal</th>
                                <th style="width: 50px"></th>
                            </tr>
                        </thead>
                        <tbody id="cartTableBody">
                            @foreach (var item in Model)
                            {
                                <tr data-menu-item-id="@item.MenuItemId">
                                    <td>
                                        <img src="/Images/@(item.PhotoURL ?? "default.jpg")"
                                             class="cart-item-image"
                                             alt="@item.Name" />
                                    </td>
                                    <td>
                                        <h6 class="mb-0">@item.Name</h6>
                                        @if (!string.IsNullOrEmpty(item.SelectedPersonalizations))
                                        {
                                            var personalizations = item.SelectedPersonalizations.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                            if (personalizations.Length > 1)
                                            {
                                                <div class="small text-muted">Personalizations:</div>
                                                <ul>
                                                    @foreach (var personalization in personalizations)
                                                    {
                                                        <li>@personalization.Trim()</li>
                                                    }
                                                </ul>
                                            }
                                            else
                                            {
                                                <div class="small text-muted">Personalization: @item.SelectedPersonalizations</div>
                                            }
                                        }
                                    </td>
                                    <td class="text-end item-price" data-price="@item.Price">
                                        RM @item.Price.ToString("0.00")
                                    </td>
                                    <td>
                                        <div class="quantity-control">
                                            <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn"
                                                    onclick="updateQuantity(this, -1)">
                                                âˆ’
                                            </button>
                                            <input type="number"
                                                   class="item-quantity form-control"
                                                   value="@item.Quantity"
                                                   min="1" max="100"
                                                   data-item-price="@item.Price"
                                                   data-menu-item-id="@item.MenuItemId" />
                                            <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn"
                                                    onclick="updateQuantity(this, 1)">
                                                +
                                            </button>
                                        </div>
                                    </td>
                                    <td class="text-end item-subtotal">
                                        RM @((item.Price * item.Quantity).ToString("0.00"))
                                    </td>
                                    <td>
                                        <button class="btn btn-link text-danger remove-item"
                                                data-menu-item-id="@item.MenuItemId">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Enhanced Cart Summary -->
                <div class="cart-summary-section mt-5">
                    <div class="row">
                        <div class="col-lg-8">
                            <div class="cart-actions-section">
                                <div class="actions-header mb-3">
                                    <h5 class="actions-title">
                                        <i class="fas fa-cogs me-2"></i>Cart Actions
                                    </h5>
                                    <p class="actions-subtitle">Manage your shopping cart</p>
                                </div>
                                <div class="actions-grid">
                                    <div class="action-card clear-cart-card">
                                        <div class="action-icon">
                                            <i class="fas fa-trash-alt"></i>
                                        </div>
                                        <div class="action-content">
                                            <h6 class="action-title">Clear Cart</h6>
                                            <p class="action-description">Remove all items from your cart</p>
                                            <button onclick="clearCart()" class="btn btn-danger action-btn">
                                                <i class="fas fa-trash me-2"></i>Clear All
                                            </button>
                                        </div>
                                    </div>
                                    <div class="action-card continue-shopping-card">
                                        <div class="action-icon">
                                            <i class="fas fa-utensils"></i>
                                        </div>
                                        <div class="action-content">
                                            <h6 class="action-title">Continue Shopping</h6>
                                            <p class="action-description">Browse more delicious items</p>
                                            <a asp-action="Index" asp-controller="MenuItem" class="btn btn-primary action-btn">
                                                <i class="fas fa-arrow-left me-2"></i>Browse Menu
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="order-summary-card">
                                <div class="summary-header">
                                    <h4 class="summary-title">
                                        <i class="fas fa-calculator me-2"></i>Order Summary
                                    </h4>
                                </div>
                                <div class="summary-body">
                                    <div class="summary-row">
                                        <span class="summary-label">Subtotal</span>
                                        <span class="summary-value" id="grandTotal">
                                            RM @Model.Sum(item => item.Price * item.Quantity).ToString("0.00")
                                        </span>
                                    </div>
                                    <div class="summary-row">
                                        <span class="summary-label">Delivery</span>
                                        <span class="summary-value text-success">FREE</span>
                                    </div>
                                    <hr class="summary-divider">
                                    <div class="summary-row total-row">
                                        <span class="summary-label">Total</span>
                                        <span class="summary-total" id="finalTotal">
                                            RM @Model.Sum(item => item.Price * item.Quantity).ToString("0.00")
                                        </span>
                                    </div>
                                </div>
                                <div class="summary-footer">
                                    <form asp-action="CreatePendingOrder" asp-controller="Cart" method="post">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-success btn-lg w-100 checkout-btn">
                                            <i class="fas fa-credit-card me-2"></i>Proceed to Payment
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Empty Cart Section -->
    <div id="emptyCart" class="empty-cart-section" style="@(Model.Any() ? "display:none;" : "")">
        <div class="empty-cart-card">
            <div class="empty-cart-icon">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <h3 class="empty-cart-title">Your cart is empty</h3>
            <p class="empty-cart-message" id="emptyCartMessage">
                Looks like you haven't added any items to your cart yet. 
                Start browsing our delicious menu!
            </p>
            <div class="empty-cart-actions">
                <a asp-action="Index" asp-controller="MenuItem" class="btn btn-primary btn-lg">
                    <i class="fas fa-utensils me-2"></i>Browse Menu
                </a>
            </div>
        </div>
    </div>

    <!-- Loading indicator -->
    <div id="loadingIndicator" style="display: none; text-align: center; padding: 20px;">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const cartTableBody = document.getElementById('cartTableBody');
            const grandTotalElement = document.getElementById('grandTotal');
            const finalTotalElement = document.getElementById('finalTotal');
            const itemCountElement = document.getElementById('itemCount');
            const cartContentDiv = document.getElementById('cartContent');
            const emptyCartDiv = document.getElementById('emptyCart');
            const emptyCartMessage = document.getElementById('emptyCartMessage');

            const currencyFormatter = (value) => `RM ${Number(value).toFixed(2)}`;

            function getAntiForgeryToken() {
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenInput ? tokenInput.value : '';
            }

            // Filter functionality
            document.getElementById('filterForm').addEventListener('submit', function(e) {
                e.preventDefault();
                performFilter();
            });

            // Clear filters
            document.getElementById('clearFilters').addEventListener('click', function() {
                document.getElementById('searchInput').value = '';
                document.getElementById('minPriceInput').value = '';
                document.getElementById('maxPriceInput').value = '';
                performFilter();
            });

            // Real-time filtering
            document.getElementById('searchInput').addEventListener('input', debounce(performFilter, 500));
            
            // Initialize totals on page load
            function initializeTotals() {
                // Ensure final total matches subtotal on page load
                if (grandTotalElement && finalTotalElement) {
                    const subtotalText = grandTotalElement.textContent;
                    finalTotalElement.textContent = subtotalText;
                }
            }
            
            // Call initialization
            initializeTotals();

            function performFilter() {
                const search = document.getElementById('searchInput').value;
                const minPrice = document.getElementById('minPriceInput').value;
                const maxPrice = document.getElementById('maxPriceInput').value;

                // Show loading indicator
                document.getElementById('loadingIndicator').style.display = 'block';
                document.getElementById('cartTableBody').style.opacity = '0.5';

                // Build query parameters
                const params = new URLSearchParams();
                if (search) params.append('search', search);
                if (minPrice) params.append('minPrice', minPrice);
                if (maxPrice) params.append('maxPrice', maxPrice);

                // Make AJAX request
                fetch(`@Url.Action("GetFilteredCartItems", "Cart")?${params.toString()}`)
                    .then(response => response.json())
                    .then(data => {
                        updateTable(data);
                    })
                    .catch(error => {
                        console.error('Error filtering cart items:', error);
                        alert('Failed to filter cart items. Please try again.');
                    })
                    .finally(() => {
                        // Hide loading indicator
                        document.getElementById('loadingIndicator').style.display = 'none';
                        document.getElementById('cartTableBody').style.opacity = '1';
                    });
            }

            function updateTable(data) {
                const tbody = document.getElementById('cartTableBody');
                grandTotalElement.textContent = currencyFormatter(data.fullTotal);
                
                // Update final total to match subtotal (since delivery is FREE)
                if (finalTotalElement) {
                    finalTotalElement.textContent = currencyFormatter(data.fullTotal);
                }
                
                // Update item count
                if (itemCountElement && data.items) {
                    const totalItems = data.items.reduce((sum, item) => sum + item.quantity, 0);
                    itemCountElement.textContent = totalItems;
                }

                if (data.items.length === 0) {
                    if (data.fullTotal === 0) {
                        cartContentDiv.style.display = 'none';
                        emptyCartDiv.style.display = 'block';
                        emptyCartMessage.textContent = 'Your cart is empty';
                    } else {
                        tbody.innerHTML = '<tr><td colspan="6" class="text-center">No items match your filter</td></tr>';
                    }
                } else {
                    let html = '';
                    data.items.forEach(item => {
                        const photoURL = item.photoURL ? item.photoURL : 'default.jpg';
                        const personalizations = item.selectedPersonalizations ? item.selectedPersonalizations.split(',').map(p => p.trim()) : [];
                        let persHtml = '';
                        if (personalizations.length > 0) {
                            if (personalizations.length > 1) {
                                persHtml = '<div class="small text-muted">Personalizations:</div><ul>' + personalizations.map(p => `<li>${p}</li>`).join('') + '</ul>';
                            } else {
                                persHtml = `<div class="small text-muted">Personalization: ${personalizations[0]}</div>`;
                            }
                        }

                        html += `
                            <tr data-menu-item-id="${item.menuItemId}">
                                <td>
                                    <img src="/Images/${photoURL}" class="cart-item-image" alt="${item.name}" />
                                </td>
                                <td>
                                    <h6 class="mb-0">${item.name}</h6>
                                    ${persHtml}
                                </td>
                                <td class="text-end item-price" data-price="${item.price}">
                                    ${currencyFormatter(item.price)}
                                </td>
                                <td>
                                    <div class="quantity-control">
                                        <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn" onclick="updateQuantity(this, -1)">âˆ’</button>
                                        <input type="number" class="item-quantity form-control" value="${item.quantity}" min="1" max="100" data-item-price="${item.price}" data-menu-item-id="${item.menuItemId}" />
                                        <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn" onclick="updateQuantity(this, 1)">+</button>
                                    </div>
                                </td>
                                <td class="text-end item-subtotal">
                                    ${currencyFormatter(item.price * item.quantity)}
                                </td>
                                <td>
                                    <button class="btn btn-link text-danger remove-item" data-menu-item-id="${item.menuItemId}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>`;
                    });
                    tbody.innerHTML = html;
                    cartContentDiv.style.display = 'block';
                    emptyCartDiv.style.display = 'none';
                }
            }

            // Debounce function
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            window.updateQuantity = function(button, change) {
                const container = button.closest('.quantity-control');
                const input = container.querySelector('.item-quantity');
                let newValue = parseInt(input.value) + change;

                // Ensure within bounds
                newValue = Math.max(1, Math.min(100, newValue));
                input.value = newValue;

                // Trigger input event to update cart
                const event = new Event('input', { bubbles: true });
                input.dispatchEvent(event);
            };

            // Delegated event for quantity input
            cartTableBody.addEventListener('input', function(event) {
                if (event.target.classList.contains('item-quantity')) {
                    const input = event.target;
                    const menuItemId = input.dataset.menuItemId;
                    let newQuantity = parseInt(input.value);

                    if (isNaN(newQuantity) || newQuantity < 1) {
                        newQuantity = 1;
                        input.value = 1;
                    }
                    if (newQuantity > 100) {
                        newQuantity = 100;
                        input.value = 100;
                    }

                    fetch('/Cart/UpdateQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ menuItemId: menuItemId, quantity: newQuantity })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(error => { throw new Error(error.message || `Server error: ${response.status}`); });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            performFilter();
                        } else {
                            alert('Failed to update quantity: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while updating quantity. Please try again.');
                    });
                }
            });

            // Delegated event for remove item
            cartTableBody.addEventListener('click', function(e) {
                const button = e.target.closest('.remove-item');
                if (button) {
                    e.preventDefault();
                    if (confirm('Are you sure you want to remove this item?')) {
                        const menuItemId = button.dataset.menuItemId;

                        fetch('/Cart/RemoveItem', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            },
                            body: JSON.stringify({ menuItemId: menuItemId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                performFilter();
                            } else {
                                alert('Failed to remove item: ' + data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while removing the item.');
                        });
                    }
                }
            });

            window.clearCart = function() {
                if (confirm('Are you sure you want to clear your cart?')) {
                    window.location.href = '@Url.Action("Clear")';
                }
            };
        });
    </script>
}

<style>
    /* =============================================================================
       ENHANCED CART PAGE STYLING - MODERN DESIGN
       ============================================================================= */
    
    /* Cart Header Styling */
    .cart-header {
        background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
        border-radius: 20px;
        padding: 2rem;
        box-shadow: var(--shadow-lg);
        margin-bottom: 2rem;
    }
    
    .header-icon {
        width: 60px;
        height: 60px;
        background: rgba(255,255,255,0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        backdrop-filter: blur(10px);
    }
    
    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .page-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
        margin: 0;
    }
    
    .stats-card {
        background: rgba(255,255,255,0.15);
        border-radius: 15px;
        padding: 1.5rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .stats-item {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .stats-item i {
        font-size: 2rem;
    }
    
    .stats-number {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        line-height: 1;
    }
    
    .stats-label {
        font-size: 0.9rem;
        opacity: 0.8;
    }
    
    /* Search and Filter Section */
    .search-filter-section {
        background: rgba(255,255,255,0.1);
        border-radius: 15px;
        padding: 1.5rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .search-group {
        box-shadow: var(--shadow-sm);
        border-radius: 10px;
        overflow: hidden;
    }
    
    .search-group .input-group-text {
        border: none;
        color: var(--text-secondary);
        background: var(--bg-primary);
    }
    
    .search-group .form-control {
        border: none;
        font-size: 1rem;
        padding: 0.75rem 1rem;
        background: var(--bg-primary);
        color: var(--text-primary);
    }
    
    .filter-input {
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        box-shadow: var(--shadow-sm);
        border-radius: 10px;
        padding: 0.75rem 1rem;
        color: var(--text-primary);
    }
    
    .filter-input:focus {
        box-shadow: 0 0 0 0.2rem rgba(255,255,255,0.25);
        border-color: var(--primary-brand);
    }
    
    /* Cart Items Section */
    .cart-items-section {
        margin-bottom: 3rem;
    }
    
    .section-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .section-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }
    
    .cart-items-container {
        background: var(--bg-primary);
        border-radius: 20px;
        box-shadow: var(--shadow-lg);
        overflow: hidden;
        border: 1px solid var(--border-light);
    }
    
    /* Enhanced Table Styling */
    .table {
        margin-bottom: 0;
    }
    
    .table thead th {
        background: var(--bg-secondary);
        color: var(--text-primary);
        font-weight: 600;
        border: none;
        padding: 1rem;
    }
    
    .table tbody td {
        padding: 1.5rem 1rem;
        border-color: var(--border-light);
        vertical-align: middle;
    }
    
    .table tbody tr:hover {
        background: var(--bg-secondary);
    }
    
    /* Cart Item Image */
    .cart-item-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 12px;
        border: 2px solid var(--border-light);
        transition: all 0.3s ease;
        box-shadow: var(--shadow-sm);
    }
    
    .cart-item-image:hover {
        transform: scale(1.05);
        box-shadow: var(--shadow-md);
        border-color: var(--primary-brand);
    }
    
    /* Quantity Controls */
    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        background: var(--bg-secondary);
        border-radius: 12px;
        padding: 8px;
    }
    
    .quantity-control .form-control {
        width: 60px;
        text-align: center;
        padding: 8px;
        border-radius: 8px;
        border: 1px solid var(--border-light);
        background: var(--bg-primary);
        color: var(--text-primary);
        font-weight: 600;
    }
    
    .quantity-btn {
        padding: 8px 12px;
        line-height: 1;
        font-size: 16px;
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    
    .quantity-btn:hover {
        background: var(--primary-brand);
        color: var(--text-light);
        transform: scale(1.1);
    }
    
    /* Cart Summary Section */
    .cart-summary-section {
        margin-top: 3rem;
    }
    
    /* Enhanced Cart Actions Section */
    .cart-actions-section {
        background: var(--bg-primary);
        border-radius: 20px;
        padding: 2rem;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--border-light);
        height: 100%;
    }
    
    .actions-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .actions-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }
    
    .actions-subtitle {
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin: 0;
    }
    
    .actions-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }
    
    .action-card {
        background: var(--bg-secondary);
        border-radius: 16px;
        padding: 1.5rem;
        border: 1px solid var(--border-light);
        box-shadow: var(--shadow-sm);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .action-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-warm);
        transform: scaleX(0);
        transition: transform 0.3s ease;
    }
    
    .action-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-lg);
    }
    
    .action-card:hover::before {
        transform: scaleX(1);
    }
    
    .clear-cart-card::before {
        background: linear-gradient(135deg, #dc3545, #c82333);
    }
    
    .continue-shopping-card::before {
        background: var(--gradient-warm);
    }
    
    .action-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin: 0 auto 1rem;
        transition: all 0.3s ease;
    }
    
    .clear-cart-card .action-icon {
        background: linear-gradient(135deg, rgba(220, 53, 69, 0.1), rgba(200, 35, 51, 0.1));
        color: #dc3545;
        border: 2px solid rgba(220, 53, 69, 0.2);
    }
    
    .continue-shopping-card .action-icon {
        background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(247, 147, 30, 0.1));
        color: var(--primary-brand);
        border: 2px solid rgba(255, 107, 53, 0.2);
    }
    
    .action-card:hover .action-icon {
        transform: scale(1.1);
    }
    
    .action-content {
        text-align: center;
    }
    
    .action-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }
    
    .action-description {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-bottom: 1rem;
        line-height: 1.4;
    }
    
    .action-btn {
        font-size: 0.95rem;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        border-radius: 10px;
        transition: all 0.3s ease;
        box-shadow: var(--shadow-sm);
        min-width: 140px;
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
    }
    
    .order-summary-card {
        background: var(--bg-primary);
        border-radius: 20px;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--border-light);
        overflow: hidden;
    }
    
    .summary-header {
        background: var(--bg-secondary);
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-light);
    }
    
    .summary-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin: 0;
        color: var(--text-primary);
    }
    
    .summary-body {
        padding: 1.5rem;
    }
    
    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }
    
    .summary-label {
        font-size: 1rem;
        color: var(--text-secondary);
    }
    
    .summary-value {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
    }
    
    .summary-divider {
        border-color: var(--border-light);
        margin: 1.5rem 0;
    }
    
    .total-row {
        margin-bottom: 0;
    }
    
    .total-row .summary-label {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--text-primary);
    }
    
    .summary-total {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary-brand);
    }
    
    .summary-footer {
        padding: 1.5rem;
        background: var(--bg-secondary);
        border-top: 1px solid var(--border-light);
    }
    
    .checkout-btn {
        font-size: 1.1rem;
        font-weight: 600;
        padding: 1rem;
        border-radius: 12px;
        transition: all 0.3s ease;
        box-shadow: var(--shadow-sm);
    }
    
    .checkout-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }
    
    /* Enhanced Empty Cart Section */
    .empty-cart-section {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 60vh;
        padding: 2rem;
    }
    
    .empty-cart-card {
        text-align: center;
        background: var(--bg-primary);
        border-radius: 20px;
        padding: 3rem;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--border-light);
        max-width: 500px;
    }
    
    .empty-cart-icon {
        width: 120px;
        height: 120px;
        background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 2rem;
        font-size: 3rem;
        color: var(--text-primary);
        box-shadow: var(--shadow-md);
    }
    
    .empty-cart-title {
        font-size: 2rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 1rem;
    }
    
    .empty-cart-message {
        font-size: 1.1rem;
        color: var(--text-secondary);
        margin-bottom: 2rem;
        line-height: 1.6;
    }
    
    .empty-cart-actions .btn {
        font-size: 1.1rem;
        padding: 1rem 2rem;
        border-radius: 12px;
    }
    
    /* Loading Indicator */
    #loadingIndicator {
        background: rgba(255,255,255,0.9);
        border-radius: 10px;
        padding: 2rem;
        box-shadow: var(--shadow-md);
    }
    
    /* Responsive Design */
    @@media (max-width: 768px) {
        .cart-header {
            padding: 1.5rem;
        }
        
        .page-title {
            font-size: 2rem;
        }
        
        .cart-item-image {
            width: 60px;
            height: 60px;
        }
        
        .quantity-control {
            flex-direction: column;
            gap: 4px;
            padding: 6px;
        }
        
        .table td {
            padding: 1rem 0.5rem;
        }
        
        .summary-body {
            padding: 1rem;
        }
        
        .empty-cart-card {
            padding: 2rem;
        }
        
        .empty-cart-icon {
            width: 80px;
            height: 80px;
            font-size: 2rem;
        }
        
        /* Action Cards Responsive */
        .cart-actions-section {
            padding: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .actions-grid {
            gap: 1rem;
        }
        
        .action-card {
            padding: 1.25rem;
        }
        
        .action-icon {
            width: 50px;
            height: 50px;
            font-size: 1.25rem;
        }
        
        .action-title {
            font-size: 1rem;
        }
        
        .action-description {
            font-size: 0.85rem;
        }
        
        .action-btn {
            font-size: 0.9rem;
            padding: 0.6rem 1.25rem;
            min-width: 120px;
        }
    }
    
    @@media (min-width: 992px) {
        .actions-grid {
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
    }
    
    /* Dark Theme Support */
    html.dark-theme .search-group .input-group-text,
    html.dark-theme .search-group .form-control,
    html.dark-theme .filter-input {
        background: var(--bg-secondary);
        color: var(--text-primary);
        border-color: var(--border-medium);
    }
    
    html.dark-theme .quantity-control .form-control {
        background: var(--bg-primary);
        color: var(--text-primary);
        border-color: var(--border-medium);
    }
</style>