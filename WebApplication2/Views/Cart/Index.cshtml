@model List<WebApplication2.Models.CartItemVM>
@using Microsoft.AspNetCore.Http;
@inject IHtmlHelper Html

@{
    ViewBag.Title = "Your Cart";
}

<div class="container py-4">
    <div id="cartContent" style="@(Model.Any() ? "" : "display:none;")">
        <!-- Filter form -->
        <form id="filterForm" class="form-inline mb-3" style="display:flex;gap:10px;flex-wrap:wrap;">
            <input type="text" name="search" id="searchInput" placeholder="Search name..." class="form-control" />
            <input type="number" name="minPrice" id="minPriceInput" placeholder="Min Price" class="form-control" style="width:120px;" min="0" step="0.01" />
            <input type="number" name="maxPrice" id="maxPriceInput" placeholder="Max Price" class="form-control" style="width:120px;" min="0" step="0.01" />
            <button type="submit" class="btn btn-primary" style="margin-left: 20px;">Filter</button>
            <button type="button" id="clearFilters" class="btn btn-secondary">Clear</button>
        </form>

        <div class="card">
            <div class="card-header">
                <h4 class="mb-0">Shopping Cart</h4>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 100px">Photo</th>
                                <th>Item</th>
                                <th class="text-end">Price</th>
                                <th style="width: 150px" class="text-center">Quantity</th>
                                <th class="text-end">Subtotal</th>
                                <th style="width: 50px"></th>
                            </tr>
                        </thead>
                        <tbody id="cartTableBody">
                            @foreach (var item in Model)
                            {
                                <tr data-menu-item-id="@item.MenuItemId">
                                    <td>
                                        <img src="/Images/@(item.PhotoURL ?? "default.jpg")"
                                             class="cart-item-image"
                                             alt="@item.Name" />
                                    </td>
                                    <td>
                                        <h6 class="mb-0">@item.Name</h6>
                                        @if (!string.IsNullOrEmpty(item.SelectedPersonalizations))
                                        {
                                            var personalizations = item.SelectedPersonalizations.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                                            if (personalizations.Length > 1)
                                            {
                                                <div class="small text-muted">Personalizations:</div>
                                                <ul>
                                                    @foreach (var personalization in personalizations)
                                                    {
                                                        <li>@personalization.Trim()</li>
                                                    }
                                                </ul>
                                            }
                                            else
                                            {
                                                <div class="small text-muted">Personalization: @item.SelectedPersonalizations</div>
                                            }
                                        }
                                    </td>
                                    <td class="text-end item-price" data-price="@item.Price">
                                        RM @item.Price.ToString("0.00")
                                    </td>
                                    <td>
                                        <div class="quantity-control">
                                            <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn"
                                                    onclick="updateQuantity(this, -1)">
                                                −
                                            </button>
                                            <input type="number"
                                                   class="item-quantity form-control"
                                                   value="@item.Quantity"
                                                   min="1" max="100"
                                                   data-item-price="@item.Price"
                                                   data-menu-item-id="@item.MenuItemId" />
                                            <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn"
                                                    onclick="updateQuantity(this, 1)">
                                                +
                                            </button>
                                        </div>
                                    </td>
                                    <td class="text-end item-subtotal">
                                        RM @((item.Price * item.Quantity).ToString("0.00"))
                                    </td>
                                    <td>
                                        <button class="btn btn-link text-danger remove-item"
                                                data-menu-item-id="@item.MenuItemId">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="cart-summary mt-4">
                    <div class="row">
                        <div class="col-md-4 offset-md-8">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">Order Summary</h5>
                                    <div class="d-flex justify-content-between mb-3">
                                        <span>Total</span>
                                        <strong id="grandTotal">
                                            RM @Model.Sum(item => item.Price * item.Quantity).ToString("0.00")
                                        </strong>
                                    </div>
                                    <a asp-action="Payment" class="btn btn-success w-100 mb-2">Proceed to Payment</a>
                                    <button onclick="clearCart()" class="btn btn-outline-danger w-100">Clear Cart</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <a asp-action="Index" asp-controller="MenuItem" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-2"></i>Continue Shopping
            </a>
        </div>
    </div>

    <div id="emptyCart" class="text-center empty-cart" style="@(Model.Any() ? "display:none;" : "")">
        <i class="fas fa-shopping-cart fa-3x mb-3"></i>
        <p class="lead" id="emptyCartMessage">Your cart is empty</p>
        <a asp-action="Index" asp-controller="MenuItem" class="btn btn-primary">Start Shopping</a>
    </div>

    <!-- Loading indicator -->
    <div id="loadingIndicator" style="display: none; text-align: center; padding: 20px;">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const cartTableBody = document.getElementById('cartTableBody');
            const grandTotalElement = document.getElementById('grandTotal');
            const cartContentDiv = document.getElementById('cartContent');
            const emptyCartDiv = document.getElementById('emptyCart');
            const emptyCartMessage = document.getElementById('emptyCartMessage');

            const currencyFormatter = (value) => `RM ${Number(value).toFixed(2)}`;

            function getAntiForgeryToken() {
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                return tokenInput ? tokenInput.value : '';
            }

            // Filter functionality
            document.getElementById('filterForm').addEventListener('submit', function(e) {
                e.preventDefault();
                performFilter();
            });

            // Clear filters
            document.getElementById('clearFilters').addEventListener('click', function() {
                document.getElementById('searchInput').value = '';
                document.getElementById('minPriceInput').value = '';
                document.getElementById('maxPriceInput').value = '';
                performFilter();
            });

            // Real-time filtering
            document.getElementById('searchInput').addEventListener('input', debounce(performFilter, 500));

            function performFilter() {
                const search = document.getElementById('searchInput').value;
                const minPrice = document.getElementById('minPriceInput').value;
                const maxPrice = document.getElementById('maxPriceInput').value;

                // Show loading indicator
                document.getElementById('loadingIndicator').style.display = 'block';
                document.getElementById('cartTableBody').style.opacity = '0.5';

                // Build query parameters
                const params = new URLSearchParams();
                if (search) params.append('search', search);
                if (minPrice) params.append('minPrice', minPrice);
                if (maxPrice) params.append('maxPrice', maxPrice);

                // Make AJAX request
                fetch(`@Url.Action("GetFilteredCartItems", "Cart")?${params.toString()}`)
                    .then(response => response.json())
                    .then(data => {
                        updateTable(data);
                    })
                    .catch(error => {
                        console.error('Error filtering cart items:', error);
                        alert('Failed to filter cart items. Please try again.');
                    })
                    .finally(() => {
                        // Hide loading indicator
                        document.getElementById('loadingIndicator').style.display = 'none';
                        document.getElementById('cartTableBody').style.opacity = '1';
                    });
            }

            function updateTable(data) {
                const tbody = document.getElementById('cartTableBody');
                grandTotalElement.textContent = currencyFormatter(data.fullTotal);

                if (data.items.length === 0) {
                    if (data.fullTotal === 0) {
                        cartContentDiv.style.display = 'none';
                        emptyCartDiv.style.display = 'block';
                        emptyCartMessage.textContent = 'Your cart is empty';
                    } else {
                        tbody.innerHTML = '<tr><td colspan="6" class="text-center">No items match your filter</td></tr>';
                    }
                } else {
                    let html = '';
                    data.items.forEach(item => {
                        const photoURL = item.photoURL ? item.photoURL : 'default.jpg';
                        const personalizations = item.selectedPersonalizations ? item.selectedPersonalizations.split(',').map(p => p.trim()) : [];
                        let persHtml = '';
                        if (personalizations.length > 0) {
                            if (personalizations.length > 1) {
                                persHtml = '<div class="small text-muted">Personalizations:</div><ul>' + personalizations.map(p => `<li>${p}</li>`).join('') + '</ul>';
                            } else {
                                persHtml = `<div class="small text-muted">Personalization: ${personalizations[0]}</div>`;
                            }
                        }

                        html += `
                            <tr data-menu-item-id="${item.menuItemId}">
                                <td>
                                    <img src="/Images/${photoURL}" class="cart-item-image" alt="${item.name}" />
                                </td>
                                <td>
                                    <h6 class="mb-0">${item.name}</h6>
                                    ${persHtml}
                                </td>
                                <td class="text-end item-price" data-price="${item.price}">
                                    ${currencyFormatter(item.price)}
                                </td>
                                <td>
                                    <div class="quantity-control">
                                        <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn" onclick="updateQuantity(this, -1)">−</button>
                                        <input type="number" class="item-quantity form-control" value="${item.quantity}" min="1" max="100" data-item-price="${item.price}" data-menu-item-id="${item.menuItemId}" />
                                        <button type="button" class="btn btn-sm btn-outline-secondary quantity-btn" onclick="updateQuantity(this, 1)">+</button>
                                    </div>
                                </td>
                                <td class="text-end item-subtotal">
                                    ${currencyFormatter(item.price * item.quantity)}
                                </td>
                                <td>
                                    <button class="btn btn-link text-danger remove-item" data-menu-item-id="${item.menuItemId}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>`;
                    });
                    tbody.innerHTML = html;
                    cartContentDiv.style.display = 'block';
                    emptyCartDiv.style.display = 'none';
                }
            }

            // Debounce function
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            window.updateQuantity = function(button, change) {
                const container = button.closest('.quantity-control');
                const input = container.querySelector('.item-quantity');
                let newValue = parseInt(input.value) + change;

                // Ensure within bounds
                newValue = Math.max(1, Math.min(100, newValue));
                input.value = newValue;

                // Trigger input event to update cart
                const event = new Event('input', { bubbles: true });
                input.dispatchEvent(event);
            };

            // Delegated event for quantity input
            cartTableBody.addEventListener('input', function(event) {
                if (event.target.classList.contains('item-quantity')) {
                    const input = event.target;
                    const menuItemId = input.dataset.menuItemId;
                    let newQuantity = parseInt(input.value);

                    if (isNaN(newQuantity) || newQuantity < 1) {
                        newQuantity = 1;
                        input.value = 1;
                    }
                    if (newQuantity > 100) {
                        newQuantity = 100;
                        input.value = 100;
                    }

                    fetch('/Cart/UpdateQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ menuItemId: menuItemId, quantity: newQuantity })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(error => { throw new Error(error.message || `Server error: ${response.status}`); });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            performFilter();
                        } else {
                            alert('Failed to update quantity: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while updating quantity. Please try again.');
                    });
                }
            });

            // Delegated event for remove item
            cartTableBody.addEventListener('click', function(e) {
                const button = e.target.closest('.remove-item');
                if (button) {
                    e.preventDefault();
                    if (confirm('Are you sure you want to remove this item?')) {
                        const menuItemId = button.dataset.menuItemId;

                        fetch('/Cart/RemoveItem', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            },
                            body: JSON.stringify({ menuItemId: menuItemId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                performFilter();
                            } else {
                                alert('Failed to remove item: ' + data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while removing the item.');
                        });
                    }
                }
            });

            window.clearCart = function() {
                if (confirm('Are you sure you want to clear your cart?')) {
                    window.location.href = '@Url.Action("Clear")';
                }
            };
        });
    </script>
}

<style>
    .cart-item-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 8px;
        border: 1px solid var(--border-lighter);
        transition: transform 0.2s;
    }

        .cart-item-image:hover {
            transform: scale(1.1);
        }

    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

        .quantity-control .form-control {
            width: 60px;
            text-align: center;
            padding: 4px;
            border-radius: 4px;
            border: 1px solid var(--border-lighter);
        }

    .quantity-btn {
        padding: 4px 8px;
        line-height: 1;
        font-size: 14px;
    }

        .quantity-btn:hover {
            background-color: var(--bg-accent);
            color: var(--text-light);
        }

    .empty-cart {
        padding: 40px;
        color: var(--text-secondary);
    }

    .cart-summary .card {
        border: 1px solid var(--border-lighter);
        box-shadow: 0 2px 4px var(--shadow-color);
    }

    .table td {
        vertical-align: middle;
    }

    /* Dark theme support */
    html.dark-theme .cart-item-image {
        border-color: var(--border-color);
    }

    html.dark-theme .quantity-control .form-control {
        background-color: var(--input-bg);
        color: var(--text-primary);
        border-color: var(--border-color);
    }

    html.dark-theme .empty-cart {
        color: var(--text-primary);
    }

    @@media (max-width: 768px) {
        .cart-item-image

    {
        width: 60px;
        height: 60px;
    }

    .quantity-control {
        flex-direction: column;
        gap: 4px;
    }

    .table td {
        padding: 8px;
    }

    }
</style>