@using Microsoft.AspNetCore.Mvc;   
@using WebApplication2.Models;
@model WebApplication2.Models.TrackOrderVM

@{
    ViewBag.Title = "Track Your Order";
}

<div class="container py-4">
    <div class="card mb-4">
        <div class="card-body">
            <form id="trackOrderForm" method="post" onsubmit="return false;">
                <div class="field-row">
                    <label asp-for="OrderNumber">Order Number</label>
                    <input asp-for="OrderNumber" class="form-input" autofocus placeholder="Enter your order number (or select below)">
                    <span asp-validation-for="OrderNumber" class="field-validation-error"></span>
                </div>
                <div class="field-row">
                    <label asp-for="Address">Shipping Address</label>
                    <div class="address-input-container">
                        <input asp-for="Address" id="addressInput" class="form-input address-input" placeholder="Enter your address" autocomplete="address-line1">
                        @if (!string.IsNullOrEmpty(Model.Address))
                        {
                            <button type="button" id="useMyAddressBtn" class="use-address-btn" onclick="useMyAddress()" title="Use my profile address">
                                üìç Use My Address
                            </button>
                        }
                    </div>
                    <span asp-validation-for="Address" class="field-validation-error"></span>
                    @if (!string.IsNullOrEmpty(Model.Address))
                    {
                        <div class="mt-2">
                            <small class="text-muted profile-address-info">üí° Your profile address: <strong>@Model.Address</strong></small>
                        </div>
                    }
                    else
                    {
                        <div class="mt-2">
                            <small class="text-warning">‚ö†Ô∏è No address in your profile. Please add one in your profile settings.</small>
                        </div>
                    }
                </div>
                <div class="form-buttons">
                    <button type="button" class="btn-primary" onclick="trackOrderAjax()">Track Order</button>
                </div>
            </form>
            <div id="deliveryAnimation" style="display:none; text-align:center; margin-top:30px; padding: 20px; background: linear-gradient(135deg, #F7931E 30%, #FF6B35 100%); border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.2);">
                <!-- Delivery Animation -->
                <div id="deliveryAnimationBox" class="animation-box" style="display:none; width:250px;height:80px;margin:auto;position:relative;background: linear-gradient(to right, #e3f2fd 0%, #bbdefb 50%, #90caf9 100%);border-radius:10px;overflow:hidden;">
                    <!-- Road lines -->
                    <div style="position:absolute;bottom:15px;left:0;right:0;height:2px;background:#333;opacity:0.3;"></div>
                    <div style="position:absolute;bottom:12px;left:10px;width:20px;height:1px;background:#fff;opacity:0.5;animation:roadLine 1s infinite linear;"></div>
                    
                    <!-- Animated motor -->
                    <div id="motorContainer" style="position:absolute;left:20px;top:25px;">
                        <div id="motorBody" style="width:45px;height:25px;background:#2196F3;border-radius:12px 12px 6px 6px;position:relative;"></div>
                        <div id="motorWheel1" class="wheel" style="width:15px;height:15px;background:#333;border:2px solid #666;border-radius:50%;position:absolute;left:5px;top:22px;"></div>
                        <div id="motorWheel2" class="wheel" style="width:15px;height:15px;background:#333;border:2px solid #666;border-radius:50%;position:absolute;left:25px;top:22px;"></div>
                        <div id="motorSeat" style="width:15px;height:8px;background:#555;border-radius:4px;position:absolute;left:15px;top:-3px;"></div>
                        <div id="motorRider" style="width:12px;height:12px;background:#4CAF50;border-radius:50%;position:absolute;left:17px;top:-10px;"></div>
                        <div id="motorHandle" style="width:10px;height:3px;background:#333;position:absolute;left:35px;top:10px;border-radius:2px;"></div>
                        <!-- Exhaust smoke effect -->
                        <div class="smoke" style="position:absolute;left:-5px;top:15px;width:8px;height:8px;background:#ddd;border-radius:50%;opacity:0.6;animation:smoke 0.8s infinite;"></div>
                    </div>
                </div>
                
                <!-- Pickup Animation -->
                <div id="pickupAnimationBox" class="animation-box" style="display:none; width:250px;height:80px;margin:auto;position:relative;background: linear-gradient(to right, #e8f5e9 0%, #c8e6c9 50%, #a5d6a7 100%);border-radius:10px;overflow:hidden;">
                    <!-- Counter/Kitchen area -->
                    <div style="position:absolute;top:10px;left:20px;width:80px;height:30px;background:#795548;border-radius:5px;"></div>
                    <div style="position:absolute;top:40px;left:20px;width:80px;height:5px;background:#5D4037;border-radius:2px;"></div>
                    
                    <!-- Chef -->
                    <div id="chef" style="position:absolute;top:15px;left:40px;width:15px;height:20px;">
                        <div style="width:15px;height:15px;background:#FFCCBC;border-radius:50%;position:relative;">
                            <!-- Chef hat -->
                            <div style="position:absolute;top:-10px;left:0;width:15px;height:10px;background:white;border-radius:5px 5px 0 0;"></div>
                        </div>
                        <div style="width:15px;height:5px;background:#795548;position:relative;top:0;"></div>
                    </div>
                    
                    <!-- Food package -->
                    <div id="foodPackage" style="position:absolute;top:25px;left:70px;width:20px;height:15px;background:#FFECB3;border:1px solid #FFC107;border-radius:3px;transform-origin:center;animation:packagePulse 2s infinite ease-in-out;"></div>
                    
                    <!-- Customer -->
                    <div id="customer" style="position:absolute;top:25px;right:40px;width:15px;height:30px;">
                        <div style="width:15px;height:15px;background:#BBDEFB;border-radius:50%;"></div>
                        <div style="width:15px;height:15px;background:#2196F3;border-radius:3px 3px 0 0;position:relative;top:0;"></div>
                    </div>
                </div>
                
                <div id="animationStatus" style="margin-top:15px;font-weight:bold;color:white;font-size:16px;"></div>
            </div>
            <div id="orderResult"></div>
        </div>
    </div>

    @if (Model.Orders != null && Model.Orders.Any())
    {
        <h2 class="mb-4">Your Recent Orders</h2>
        <ul class="list-group mb-4">
            @foreach (var order in Model.Orders)
            {
                <li class="list-group-item">
                    <strong>Order #: </strong>@order.OrderNumber<br />
                    <strong>Date: </strong>@order.OrderDate<br />
                    <strong>Status: </strong>@order.Status<br />
                    <strong>Delivery Option:</strong> @order.DeliveryOption<br />
                    <button type="button" onclick="document.getElementById('orderNumberInput').value='@order.OrderNumber'; trackOrderAjax();" class="btn btn-sm btn-outline-primary mt-2">Track This Order</button>
                </li>
            }
        </ul>
    }
    else if (Model.IsPostBack)
    {
        <p>No orders found with the given information.</p>
    }
</div>

<style>
    @@keyframes wheelRotate {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @@keyframes roadLine {
        0% { transform: translateX(-250px); }
        100% { transform: translateX(250px); }
    }
    
    @@keyframes smoke {
        0% { 
            opacity: 0.6; 
            transform: translateX(0) scale(1); 
        }
        100% { 
            opacity: 0; 
            transform: translateX(-20px) scale(0.5); 
        }
    }
    
    @@keyframes packagePulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }
    
    @@keyframes chefCooking {
        0% { transform: translateX(0); }
        25% { transform: translateX(2px); }
        50% { transform: translateX(0); }
        75% { transform: translateX(-2px); }
        100% { transform: translateX(0); }
    }
    
    @@keyframes customerWaiting {
        0% { transform: translateY(0); }
        50% { transform: translateY(2px); }
        100% { transform: translateY(0); }
    }
    
    .wheel {
        animation: wheelRotate 0.2s infinite linear;
    }
    
    .smoke {
        animation: smoke 0.8s infinite;
    }
    
    #chef {
        animation: chefCooking 1s infinite ease-in-out;
    }
    
    #customer {
        animation: customerWaiting 2s infinite ease-in-out;
    }
    
    .field-row {
        margin-bottom: 1rem;
    }
    
    .form-input {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    
    .form-input:focus {
        border-color: #4CAF50;
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
        outline: none;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
    }
    
    /* Address input container styling */
    .address-input-container {
        display: flex;
        gap: 10px;
        align-items: stretch;
    }
    
    .address-input {
        flex: 1;
        margin-right: 0;
    }
    
    .use-address-btn {
        background: linear-gradient(135deg, #2196F3, #1976D2);
        color: white;
        border: none;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        white-space: nowrap;
        min-width: 140px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .use-address-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3);
        background: linear-gradient(135deg, #1976D2, #1565C0);
    }
    
    .profile-address-info {
        display: block;
        padding: 8px;
        border-radius: 4px;
        border-left: 4px solid #4CAF50;
    }
    
    @@media (max-width: 768px) {
        .address-input-container {
            flex-direction: column;
            gap: 8px;
        }
        
        .use-address-btn {
            min-width: auto;
            width: 100%;
        }
    }
</style>

<script>
    // Store profile address as a global variable to avoid issues with HTML encoding
    var profileAddress = '@Html.Raw(Model.Address?.Replace("\r\n", "\\n")?.Replace("\"", "\\\"")?? "")';
    
    document.addEventListener('DOMContentLoaded', function() {
        var orderInput = document.querySelector('input[name="OrderNumber"]');
        if (orderInput) orderInput.id = 'orderNumberInput';
        
        var addressInput = document.getElementById('addressInput');
        
        // Auto-fill address on page load if user has a profile address
        if (profileAddress.trim() && profileAddress !== '') {
            addressInput.value = profileAddress;
            addressInput.placeholder = 'Address auto-filled from your profile';
        } else {
            addressInput.placeholder = 'Enter your delivery address';
        }
        
        // Update button visibility based on whether user has profile address
        var useMyAddressBtn = document.getElementById('useMyAddressBtn');
        if (profileAddress.trim() === '' || profileAddress === '') {
            useMyAddressBtn.style.display = 'none';
        }
    });
    
    // Function to use the user's profile address
    function useMyAddress() {
        var addressInput = document.getElementById('addressInput');
        
        if (profileAddress.trim() && profileAddress !== '') {
            addressInput.value = profileAddress;
            addressInput.focus();
            
            // Add a subtle animation to indicate the field was updated
            addressInput.style.backgroundColor = '#d4edda';
            addressInput.style.border = '2px solid #28a745';
            setTimeout(function() {
                addressInput.style.backgroundColor = '';
                addressInput.style.border = '';
            }, 2000);
            
            // Show success message briefly
            var successMsg = document.createElement('div');
            successMsg.className = 'alert alert-success mt-2';
            successMsg.style.fontSize = '12px';
            successMsg.style.padding = '5px 10px';
            successMsg.innerHTML = '‚úÖ Address filled from your profile!';
            addressInput.parentElement.appendChild(successMsg);
            
            setTimeout(function() {
                if (successMsg.parentElement) {
                    successMsg.parentElement.removeChild(successMsg);
                }
            }, 3000);
        } else {
            alert('‚ùå No address found in your profile. Please update your profile with your delivery address.');
        }
    }

    function trackOrderAjax() {
        var orderNumber = document.getElementById('orderNumberInput').value;
        var address = document.querySelector('input[name="Address"]').value;
        var formData = new FormData();
        formData.append('OrderNumber', orderNumber);
        formData.append('Address', address);
        
        // Get animation elements
        var animationBox = document.getElementById('deliveryAnimation');
        var deliveryAnimBox = document.getElementById('deliveryAnimationBox');
        var pickupAnimBox = document.getElementById('pickupAnimationBox');
        var motorBody = document.getElementById('motorBody');
        var motorWheel1 = document.getElementById('motorWheel1');
        var motorWheel2 = document.getElementById('motorWheel2');
        var status = document.getElementById('animationStatus');
        var orderResult = document.getElementById('orderResult');
        
        // Clear previous results
        orderResult.innerHTML = '';
        
        // First, make a preliminary request to get the delivery option
        fetch('/Cart/GetDeliveryOption', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            // Show animation box
            animationBox.style.display = 'block';
            
            // Determine which animation to show based on delivery option
            var isDelivery = data.deliveryOption === 'Delivery';
            
            if (isDelivery) {
                // Show delivery animation
                deliveryAnimBox.style.display = 'block';
                pickupAnimBox.style.display = 'none';
                status.textContent = 'Order is being delivered...';
                
                // Setup delivery animation
                motorBody.style.left = '30px';
                motorWheel1.style.left = '32px';
                motorWheel2.style.left = '70px';
                
                // Animate delivery
                var distance = 60;
                var duration = 2000;
                var start = null;
                
                function animateMotor(ts) {
                    if (!start) start = ts;
                    var progress = ts - start;
                    var percent = Math.min(progress / duration, 1);
                    var move = 30 + percent * distance;
                    motorBody.style.left = move + 'px';
                    motorWheel1.style.left = (move + 2) + 'px';
                    motorWheel2.style.left = (move + 40) + 'px';
                    
                    if (percent < 1) {
                        window.requestAnimationFrame(animateMotor);
                    } else {
                        completeAnimation();
                    }
                }
                
                window.requestAnimationFrame(animateMotor);
            } else {
                // Show pickup animation
                deliveryAnimBox.style.display = 'none';
                pickupAnimBox.style.display = 'block';
                status.textContent = 'Preparing your order for pickup...';
                
                // For pickup, we'll just show the animation for a fixed duration
                setTimeout(completeAnimation, 2000);
            }
            
            function completeAnimation() {
                status.textContent = 'Checking order status...';
                fetch('/Cart/Track', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    animationBox.style.display = 'none';
                    orderResult.innerHTML = html;
                })
                .catch(() => {
                    animationBox.style.display = 'none';
                    orderResult.innerHTML = '<div class="text-danger">Failed to track order. Please try again.</div>';
                });
            }
        })
        .catch(() => {
            // If we can't determine the delivery option, default to delivery animation
            animationBox.style.display = 'block';
            deliveryAnimBox.style.display = 'block';
            pickupAnimBox.style.display = 'none';
            status.textContent = 'Checking your order...';
            
            // Setup delivery animation
            motorBody.style.left = '30px';
            motorWheel1.style.left = '32px';
            motorWheel2.style.left = '70px';
            
            // Animate for a short time then proceed
            setTimeout(function() {
                status.textContent = 'Checking order status...';
                fetch('/Cart/Track', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    animationBox.style.display = 'none';
                    orderResult.innerHTML = html;
                })
                .catch(() => {
                    animationBox.style.display = 'none';
                    orderResult.innerHTML = '<div class="text-danger">Failed to track order. Please try again.</div>';
                });
            }, 2000);
        });
    }
</script>
