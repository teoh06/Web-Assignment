@using Microsoft.AspNetCore.Mvc;
@using WebApplication2.Models;
@model WebApplication2.Models.TrackOrderVM

@{
    ViewBag.Title = "Track Your Order";
}

<div class="container py-4">
    <div class="card mb-4">
        <div class="card-body">
            <form id="trackOrderForm" method="post" onsubmit="return false;">
                <div class="field-row">
                    <label asp-for="OrderNumber">Order Number</label>
                    <input asp-for="OrderNumber" id="orderNumberInput" class="form-input" placeholder="Enter your order number (or select below)" autofocus>

                    <span asp-validation-for="OrderNumber" class="field-validation-error"></span>
                </div>
                <div class="field-row">
                    <label asp-for="Address">Shipping Address</label>
                    <div class="address-input-container">
                        <input asp-for="Address" id="addressInput" class="form-input address-input" placeholder="Enter your address" autocomplete="address-line1">
                        @if (!string.IsNullOrEmpty(Model.Address))
                        {
                            <button type="button" id="useMyAddressBtn" class="use-address-btn" onclick="useMyAddress()" title="Use my profile address">
                                üìç Use My Address
                            </button>
                        }
                    </div>
                    <span asp-validation-for="Address" class="field-validation-error"></span>
                    @if (!string.IsNullOrEmpty(Model.Address))
                    {
                        <div class="mt-2">
                            <small class="text-muted profile-address-info">üí° Your profile address: <strong>@Model.Address</strong></small>
                        </div>
                    }
                    else
                    {
                        <div class="mt-2">
                            <small class="text-warning">‚ö†Ô∏è No address in your profile. Please add one in your profile settings.</small>
                        </div>
                    }
                </div>
                <div class="form-buttons">
                    <button type="button" class="btn-primary" onclick="trackOrderAjax()">Track Order</button>
                </div>
            </form>
            <div id="orderTrackingResult" style="display:none; margin-top: 30px;">
                <div class="progress" style="height: 25px; border-radius: 12px; overflow: hidden; background-color: #e9ecef;">
                    <div id="orderProgressBar" class="progress-bar" role="progressbar" style="width: 0%; background: linear-gradient(90deg, #4CAF50, #8BC34A);" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                        <span id="orderProgressText" style="color: white; font-weight: bold;">0%</span>
                    </div>
                </div>
                <div id="orderStatusSteps" class="d-flex justify-content-between mt-2" style="font-weight: 600; color: #555;">
                    <span class="status-step">Pending</span>
                    <span class="status-step">Paid</span>
                    <span class="status-step">Preparing</span>
                    <span class="status-step" id="finalStatusStep">Ready for Pickup</span>
                    <span class="status-step refunded-step" id="refundedStatusStep" style="display: none; background: linear-gradient(45deg, #ff4444, #ffffff, #ff4444); color: #000; border-radius: 4px; padding: 2px 8px; font-weight: bold; border: 2px solid #ff4444;">Refunded</span>
                </div>
                <div id="purchasedItems" class="mt-4">
                    <h5>Purchased Items</h5>
                    <ul class="list-group" style="max-height: 200px; overflow-y: auto;">
                        <!-- Items will be dynamically inserted here -->
                    </ul>
                </div>
                <div id="orderResultMessage" class="mt-3"></div>
            </div>
            <div id="orderResult"></div>
        </div>
    </div>

    @if (Model.Orders != null && Model.Orders.Any())
    {
        <h2 class="mb-4">Your Recent Orders</h2>
        <ul class="list-group mb-4">
            @foreach (var order in Model.Orders)
            {
                <li class="list-group-item">
                    <strong>Order #: </strong>@order.OrderNumber<br />
                    <strong>Date: </strong>@order.OrderDate<br />
                    <strong>Status: </strong>@order.Status<br />

                    <button type="button" onclick="document.getElementById('orderNumberInput').value='@order.OrderNumber'; trackOrderAjax();" class="btn btn-sm btn-outline-primary mt-2">Track This Order</button>
                </li>
            }
        </ul>
    }
    else if (Model.IsPostBack)
    {
        <p>No orders found with the given information.</p>
    }
</div>

<style>
    @@keyframes wheelRotate {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@keyframes roadLine {
        0% { transform: translateX(-250px); }
        100% { transform: translateX(250px); }
    }

    @@keyframes smoke {
        0% {
            opacity: 0.6;
            transform: translateX(0) scale(1);
        }
        100% {
            opacity: 0;
            transform: translateX(-20px) scale(0.5);
        }
    }

    @@keyframes packagePulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }

    @@keyframes chefCooking {
        0% { transform: translateX(0); }
        25% { transform: translateX(2px); }
        50% { transform: translateX(0); }
        75% { transform: translateX(-2px); }
        100% { transform: translateX(0); }
    }

    @@keyframes customerWaiting {
        0% { transform: translateY(0); }
        50% { transform: translateY(2px); }
        100% { transform: translateY(0); }
    }

    .wheel {
        animation: wheelRotate 0.2s infinite linear;
    }

    .smoke {
        animation: smoke 0.8s infinite;
    }

    #chef {
        animation: chefCooking 1s infinite ease-in-out;
    }

    #customer {
        animation: customerWaiting 2s infinite ease-in-out;
    }

    .field-row {
        margin-bottom: 1rem;
    }

    .form-input {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .form-input:focus {
        border-color: #4CAF50;
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
        outline: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
    }

    /* Address input container styling */
    .address-input-container {
        display: flex;
        gap: 10px;
        align-items: stretch;
    }

    .address-input {
        flex: 1;
        margin-right: 0;
    }

    .use-address-btn {
        background: linear-gradient(135deg, #2196F3, #1976D2);
        color: white;
        border: none;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        white-space: nowrap;
        min-width: 140px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .use-address-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3);
        background: linear-gradient(135deg, #1976D2, #1565C0);
    }

    .profile-address-info {
        display: block;
        padding: 8px;
        border-radius: 4px;
        border-left: 4px solid #4CAF50;
    }

    @@media (max-width: 768px) {
        .address-input-container {
            flex-direction: column;
            gap: 8px;
        }

        .use-address-btn {
            min-width: auto;
            width: 100%;
        }
    }

    .status-step.active {
        color: #4CAF50;
        font-weight: bold;
    }
    
    .refunded-step.active { 
        color:#000 !important; 
        background: linear-gradient(45deg, #ff4444, #ffffff, #ff4444) !important;
        animation: refundPulse 2s infinite;
    }
    
    @@keyframes refundPulse {
        0% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(255, 68, 68, 0); }
        100% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0); }
    }
    
    .btn-warning:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(255, 193, 7, 0.4) !important;
    }
</style>

<script>
    // Store profile address
    var profileAddress = '@Html.Raw(Model.Address?.Replace("\r\n", "\\n")?.Replace("\"", "\\\"") ?? "")';

    document.addEventListener('DOMContentLoaded', function() {
        var addressInput = document.getElementById('addressInput');

        if (profileAddress.trim() && profileAddress !== '') {
            addressInput.value = profileAddress;
            addressInput.placeholder = 'Address auto-filled from your profile';
        } else {
            addressInput.placeholder = 'Enter your delivery address';
        }

        var useMyAddressBtn = document.getElementById('useMyAddressBtn');
        if (useMyAddressBtn && (profileAddress.trim() === '' || profileAddress === '')) {
            useMyAddressBtn.style.display = 'none';
        }
    });

    // Fill profile address
    function useMyAddress() {
        var addressInput = document.getElementById('addressInput');
        if (profileAddress.trim() && profileAddress !== '') {
            addressInput.value = profileAddress;
        } else {
            alert('No address found in your profile.');
        }
    }

    // Track order directly from DB
    function trackOrderAjax() {
        var orderNumber = document.getElementById('orderNumberInput').value;

        if (!orderNumber) {
            alert("Please enter an order number.");
            return;
        }

        var trackingResult = document.getElementById('orderTrackingResult');
        var orderResult = document.getElementById('orderResult');

        trackingResult.style.display = 'block';
        orderResult.innerHTML = '';
        document.getElementById('orderResultMessage').textContent = 'Checking order status...';

        // Call backend directly
        fetch(`/Cart/GetOrderStatus?orderId=${orderNumber}`)
            .then(r => r.json())
            .then(orderData => {
                if (!orderData.success) {
                    trackingResult.style.display = 'none';
                    orderResult.innerHTML = `<div class="alert">${orderData.message}</div>`;
                    return;
                }

                // Determine adjusted status for progress bar and display
                var adjustedStatus = orderData.status;
                var paymentMade = orderData.paymentMade || false;
                var manualRefund = orderData.manualRefund || false;
                
                // If payment is not success/pending, stay pending for order tracking
                if (orderData.status === 'Pending' && !paymentMade) {
                    adjustedStatus = 'Pending';
                }
                // After payment made, then the order is paid
                else if (paymentMade && orderData.status === 'Pending') {
                    adjustedStatus = 'Paid';
                }
                // Start to prepare after payment
                else if (orderData.status === 'Preparing' && paymentMade) {
                    adjustedStatus = 'Preparing';
                }
                // Based on delivery option chosen by member
                else if (orderData.status === 'Ready for Pickup' && orderData.deliveryOption === 'Pickup' && paymentMade) {
                    adjustedStatus = 'Ready for Pickup';
                } else if (orderData.status === 'Delivered' && orderData.deliveryOption === 'Delivery' && paymentMade) {
                    adjustedStatus = 'Delivered';
                }
                // For Refunded, only display when member manually refund the order
                else if (orderData.status === 'Refunded' && manualRefund) {
                    adjustedStatus = 'Refunded';
                }

                // Update final step text based on delivery option
                var finalStatusStep = document.getElementById('finalStatusStep');
                if (orderData.deliveryOption === 'Pickup') {
                    finalStatusStep.textContent = 'Ready for Pickup';
                } else {
                    finalStatusStep.textContent = 'Delivered';
                }

                // Show/hide refunded step and update progress bar styling
                var refundedStatusStep = document.getElementById('refundedStatusStep');
                var progressBar = document.getElementById('orderProgressBar');
                if (manualRefund && adjustedStatus === 'Refunded') {
                    refundedStatusStep.style.display = 'block';
                    progressBar.style.background = 'linear-gradient(90deg, #ff4444, #ffffff, #ff4444)';
                } else {
                    refundedStatusStep.style.display = 'none';
                    progressBar.style.background = 'linear-gradient(90deg, #4CAF50, #8BC34A)';
                }

                // Update progress bar based on adjusted status
                var progressPercent = getProgressPercent(adjustedStatus, orderData.deliveryOption);
                progressBar.style.width = progressPercent + '%';
                progressBar.setAttribute('aria-valuenow', progressPercent);
                document.getElementById('orderProgressText').textContent = progressPercent + '%';

                // Highlight current status step
                highlightStatusStep(adjustedStatus, manualRefund);

                // Populate purchased items
                var itemsList = document.getElementById('purchasedItems').querySelector('ul');
                itemsList.innerHTML = '';
                if (orderData.items && orderData.items.length > 0) {
                    orderData.items.forEach(item => {
                        var li = document.createElement('li');
                        li.className = 'list-group-item d-flex align-items-center';
                        // Fix image URL to ensure it points to wwwroot/images correctly
                        var imageUrl = '/images/' + (item.imageUrl || 'default-item.png');
                        li.innerHTML = `
                            <img src="${imageUrl}" alt="${item.name}" style="width: 50px; height: 50px; margin-right: 10px; border-radius: 5px;">
                            <div>
                                <strong>${item.name}</strong><br>
                                Quantity: ${item.quantity}<br>
                                Price: RM${item.price}
                                ${item.personalization ? '<br>Personalization: ' + item.personalization : ''}
                            </div>
                        `;
                        itemsList.appendChild(li);
                    });
                } else {
                    itemsList.innerHTML = '<li class="list-group-item">No items found.</li>';
                }

                // Update result message with separated Pickup/Delivery info
                var deliveryInfo = '';
                var additionalInfo = '';
                if (orderData.deliveryOption === 'Pickup') {
                    deliveryInfo = '<p><strong>Pickup Location:</strong> Please pick up your order at the store counter.</p>';
                    additionalInfo = '<p><strong>Estimated Pickup Time:</strong> Within 15 minutes after order is ready.</p>';
                } else {
                    deliveryInfo = `<p><strong>Delivery Address:</strong> ${orderData.deliveryAddress || 'N/A'}</p>`;
                    additionalInfo = '<p><strong>Estimated Delivery Time:</strong> 30-45 minutes depending on location.</p>';
                }

                // Add payment button if status is pending and payment not made
                var paymentButtonHtml = '';
                if (adjustedStatus === 'Pending' && !paymentMade) {
                    paymentButtonHtml = '<button class="btn btn-warning btn-lg mt-3" onclick="proceedToPayment(' + orderData.orderId + ')" style="width: 100%; padding: 12px; font-weight: bold; border-radius: 8px; box-shadow: 0 4px 8px rgba(255, 193, 7, 0.3);">üí≥ Proceed to Payment</button>';
                }

                document.getElementById('orderResultMessage').innerHTML = `
                    <div class="alert">
                        <h5>Order #${orderData.orderId}</h5>
                        <p><strong>Status:</strong> ${orderData.status}</p>
                        <p><strong>Date:</strong> ${orderData.orderDate}</p>
                        ${deliveryInfo}
                        ${additionalInfo}
                        ${paymentButtonHtml}
                    </div>
                `;

                // Ensure the tracking result div remains visible
                trackingResult.style.display = 'block';
            })
            .catch(() => {
                trackingResult.style.display = 'none';
                orderResult.innerHTML = '<div class="alert">Failed to track order.</div>';
            });
    }

    // Function to handle payment button click
    function proceedToPayment(orderNumber) {
        // Redirect to payment page with order context
        window.location.href = '/Cart/Payment?orderId=' + orderNumber;
    }

    function getProgressPercent(status, deliveryOption) {
        switch (status) {
            case 'Pending': return 25;
            case 'Paid': return 50;
            case 'Preparing': return 75;
            case 'Ready for Pickup': return deliveryOption === 'Pickup' ? 100 : 75;
            case 'Delivered': return 100;
            case 'Refunded': return 100;
            case 'Declined': return 0;
            default: return 0;
        }
    }

    function highlightStatusStep(currentStatus, manualRefund) {
        var steps = document.querySelectorAll('#orderStatusSteps .status-step:not(#refundedStatusStep)');
        steps.forEach(step => {
            step.classList.remove('active');
            if (step.textContent === currentStatus) {
                step.classList.add('active');
            }
        });
        
        // Handle refunded step separately
        var refundedStep = document.getElementById('refundedStatusStep');
        if (manualRefund && currentStatus === 'Refunded') {
            refundedStep.classList.add('active');
        } else {
            refundedStep.classList.remove('active');
        }
    }
</script>
