@using Microsoft.AspNetCore.Mvc;
@using WebApplication2.Models;
@model WebApplication2.Models.TrackOrderVM

@{
    ViewBag.Title = "Track Your Order";
}

<!-- Modern Track Order Container -->
<div class="track-page-container">
    <div class="track-hero-section">
        <div class="track-hero-content">
            <div class="track-icon-container">
                <div class="track-icon">üì¶</div>
            </div>
            <h1 class="track-title">Track Your Order</h1>
            <p class="track-subtitle">Enter your order details to see real-time tracking information</p>
        </div>
    </div>

    <div class="track-form-container">
        <div class="track-form-card">
            <form id="trackOrderForm" method="post" onsubmit="return false;">
                <div class="input-group-modern">
                    <div class="input-wrapper">
                        <label asp-for="OrderNumber" class="input-label">
                            <span class="label-icon">üî¢</span>
                            Order Number
                        </label>
                        <input asp-for="OrderNumber" id="orderNumberInput" class="input-modern" 
                               placeholder="Enter your order number" autofocus>
                        <div class="input-focus-line"></div>
                        <span asp-validation-for="OrderNumber" class="validation-error"></span>
                    </div>
                </div>

                <div class="input-group-modern">
                    <div class="input-wrapper">
                        <label asp-for="Address" class="input-label">
                            <span class="label-icon">üìç</span>
                            Delivery Address
                        </label>
                        <div class="address-input-modern">
                            <input asp-for="Address" id="addressInput" class="input-modern address-input" 
                                   placeholder="Enter your delivery address" autocomplete="address-line1">
                            @if (!string.IsNullOrEmpty(Model.Address))
                            {
                                <button type="button" id="useMyAddressBtn" class="address-quick-btn" 
                                        onclick="useMyAddress()" title="Use my profile address">
                                    <span class="btn-icon">üìç</span>
                                    <span class="btn-text">Use My Address</span>
                                </button>
                            }
                        </div>
                        <div class="input-focus-line"></div>
                        <span asp-validation-for="Address" class="validation-error"></span>
                        
                        @if (!string.IsNullOrEmpty(Model.Address))
                        {
                            <div class="address-info-card">
                                <div class="info-icon">üí°</div>
                                <div class="info-content">
                                    <span class="info-label">Your profile address:</span>
                                    <span class="info-value">@Model.Address</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="address-warning-card">
                                <div class="warning-icon">‚ö†Ô∏è</div>
                                <div class="warning-content">
                                    No address in your profile. Please add one in your profile settings.
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="form-actions">
                    <button type="button" class="track-submit-btn" onclick="trackOrderAjax()">
                        <span class="btn-icon">üîç</span>
                        <span class="btn-text">Track Order</span>
                        <div class="btn-ripple"></div>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modern Tracking Result Container -->
    <div id="orderTrackingResult" class="tracking-result-container" style="display:none;">
        <div class="tracking-card">
            <div class="tracking-header">
                <h3 class="tracking-title">Order Status</h3>
                <div class="tracking-live-indicator">
                    <div class="live-dot"></div>
                    <span>Live Tracking</span>
                </div>
            </div>

            <!-- Modern Progress Bar -->
            <div class="progress-container">
                <div class="progress-track">
                    <div id="orderProgressBar" class="progress-fill" role="progressbar" 
                         style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-glow"></div>
                    </div>
                </div>
                <div id="orderProgressText" class="progress-percentage">0%</div>
            </div>

            <!-- Status Steps -->
            <div id="orderStatusSteps" class="status-steps-container">
                <div class="status-step" data-step="pending">
                    <div class="step-icon">‚è≥</div>
                    <span class="step-label">Pending</span>
                </div>
                <div class="status-step" data-step="paid">
                    <div class="step-icon">üí≥</div>
                    <span class="step-label">Paid</span>
                </div>
                <div class="status-step" data-step="preparing">
                    <div class="step-icon">üë®‚Äçüç≥</div>
                    <span class="step-label">Preparing</span>
                </div>
                <div class="status-step" id="finalStatusStep" data-step="ready">
                    <div class="step-icon ready-pickup-icon">‚úÖ</div>
                    <span class="step-label ready-pickup-label">Ready for Pickup</span>
                </div>
                <div class="status-step refunded-step" id="refundedStatusStep" data-step="refunded" style="display: none;">
                    <div class="step-icon">üí∏</div>
                    <span class="step-label">Refunded</span>
                </div>
            </div>

            <!-- Purchased Items Section -->
            <div id="purchasedItems" class="purchased-items-section">
                <h4 class="section-title">
                    <span class="title-icon">üõçÔ∏è</span>
                    Purchased Items
                </h4>
                <div class="items-container">
                    <ul class="items-list">
                        <!-- Items will be dynamically inserted here -->
                    </ul>
                </div>
            </div>

            <div id="orderResultMessage" class="order-details-section"></div>
        </div>
    </div>

    <div id="orderResult"></div>

    <!-- Recent Orders Section -->
    @if (Model.Orders != null && Model.Orders.Any())
    {
        <div class="recent-orders-section">
            <div class="section-header">
                <h2 class="section-title">
                    <span class="title-icon">üìã</span>
                    Your Recent Orders
                </h2>
            </div>
            <div class="orders-grid">
                @foreach (var order in Model.Orders)
                {
                    <div class="order-card">
                        <div class="order-header">
                            <div class="order-number">Order #@order.OrderNumber</div>
                            <div class="order-status status-@order.Status.ToLower().Replace(" ", "-")">@order.Status</div>
                        </div>
                        <div class="order-details">
                            <div class="order-date">
                                <span class="detail-icon">üìÖ</span>
                                @order.OrderDate
                            </div>
                        </div>
                        <div class="order-actions">
                            <button type="button" onclick="document.getElementById('orderNumberInput').value='@order.OrderNumber'; trackOrderAjax();" 
                                    class="quick-track-btn">
                                <span class="btn-icon">üîç</span>
                                <span class="btn-text">Track This Order</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else if (Model.IsPostBack)
    {
        <div class="no-orders-message">
            <div class="message-icon">üì¶</div>
            <p>No orders found with the given information.</p>
        </div>
    }
</div>

<style>
    /* =============================================================================
       MODERN TRACK ORDER PAGE - USING APP.CSS COLOR SCHEME
       ============================================================================= */
    
    /* CSS Variables from app.css for consistency */
    :root {
        --track-primary: var(--primary-brand, #FF6B35);
        --track-secondary: var(--secondary-brand, #F7931E);
        --track-accent: var(--accent-green, #4CAF50);
        --track-bg-primary: var(--bg-primary, #FEFEFE);
        --track-bg-secondary: var(--bg-secondary, #F8F9FA);
        --track-bg-accent: var(--bg-accent, #FFF5F2);
        --track-text-primary: var(--text-primary, #2D3748);
        --track-text-secondary: var(--text-secondary, #718096);
        --track-border: var(--border-light, #E2E8F0);
        --track-shadow: var(--shadow-md, 0 4px 6px rgba(0, 0, 0, 0.1));
    }

    /* Keyframe Animations */
    @@keyframes trackPulse {
        0%, 100% { transform: scale(1); opacity: 1; }
        50% { transform: scale(1.05); opacity: 0.8; }
    }

    @@keyframes liveDot {
        0%, 100% { opacity: 1; transform: scale(1); }
        50% { opacity: 0.3; transform: scale(0.8); }
    }

    @@keyframes progressGlow {
        0%, 100% { box-shadow: 0 0 5px var(--track-accent); }
        50% { box-shadow: 0 0 20px var(--track-accent), 0 0 30px var(--track-accent); }
    }

    @@keyframes slideInUp {
        from { transform: translateY(30px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes ripple {
        0% { transform: scale(0); opacity: 1; }
        100% { transform: scale(4); opacity: 0; }
    }

    @@keyframes stepActivate {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }

    @@keyframes fadeInScale {
        from { transform: scale(0.9); opacity: 0; }
        to { transform: scale(1); opacity: 1; }
    }

    /* Main Container */
    .track-page-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
        background: var(--track-bg-primary);
        min-height: 100vh;
    }

    /* Hero Section */
    .track-hero-section {
        background: linear-gradient(135deg, var(--track-primary), var(--track-secondary));
        border-radius: 24px;
        padding: 60px 40px;
        text-align: center;
        margin-bottom: 40px;
        position: relative;
        overflow: hidden;
        box-shadow: var(--track-shadow);
    }

    .track-hero-content {
        position: relative;
        z-index: 2;
    }

    .track-icon-container {
        position: relative;
        display: inline-block;
        margin-bottom: 20px;
    }

    .track-icon {
        font-size: 4rem;
        animation: trackPulse 2s infinite ease-in-out;
    }

    .track-title {
        font-size: 3rem;
        font-weight: 700;
        color: white;
        margin: 0 0 10px 0;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .track-subtitle {
        font-size: 1.2rem;
        color: rgba(255, 255, 255, 0.9);
        margin: 0;
    }

    /* Form Container */
    .track-form-container {
        margin-bottom: 40px;
    }

    .track-form-card {
        background: var(--track-bg-primary);
        border-radius: 20px;
        padding: 40px;
        box-shadow: var(--track-shadow);
        border: 1px solid var(--track-border);
        animation: slideInUp 0.6s ease-out;
    }

    /* Modern Input Groups */
    .input-group-modern {
        margin-bottom: 30px;
    }

    .input-wrapper {
        position: relative;
    }

    .input-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        color: var(--track-text-primary);
        margin-bottom: 12px;
        font-size: 1.1rem;
    }

    .label-icon {
        font-size: 1.2rem;
    }

    .input-modern {
        width: 100%;
        padding: 16px 20px;
        border: 2px solid var(--track-border);
        border-radius: 12px;
        font-size: 1rem;
        background: var(--track-bg-primary);
        color: var(--track-text-primary);
        transition: all 0.3s ease;
        position: relative;
    }

    .input-modern:focus {
        outline: none;
        border-color: var(--track-accent);
        box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.1);
        transform: translateY(-2px);
    }

    .input-focus-line {
        position: absolute;
        bottom: 0;
        left: 50%;
        width: 0;
        height: 3px;
        background: var(--track-accent);
        transition: all 0.3s ease;
        transform: translateX(-50%);
        border-radius: 2px;
    }

    .input-modern:focus + .input-focus-line {
        width: 100%;
    }

    /* Address Input */
    .address-input-modern {
        display: flex;
        gap: 12px;
        align-items: stretch;
    }

    .address-input {
        flex: 1;
    }

    .address-quick-btn {
        background: linear-gradient(135deg, var(--track-primary), var(--track-secondary));
        color: white;
        border: none;
        padding: 16px 24px;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap;
        position: relative;
        overflow: hidden;
    }

    .address-quick-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
        filter: brightness(1.1);
    }

    .address-quick-btn:active {
        transform: translateY(0);
    }

    /* Info Cards */
    .address-info-card, .address-warning-card {
        margin-top: 12px;
        padding: 16px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        gap: 12px;
        animation: fadeInScale 0.4s ease-out;
    }

    .address-info-card {
        background: #FFC107;
        border: 1px solid var(--track-accent);
        border-left: 4px solid var(--track-accent);
    }

    .address-warning-card {
        background: #FFB300; /* Deeper yellow gradient */
        border: 1px solid #FFC107;
        border-left: 4px solid #FFC107;
    }

    .info-icon, .warning-icon {
        font-size: 1.5rem;
    }

    .info-content {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .info-label {
        font-size: 0.9rem;
        color: var(--track-text-secondary);
    }

    .info-value {
        font-weight: 600;
        color: var(--track-text-primary);
    }

    .warning-content {
        font-weight: 500;
    }

    /* Submit Button */
    .form-actions {
        text-align: center;
        margin-top: 40px;
    }

    .track-submit-btn {
        background: linear-gradient(135deg, var(--track-accent), #66BB6A);
        color: white;
        border: none;
        padding: 18px 40px;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 12px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

    .track-submit-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);
        filter: brightness(1.1);
    }

    .btn-ripple {
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.3);
        transform: scale(0);
        animation: ripple 0.6s linear;
        pointer-events: none;
    }

    /* Tracking Result Container */
    .tracking-result-container {
        animation: slideInUp 0.6s ease-out;
    }

    .tracking-card {
        background: var(--track-bg-primary);
        border-radius: 20px;
        padding: 40px;
        box-shadow: var(--track-shadow);
        border: 1px solid var(--track-border);
        margin-bottom: 30px;
    }

    .tracking-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .tracking-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--track-text-primary);
        margin: 0;
    }

    .tracking-live-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--track-accent);
        font-weight: 600;
    }

    .live-dot {
        width: 12px;
        height: 12px;
        background: var(--track-accent);
        border-radius: 50%;
        animation: liveDot 1.5s infinite ease-in-out;
    }

    /* Modern Progress Bar */
    .progress-container {
        position: relative;
        margin-bottom: 30px;
    }

    .progress-track {
        width: 100%;
        height: 12px;
        background: var(--track-bg-secondary);
        border-radius: 6px;
        overflow: hidden;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--track-accent), #66BB6A);
        border-radius: 6px;
        transition: width 0.8s ease-in-out;
        position: relative;
        animation: progressGlow 2s infinite ease-in-out;
    }

    .progress-glow {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        animation: progressGlow 1.5s infinite ease-in-out;
    }

    .progress-percentage {
        position: absolute;
        top: -35px;
        right: 0;
        font-weight: 700;
        color: var(--track-text-primary);
        font-size: 1.1rem;
    }

    /* Status Steps */
    .status-steps-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 40px;
        position: relative;
    }

    .status-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        flex: 1;
        position: relative;
        opacity: 0.5;
        transition: all 0.3s ease;
    }

    .status-step.active {
        opacity: 1;
        animation: stepActivate 0.6s ease-out;
    }

    .step-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: var(--track-bg-secondary);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        border: 3px solid var(--track-border);
        transition: all 0.3s ease;
        z-index: 1;
    }

    /* Specific styles for Ready for Pickup status */
    .ready-pickup-icon {
        background: var(--track-bg-secondary) !important;
        border: 3px solid var(--track-border) !important;
        z-index: 2;
    }

    .status-step.active .ready-pickup-icon {
        background: var(--track-accent) !important;
        border-color: var(--track-accent) !important;
        color: white !important;
    }

    .ready-pickup-label {
        color: var(--track-text-secondary);
        font-weight: 600;
        z-index: 2;
    }

    .status-step.active .ready-pickup-label {
        color: var(--track-text-primary);
    }

    .refunded-step {
        display: none;
    }

    .refunded-step.active {
        display: flex;
        opacity: 1;
    }

    .refunded-step.active .step-icon {
        background: linear-gradient(45deg, #ff4444, #ffffff, #ff4444);
        border-color: #ff4444;
        color: #000;
        animation: refundPulse 2s infinite;
    }

    @@keyframes refundPulse {
        0% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(255, 68, 68, 0); }
        100% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0); }
    }

    /* Purchased Items Section */
    .purchased-items-section {
        margin-bottom: 30px;
    }

    .section-title {
        display: flex;
        align-items: center;
        gap: 12px;
        font-size: 1.4rem;
        font-weight: 700;
        color: var(--track-text-primary);
        margin-bottom: 20px;
    }

    .title-icon {
        font-size: 1.5rem;
    }

    .items-container {
        background: var(--track-bg-secondary);
        border-radius: 16px;
        padding: 20px;
        max-height: 300px;
        overflow-y: auto;
    }

    .items-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .items-list li {
        background: var(--track-bg-primary);
        border-radius: 12px;
        padding: 16px;
        display: flex;
        align-items: center;
        gap: 16px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease;
    }

    .items-list li:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .items-list img {
        width: 60px;
        height: 60px;
        border-radius: 8px;
        object-fit: cover;
        border: 2px solid var(--track-border);
    }

    /* Recent Orders Section */
    .recent-orders-section {
        margin-top: 40px;
        animation: slideInUp 0.6s ease-out 0.2s both;
    }

    .orders-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .order-card {
        background: var(--track-bg-primary);
        border-radius: 16px;
        padding: 24px;
        box-shadow: var(--track-shadow);
        border: 1px solid var(--track-border);
        transition: all 0.3s ease;
    }

    .order-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .order-number {
        font-weight: 700;
        color: var(--track-text-primary);
        font-size: 1.1rem;
    }

    .order-status {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-pending {
        background: #856404;
    }

    .status-paid {
        background: #0C5460;
    }

    .status-preparing {
        background: #C6D156;
    }

    .status-ready-for-pickup { 
        background: #73BA6E;
    }

    .status-delivered {
        background: #73BA6E;
    }

    .status-refunded { 
        background: #721C24; 
    }

    .status-declined {
        background: #721C24;
    }

    .order-details {
        margin-bottom: 20px;
    }

    .order-date {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--track-text-secondary);
        font-size: 0.9rem;
    }

    .detail-icon {
        font-size: 1rem;
    }

    .order-actions {
        text-align: center;
    }

    .quick-track-btn {
        background: linear-gradient(135deg, var(--track-primary), var(--track-secondary));
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
    }

    .quick-track-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255, 107, 53, 0.3);
        filter: brightness(1.1);
    }

    /* No Orders Message */
    .no-orders-message {
        text-align: center;
        padding: 60px 20px;
        color: var(--track-text-secondary);
    }

    .message-icon {
        font-size: 4rem;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    /* Validation Errors */
    .validation-error {
        color: #E53E3E;
        font-size: 0.85rem;
        margin-top: 8px;
        display: block;
    }

    /* Order Details Section */
    .order-details-section {
        background: var(--track-bg-secondary);
        border-radius: 16px;
        padding: 24px;
        margin-top: 20px;
    }

    .order-details-section .alert {
        background: var(--track-bg-primary);
        border: 1px solid var(--track-border);
        border-radius: 12px;
        padding: 20px;
        margin: 0;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .track-page-container {
            padding: 15px;
        }

        .track-hero-section {
            padding: 40px 20px;
        }

        .track-title {
            font-size: 2.2rem;
        }

        .track-form-card {
            padding: 30px 20px;
        }

        .address-input-modern {
            flex-direction: column;
        }

        .address-quick-btn {
            width: 100%;
            justify-content: center;
        }

        .tracking-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .status-steps-container {
            flex-wrap: wrap;
            gap: 20px;
        }

        .status-step {
            flex: 0 0 calc(50% - 10px);
        }

        .orders-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 480px) {
        .track-title {
            font-size: 1.8rem;
        }

        .track-subtitle {
            font-size: 1rem;
        }

        .track-form-card {
            padding: 20px 15px;
        }

        .tracking-card {
            padding: 20px 15px;
        }

        .status-step {
            flex: 0 0 100%;
        }

        .step-icon {
            width: 40px;
            height: 40px;
            font-size: 1.2rem;
        }
    }
</style>

<script>
    // Store profile address
    var profileAddress = '@Html.Raw(Model.Address?.Replace("\r\n", "\\n")?.Replace("\"", "\\\"") ?? "")';

    document.addEventListener('DOMContentLoaded', function() {
        var addressInput = document.getElementById('addressInput');

        if (profileAddress.trim() && profileAddress !== '') {
            addressInput.value = profileAddress;
            addressInput.placeholder = 'Address auto-filled from your profile';
        } else {
            addressInput.placeholder = 'Enter your delivery address';
        }

        var useMyAddressBtn = document.getElementById('useMyAddressBtn');
        if (useMyAddressBtn && (profileAddress.trim() === '' || profileAddress === '')) {
            useMyAddressBtn.style.display = 'none';
        }
    });

    // Fill profile address
    function useMyAddress() {
        var addressInput = document.getElementById('addressInput');
        if (profileAddress.trim() && profileAddress !== '') {
            addressInput.value = profileAddress;
        } else {
            alert('No address found in your profile.');
        }
    }

    // Track order directly from DB
    function trackOrderAjax() {
        var orderNumber = document.getElementById('orderNumberInput').value;

        if (!orderNumber) {
            alert("Please enter an order number.");
            return;
        }

        var trackingResult = document.getElementById('orderTrackingResult');
        var orderResult = document.getElementById('orderResult');

        trackingResult.style.display = 'block';
        orderResult.innerHTML = '';
        document.getElementById('orderResultMessage').textContent = 'Checking order status...';

        // Call backend directly
        fetch(`/Cart/GetOrderStatus?orderId=${orderNumber}`)
            .then(r => r.json())
            .then(orderData => {
                if (!orderData.success) {
                    trackingResult.style.display = 'none';
                    orderResult.innerHTML = `<div class="alert">${orderData.message}</div>`;
                    return;
                }

                // Determine adjusted status for progress bar and display
                var adjustedStatus = orderData.status;
                var paymentMade = orderData.paymentMade || false;
                var manualRefund = orderData.manualRefund || false;
                
                // If payment is not success/pending, stay pending for order tracking
                if (orderData.status === 'Pending' && !paymentMade) {
                    adjustedStatus = 'Pending';
                }
                // After payment made, then the order is paid
                else if (paymentMade && orderData.status === 'Pending') {
                    adjustedStatus = 'Paid';
                }
                // Start to prepare after payment
                else if (orderData.status === 'Preparing' && paymentMade) {
                    adjustedStatus = 'Preparing';
                }
                // Based on delivery option chosen by member
                else if (orderData.status === 'Ready for Pickup' && orderData.deliveryOption === 'Pickup' && paymentMade) {
                    adjustedStatus = 'Ready for Pickup';
                } else if (orderData.status === 'Delivered' && orderData.deliveryOption === 'Delivery' && paymentMade) {
                    adjustedStatus = 'Delivered';
                }
                // For Refunded, only display when member manually refund the order
                else if (orderData.status === 'Refunded' && manualRefund) {
                    adjustedStatus = 'Refunded';
                }

                // Update final step text based on delivery option
                var finalStatusStep = document.getElementById('finalStatusStep');
                if (orderData.deliveryOption === 'Pickup') {
                    finalStatusStep.textContent = 'Ready for Pickup';
                } else {
                    finalStatusStep.textContent = 'Delivered';
                }

                // Show/hide refunded step and update progress bar styling
                var refundedStatusStep = document.getElementById('refundedStatusStep');
                var progressBar = document.getElementById('orderProgressBar');
                if (manualRefund && adjustedStatus === 'Refunded') {
                    refundedStatusStep.style.display = 'block';
                    progressBar.style.background = 'linear-gradient(90deg, #ff4444, #ffffff, #ff4444)';
                } else {
                    refundedStatusStep.style.display = 'none';
                    progressBar.style.background = 'linear-gradient(90deg, #4CAF50, #8BC34A)';
                }

                // Update progress bar based on adjusted status
                var progressPercent = getProgressPercent(adjustedStatus, orderData.deliveryOption);
                progressBar.style.width = progressPercent + '%';
                progressBar.setAttribute('aria-valuenow', progressPercent);
                document.getElementById('orderProgressText').textContent = progressPercent + '%';

                // Highlight current status step
                highlightStatusStep(adjustedStatus, manualRefund);

                // Populate purchased items
                var itemsList = document.getElementById('purchasedItems').querySelector('ul');
                itemsList.innerHTML = '';
                if (orderData.items && orderData.items.length > 0) {
                    orderData.items.forEach(item => {
                        var li = document.createElement('li');
                        li.className = 'list-group-item d-flex align-items-center';
                        // Fix image URL to ensure it points to wwwroot/images correctly
                        var imageUrl = '/images/' + (item.imageUrl || 'default-item.png');
                        li.innerHTML = `
                            <img src="${imageUrl}" alt="${item.name}" style="width: 50px; height: 50px; margin-right: 10px; border-radius: 5px;">
                            <div>
                                <strong>${item.name}</strong><br>
                                Quantity: ${item.quantity}<br>
                                Price: RM${item.price}
                                ${item.personalization ? '<br>Personalization: ' + item.personalization : ''}
                            </div>
                        `;
                        itemsList.appendChild(li);
                    });
                } else {
                    itemsList.innerHTML = '<li class="list-group-item">No items found.</li>';
                }

                // Update result message with separated Pickup/Delivery info
                var deliveryInfo = '';
                var additionalInfo = '';
                if (orderData.deliveryOption === 'Pickup') {
                    deliveryInfo = '<p><strong>Pickup Location:</strong> Please pick up your order at the store counter.</p>';
                    additionalInfo = '<p><strong>Estimated Pickup Time:</strong> Within 15 minutes after order is ready.</p>';
                } else {
                    deliveryInfo = `<p><strong>Delivery Address:</strong> ${orderData.deliveryAddress || 'N/A'}</p>`;
                    additionalInfo = '<p><strong>Estimated Delivery Time:</strong> 30-45 minutes depending on location.</p>';
                }

                // Add payment button if status is pending and payment not made
                var paymentButtonHtml = '';
                if (adjustedStatus === 'Pending' && !paymentMade) {
                    paymentButtonHtml = '<button class="btn btn-warning btn-lg mt-3" onclick="proceedToPayment(' + orderData.orderId + ')" style="width: 100%; padding: 12px; font-weight: bold; border-radius: 8px; box-shadow: 0 4px 8px rgba(255, 193, 7, 0.3);">üí≥ Proceed to Payment</button>';
                }

                document.getElementById('orderResultMessage').innerHTML = `
                    <div class="alert">
                        <h5>Order #${orderData.orderId}</h5>
                        <p><strong>Status:</strong> ${orderData.status}</p>
                        <p><strong>Date:</strong> ${orderData.orderDate}</p>
                        ${deliveryInfo}
                        ${additionalInfo}
                        ${paymentButtonHtml}
                    </div>
                `;

                // Ensure the tracking result div remains visible
                trackingResult.style.display = 'block';
            })
            .catch(() => {
                trackingResult.style.display = 'none';
                orderResult.innerHTML = '<div class="alert">Failed to track order.</div>';
            });
    }

    // Function to handle payment button click
    function proceedToPayment(orderNumber) {
        // Redirect to payment page with order context
        window.location.href = '/Cart/Payment?orderId=' + orderNumber;
    }

    function getProgressPercent(status, deliveryOption) {
        switch (status) {
            case 'Pending': return 25;
            case 'Paid': return 50;
            case 'Preparing': return 75;
            case 'Ready for Pickup': return deliveryOption === 'Pickup' ? 100 : 75;
            case 'Delivered': return 100;
            case 'Refunded': return 100;
            case 'Declined': return 0;
            default: return 0;
        }
    }

    function highlightStatusStep(currentStatus, manualRefund) {
        var steps = document.querySelectorAll('#orderStatusSteps .status-step:not(#refundedStatusStep)');
        steps.forEach(step => {
            step.classList.remove('active');
            if (step.textContent === currentStatus) {
                step.classList.add('active');
            }
        });
        
        // Handle refunded step separately
        var refundedStep = document.getElementById('refundedStatusStep');
        if (manualRefund && currentStatus === 'Refunded') {
            refundedStep.classList.add('active');
        } else {
            refundedStep.classList.remove('active');
        }
    }
</script>
