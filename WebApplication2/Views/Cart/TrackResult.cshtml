@model WebApplication2.Models.TrackOrderVM
@{
    var order = Model?.Orders?.FirstOrDefault();
}
@if (order == null)
{
    <p>No orders found with the given information.</p>
}
else
{
    <div class="card p-4 mb-3" style="max-width:560px;margin:auto;">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h4 class="mb-0">Order #@order.OrderNumber</h4>
            <span class="badge bg-secondary">@order.DeliveryOption</span>
        </div>
        <div class="small text-muted mb-3">@order.OrderDate</div>

        <div class="progress mb-2" style="height:25px;background:#e9ecef;border-radius:12px;overflow:hidden;">
            <div id="progressBar" class="progress-bar" role="progressbar" style="height:100%;width:0;background:linear-gradient(90deg,#4CAF50,#8BC34A);transition:width .4s ease;position:relative;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <span id="progressText" style="position:absolute;right:8px;top:0;color:#fff;font-weight:bold;line-height:25px;">0%</span>
            </div>
        </div>

            <div class="d-flex justify-content-between mb-2" id="steps">
                <span class="step">Pending</span>
                <span class="step">Paid</span>
                <span class="step">Preparing</span>
                <span class="step" id="finalStep">Ready for Pickup</span>
                <span class="step refunded-step" id="refundedStep" style="display: none; background: linear-gradient(45deg, #ff4444, #ffffff, #ff4444); color: #000; border-radius: 4px; padding: 2px 8px; font-weight: bold; border: 2px solid #ff4444;">Refunded</span>
            </div>

        <div id="animBox" style="width:240px;height:80px;margin:10px auto;position:relative;border-radius:12px;overflow:hidden;background:linear-gradient(90deg,#e8f5e9,#c8e6c9);">
            <div id="pkg" style="position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:18px;height:14px;background:#FFECB3;border:1px solid #FFC107;border-radius:3px;box-shadow:0 1px 2px rgba(0,0,0,.15);"></div>
        </div>

        <div class="mt-2" id="statusText" style="font-weight:bold;color:#333;">@order.Status</div>
        <div class="small mt-1">ETA: <span id="etaText"></span></div>
        
        <!-- Payment Button - Only show if payment is pending -->
        <div id="paymentButtonContainer" style="display: none; margin-top: 15px;">
            <button id="proceedPaymentBtn" class="btn btn-warning btn-lg" onclick="proceedToPayment('@order.OrderNumber')" style="width: 100%; padding: 12px; font-weight: bold; border-radius: 8px; box-shadow: 0 4px 8px rgba(255, 193, 7, 0.3);">
                ðŸ’³ Proceed to Payment
            </button>
        </div>
        @if (order.DeliveryOption == "Pickup")
        {
            <div class="alert mt-3">
                <strong>Pickup Information:</strong> Please pick up your order at the store counter. Estimated pickup time: within 15 minutes after order is ready.
            </div>
        }
        else
        {
            <div class="alert mt-3">
                <strong>Delivery Information:</strong> Your order will be delivered to the address on file. Estimated delivery time: 30-45 minutes depending on location.
            </div>
        }

        <div id="purchasedItems" class="mt-4">
            <h5>Purchased Items</h5>
            <ul class="list-group" style="max-height: 200px; overflow-y: auto;">
                @if (order.Items != null && order.Items.Any())
                {
                    @foreach (var item in order.Items)
                    {
                        <li class="list-group-item d-flex align-items-center">
                            <img src="@(item.PhotoURL ?? "/images/default-item.png")" alt="@item.MenuItemName" style="width: 50px; height: 50px; margin-right: 10px; border-radius: 5px;">
                            <div>
                                <strong>@item.MenuItemName</strong><br>
                                Quantity: @item.Quantity<br>
                                Price: RM$@item.UnitPrice
                                @if (!string.IsNullOrEmpty(item.SelectedPersonalizations))
                                {
                                    <text><br />Personalization: @item.SelectedPersonalizations</text>
                                }
                            </div>
                        </li>
                    }
                }
                else
                {
                    <li class="list-group-item">No items found.</li>
                }
            </ul>
        </div>
    </div>

    @section Scripts {
        (function(){
            var status = '@order.Status';
            var deliveryOption = '@order.DeliveryOption';
            var orderNumber = '@order.OrderNumber';

            // Adjust status for progress bar and display logic
            function adjustStatus(s, paymentMade, manualRefund, deliveryOpt) {
                // If payment is not success/pending, stay pending for order tracking
                if (s === 'Pending' && !paymentMade) {
                    return 'Pending';
                }
                
                // After payment made, then the order is paid
                if (paymentMade && s === 'Pending') {
                    return 'Paid';
                }
                
                // Start to prepare after payment
                if (s === 'Preparing' && paymentMade) {
                    return 'Preparing';
                }
                
                // Based on delivery option chosen by member
                if (s === 'Ready for Pickup' && deliveryOpt === 'Pickup' && paymentMade) {
                    return 'Ready for Pickup';
                } else if (s === 'Delivered' && deliveryOpt === 'Delivery' && paymentMade) {
                    return 'Delivered';
                }
                
                // For Refunded, only display when member manually refund the order
                if (s === 'Refunded' && manualRefund) {
                    return 'Refunded';
                }
                
                return s;
            }

            function mapProgress(s, deliveryOpt){
                switch(s){
                    case 'Pending': return 25;
                    case 'Paid': return 50;
                    case 'Preparing': return 75;
                    case 'Ready for Pickup': return deliveryOpt === 'Pickup' ? 100 : 75;
                    case 'Delivered': return 100;
                    case 'Refunded': return 100;
                    case 'Declined': return 0;
                    default: return 0;
                }
            }

            function statusMessage(s){
                switch(s){
                    case 'Pending': return 'Order confirmed, pending payment';
                    case 'Paid': return 'Order confirmed and paid';
                    case 'Preparing': return deliveryOption === 'Pickup' ? 'Preparing your order' : 'Preparing for delivery';
                    case 'Ready for Pickup': return 'Ready for pickup at counter';
                    case 'Delivered': return deliveryOption === 'Pickup' ? 'Order picked up' : 'Order delivered';
                    case 'Refunded': return 'Order refunded';
                    case 'Declined': return 'Order declined';
                    default: return 'Processing order...';
                }
            }

            function updateProgressBar(progress, currentStatus, paymentMade, manualRefund) {
                var progressBar = document.getElementById('progressBar');
                var progressText = document.getElementById('progressText');
                var statusText = document.getElementById('statusText');
                var paymentButtonContainer = document.getElementById('paymentButtonContainer');
                var refundedStep = document.getElementById('refundedStep');
                var finalStep = document.getElementById('finalStep');

                // Update final step text based on delivery option
                if (deliveryOption === 'Pickup') {
                    finalStep.textContent = 'Ready for Pickup';
                } else {
                    finalStep.textContent = 'Delivered';
                }

                // Show/hide refunded step
                if (manualRefund && currentStatus === 'Refunded') {
                    refundedStep.style.display = 'block';
                    // Change progress bar color for refunded orders
                    progressBar.style.background = 'linear-gradient(90deg, #ff4444, #ffffff, #ff4444)';
                } else {
                    refundedStep.style.display = 'none';
                    progressBar.style.background = 'linear-gradient(90deg, #4CAF50, #8BC34A)';
                }

                // Show payment button only if status is pending and payment not made
                if (currentStatus === 'Pending' && !paymentMade) {
                    paymentButtonContainer.style.display = 'block';
                } else {
                    paymentButtonContainer.style.display = 'none';
                }

                // Smooth transition
                progressBar.style.transition = 'width 0.8s ease-in-out';
                progressBar.style.width = progress + '%';
                progressText.textContent = Math.round(progress) + '%';
                statusText.textContent = statusMessage(currentStatus);
            }

            function updateStepsVisualState(progress, currentStatus, manualRefund) {
                var steps = document.querySelectorAll('#steps .step:not(#refundedStep)');
                steps.forEach(function(step, index) {
                    var stepProgress = (index + 1) * 25;
                    step.classList.remove('active');
                    if (progress >= stepProgress) {
                        step.classList.add('active');
                    }
                });
                
                // Handle refunded step separately
                var refundedStep = document.getElementById('refundedStep');
                if (manualRefund && currentStatus === 'Refunded') {
                    refundedStep.classList.add('active');
                } else {
                    refundedStep.classList.remove('active');
                }
            }

            // Initial render with adjusted status
            var paymentMade = false; // Default to false, update dynamically if possible
            var manualRefund = false; // Default to false, update dynamically if possible
            var adjustedStatus = adjustStatus(status, paymentMade, manualRefund, deliveryOption);
            var progress = mapProgress(adjustedStatus, deliveryOption);
            updateProgressBar(progress, adjustedStatus, paymentMade, manualRefund);
            updateStepsVisualState(progress, adjustedStatus, manualRefund);

            // Auto-refresh status every 3 seconds for demo purposes
            var refreshInterval = setInterval(function() {
                fetch('/Cart/GetOrderStatus?orderId=' + orderNumber)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            status = data.status;
                            paymentMade = data.paymentMade || false;
                            manualRefund = data.manualRefund || false;
                            adjustedStatus = adjustStatus(status, paymentMade, manualRefund, deliveryOption);
                            progress = mapProgress(adjustedStatus, deliveryOption);
                            updateProgressBar(progress, adjustedStatus, paymentMade, manualRefund);
                            updateStepsVisualState(progress, adjustedStatus, manualRefund);

                            // If order is delivered or final status, stop refreshing
                            if (adjustedStatus === 'Delivered' || adjustedStatus === 'Ready for Pickup' || adjustedStatus === 'Refunded' || adjustedStatus === 'Declined') {
                                clearInterval(refreshInterval);
                            }
                        }
                    })
                    .catch(error => {
                        console.log('Status check failed:', error);
                    });
            }, 3000); // Check every 3 seconds

            // Stop refreshing after 15 seconds for demo
            setTimeout(function() {
                clearInterval(refreshInterval);
            }, 15000);
        })();

        // Function to handle payment button click
        function proceedToPayment(orderNumber) {
            // Redirect to payment page with order context
            window.location.href = '/Cart/Payment?orderId=' + orderNumber;
        }
    }

    <style>
        .step { color:#888; font-size:.9rem; transition: all 0.3s ease; }
        .step.active { color:#4CAF50; font-weight:600; }
        .refunded-step.active { 
            color:#000 !important; 
            background: linear-gradient(45deg, #ff4444, #ffffff, #ff4444) !important;
            animation: refundPulse 2s infinite;
        }
        
        @@keyframes refundPulse {
            0% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(255, 68, 68, 0); }
            100% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0); }
        }
        
        #proceedPaymentBtn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(255, 193, 7, 0.4);
        }
    </style>
}


