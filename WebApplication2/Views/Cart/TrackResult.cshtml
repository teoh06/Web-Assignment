@model WebApplication2.Models.TrackOrderVM
@{
    var order = Model?.Orders?.FirstOrDefault();
}
@if (order == null)
{
    <p>No orders found with the given information.</p>
        }
        else
        {
    <div class="card p-4 mb-3" style="max-width:560px;margin:auto;">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h4 class="mb-0">Order #@order.OrderNumber</h4>
            <span class="badge bg-secondary">@order.DeliveryOption</span>
        </div>
        <div class="small text-muted mb-3">@order.OrderDate</div>

        <div class="progress mb-2" style="height:20px;background:#e9ecef;border-radius:10px;overflow:hidden;">
            <div id="progressBar" style="height:100%;width:0;background:linear-gradient(90deg,#4CAF50,#8BC34A);transition:width .4s ease;position:relative;">
                <span id="progressText" style="position:absolute;right:8px;top:0;color:#fff;font-weight:bold;line-height:20px;">0%</span>
            </div>
        </div>

        <div class="d-flex justify-content-between mb-2" id="steps">
            <span class="step">Placed</span>
            <span class="step">Preparing</span>
            <span class="step" id="step3">@(order.DeliveryOption == "Pickup" ? "Ready" : "On the way")</span>
            <span class="step">Delivered</span>
        </div>

        <div id="animBox" style="width:240px;height:80px;margin:10px auto;position:relative;border-radius:12px;overflow:hidden;background:@(order.DeliveryOption=="Pickup"?"linear-gradient(90deg,#e8f5e9,#c8e6c9)":"linear-gradient(90deg,#e3f2fd,#bbdefb)");">
            <div id="road" style="display:@(order.DeliveryOption=="Pickup"?"none":"block");position:absolute;bottom:12px;left:8px;right:8px;height:2px;background:#333;opacity:.25;"></div>
            <div id="truck" style="display:@(order.DeliveryOption=="Pickup"?"none":"block");position:absolute;left:8px;top:26px;width:36px;height:18px;background:#2196F3;border-radius:9px 9px 5px 5px;box-shadow:0 1px 2px rgba(0,0,0,.2);"></div>
            <div id="pkg" style="display:@(order.DeliveryOption=="Pickup"?"block":"none");position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:18px;height:14px;background:#FFECB3;border:1px solid #FFC107;border-radius:3px;box-shadow:0 1px 2px rgba(0,0,0,.15);"></div>
            </div>
            
        <div class="mt-2" id="statusText" style="font-weight:bold;color:#333;">Loading status...</div>
        <div class="small mt-1">ETA: <span id="etaText"></span></div>
        @if (!string.Equals(order.DeliveryOption, "Pickup", StringComparison.OrdinalIgnoreCase))
        {
            <div class="small mt-1">Address: <span>@(string.IsNullOrWhiteSpace(Model?.Address) ? "-" : Model.Address)</span></div>
        }

        @if (User.IsInRole("Admin"))
        {
            <div class="admin-controls mt-3 p-3 bg-light border rounded">
                <div class="d-flex mb-2">
                    <select id="statusSelect" class="form-select me-2">
                        <option value="Pending" selected="@(order.Status=="Pending")">Pending</option>
                        <option value="Paid" selected="@(order.Status=="Paid")">Paid</option>
                        <option value="Preparing" selected="@(order.Status=="Preparing")">Preparing</option>
                        <option value="Ready for Pickup" selected="@(order.Status=="Ready for Pickup")">Ready for Pickup</option>
                        <option value="Out for Delivery" selected="@(order.Status=="Out for Delivery")">Out for Delivery</option>
                        <option value="Delivered" selected="@(order.Status=="Delivered")">Delivered</option>
                        <option value="Cancelled" selected="@(order.Status=="Cancelled")">Cancelled</option>
                        <option value="Refunded" selected="@(order.Status=="Refunded")">Refunded</option>
                    </select>
                    <button id="updateStatusBtn" class="btn btn-primary">Update Status</button>
        </div>
                <div id="statusUpdateMessage"></div>
        </div>
        }
    </div>

    <style>
        .step { color:#888; font-size:.9rem; }
        .step.active { color:#4CAF50; font-weight:600; }
    </style>
    
    <script>
        (function(){
            var orderId = '@order.OrderNumber';
            var status = '@order.Status';
            var deliveryOption = '@order.DeliveryOption';
            var orderDateStr = '@order.OrderDate.ToString("yyyy-MM-dd HH:mm:ss")';
            var orderDate = new Date(orderDateStr);
            // 1 minute ETA for testing
            var eta = new Date(orderDate.getTime() + 60*1000);
            var graceMs = 5000;

            var progressBar = document.getElementById('progressBar');
            var progressText = document.getElementById('progressText');
            var statusText = document.getElementById('statusText');
            var steps = Array.prototype.slice.call(document.querySelectorAll('#steps .step'));
            var truck = document.getElementById('truck');
            var etaText = document.getElementById('etaText');

            function fmtEta(d){
                if (!d) return '-';
                var now = new Date();
                return (now < d) ? d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}) : 'Any moment now...';
            }

            function mapProgress(s){
                switch(s){
                    case 'Paid': return 25;
                    case 'Preparing': return 50;
                    case 'Ready for Pickup': return 75;
                    case 'Out for Delivery': return 75;
                    case 'Delivered': return 100;
                    case 'Cancelled':
                    case 'Refunded': return 0;
                    default: return 10;
                }
            }

            function statusMessage(s){
                switch(s){
                    case 'Paid': return 'Order placed. Getting things ready...';
                    case 'Preparing': return 'We are preparing your order.';
                    case 'Ready for Pickup': return 'Ready for pickup at the counter.';
                    case 'Out for Delivery': return 'On the way to your address.';
                    case 'Delivered': return 'Delivered. Enjoy your meal!';
                    case 'Cancelled': return 'Order cancelled.';
                    case 'Refunded': return 'Order refunded.';
                    default: return 'Processing...';
                }
            }

            function render(progress, s){
                progressBar.style.width = progress + '%';
                progressText.textContent = Math.round(progress) + '%';
                statusText.textContent = statusMessage(s);

                steps.forEach(function(el, idx){
                    var stepThreshold = (idx+1)*25;
                    if (progress >= stepThreshold) el.classList.add('active'); else el.classList.remove('active');
                });

                if (deliveryOption !== 'Pickup' && truck){
                    var box = document.getElementById('animBox');
                    var boxW = box ? box.clientWidth : 240;
                    var truckW = truck.clientWidth || 36;
                    var padding = 8; // match CSS left/right in road
                    var minL = padding;
                    var maxL = Math.max(padding, boxW - padding - truckW);
                    var left = minL + (maxL - minL) * (progress/100);
                    truck.style.left = Math.round(left) + 'px';
                }

                if (s === 'Delivered'){
                    progressBar.style.background = 'linear-gradient(90deg,#4CAF50,#2E7D32)';
                }
            }

            function fastForwardIfOverdue(){
                try{
                    if (Date.now() >= eta.getTime() + graceMs && status !== 'Delivered' && status !== 'Cancelled' && status !== 'Refunded'){
                        status = 'Delivered';
                        render(100, status);
                        return true;
                    }
                }catch(e){}
                return false;
            }

            function bindAdmin(){
                var btn = document.getElementById('updateStatusBtn');
                if (!btn) return;
                btn.addEventListener('click', function(){
                    var select = document.getElementById('statusSelect');
                    var newStatus = select ? select.value : status;
                    var msg = document.getElementById('statusUpdateMessage');
                    if (msg) msg.innerHTML = '<div class="alert alert-info">Updating...</div>';
                 fetch('/Admin/UpdateOrderStatusAjax', {
                     method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: 'orderId=' + encodeURIComponent(orderId) + '&status=' + encodeURIComponent(newStatus)
                    })
                    .then(r=>r.json()).then(function(data){
                        if (data && data.success){
                            status = newStatus;
                            render(mapProgress(status), status);
                            if (msg) msg.innerHTML = '<div class="alert alert-success">Updated.</div>';
                    } else {
                            if (msg) msg.innerHTML = '<div class="alert alert-danger">Failed: ' + (data && data.message ? data.message : 'Unknown error') + '</div>';
                        }
                    }).catch(function(err){ if (msg) msg.innerHTML = '<div class="alert alert-danger">Error: ' + err + '</div>'; });
                });
            }

            // Initial draw
            etaText.textContent = fmtEta(eta);
            render(mapProgress(status), status);
            fastForwardIfOverdue();
            bindAdmin();

            // Poll every 3s for real status
            var poller = setInterval(function(){
                if (fastForwardIfOverdue()) { clearInterval(poller); return; }
                fetch('/Cart/GetOrderStatus?orderId=' + orderId)
                    .then(r=>r.json())
                    .then(function(data){
                        if (!data || !data.success) return;
                        if (data.status !== status){
                            status = data.status;
                            render(mapProgress(status), status);
                        }
                        if (status === 'Delivered' || status === 'Cancelled' || status === 'Refunded'){
                            clearInterval(poller);
                        }
                    })
                    .catch(function(){ /* ignore */ });
            }, 3000);
        })();
    </script>
}


