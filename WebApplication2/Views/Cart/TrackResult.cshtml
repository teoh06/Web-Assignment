@model WebApplication2.Models.TrackOrderVM
@{
    var order = Model?.Orders?.FirstOrDefault();
}
@if (order == null)
{
    <div class="track-result-empty">
        <div class="empty-icon">📦</div>
        <h3 class="empty-title">No Order Found</h3>
        <p class="empty-message">No orders found with the given information. Please check your order number and address.</p>
    </div>
}
else
{
    <!-- Modern Track Result Card -->
    <div class="track-result-card">
        <!-- Header Section -->
        <div class="result-header">
            <div class="order-info">
                <h3 class="order-title">Order #@order.OrderNumber</h3>
                <div class="order-meta">
                    <span class="order-date">
                        <span class="meta-icon">📅</span>
                        @order.OrderDate.ToString("MMM dd, yyyy")
                    </span>
                    <span class="delivery-badge delivery-@order.DeliveryOption.ToLower()">
                        <span class="badge-icon">@(order.DeliveryOption == "Pickup" ? "🏪" : "🚚")</span>
                        @order.DeliveryOption
                    </span>
                </div>
            </div>
            <div class="live-status">
                <div class="status-dot"></div>
                <span class="status-text">Live Tracking</span>
            </div>
        </div>

        <!-- Modern Progress Section -->
        <div class="progress-section">
            <div class="progress-wrapper">
                <div class="progress-track-modern">
                    <div id="progressBar" class="progress-fill-modern" role="progressbar" 
                         style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-shine"></div>
                    </div>
                </div>
                <div id="progressText" class="progress-label">0%</div>
            </div>
        </div>

        <!-- Status Steps with Modern Design -->
        <div class="status-timeline" id="steps">
            <div class="timeline-step step-pending">
                <div class="step-circle">
                    <span class="step-icon">⏳</span>
                </div>
                <span class="step-text">Pending</span>
            </div>
            <div class="timeline-step step-paid">
                <div class="step-circle">
                    <span class="step-icon">💳</span>
                </div>
                <span class="step-text">Paid</span>
            </div>
            <div class="timeline-step step-preparing">
                <div class="step-circle">
                    <span class="step-icon">👨‍🍳</span>
                </div>
                <span class="step-text">Preparing</span>
            </div>
            <div class="timeline-step step-final" id="finalStep">
                <div class="step-circle">
                    <span class="step-icon">✅</span>
                </div>
                <span class="step-text">Ready for Pickup</span>
            </div>
            <div class="timeline-step step-refunded" id="refundedStep" style="display: none;">
                <div class="step-circle refunded-circle">
                    <span class="step-icon">💸</span>
                </div>
                <span class="step-text">Refunded</span>
            </div>
        </div>

        <!-- Animated Package Tracking -->
        <div class="package-animation-container">
            <div class="package-track">
                <div id="animatedPackage" class="package-icon">📦</div>
                <div class="track-line"></div>
                <div class="destination-marker">🏪</div>
            </div>
        </div>

        <!-- Status Information -->
        <div class="status-info-section">
            <div class="current-status">
                <h4 id="statusText" class="status-title">@order.Status</h4>
                <p class="status-description" id="statusDescription">Processing your order...</p>
            </div>
            <div class="eta-info">
                <span class="eta-label">Estimated Time:</span>
                <span id="etaText" class="eta-value">Calculating...</span>
            </div>
        </div>
        
        <!-- Payment Button - Modern Design -->
        <div id="paymentButtonContainer" class="payment-section" style="display: none;">
            <button id="proceedPaymentBtn" class="payment-btn-modern pulse-payment-btn" onclick="proceedToPayment('@order.OrderNumber')">
                <span class="btn-icon"><i class="fas fa-credit-card"></i></span>
                <span class="btn-text">Complete Payment</span>
                <div class="btn-glow"></div>
            </button>
        </div>

        <!-- Delivery Information Card -->
        <div class="delivery-info-card">
            @if (order.DeliveryOption == "Pickup")
            {
                <div class="info-header">
                    <span class="info-icon">🏪</span>
                    <h5 class="info-title">Pickup Information</h5>
                </div>
                <div class="info-content">
                    <p><strong>Location:</strong> Store Counter</p>
                    <p><strong>Estimated Time:</strong> Within 15 minutes after order is ready</p>
                    <p class="info-note">Please bring your order confirmation when picking up</p>
                </div>
            }
            else
            {
                <div class="info-header">
                    <span class="info-icon">🚚</span>
                    <h5 class="info-title">Delivery Information</h5>
                </div>
                <div class="info-content">
                    <p><strong>Address:</strong> Delivery to address on file</p>
                    <p><strong>Estimated Time:</strong> 30-45 minutes depending on location</p>
                    <p class="info-note">Our delivery partner will contact you before arrival</p>
                </div>
            }
        </div>

        <!-- Purchased Items Section -->
        <div class="items-section">
            <div class="items-header">
                <h5 class="items-title">
                    <span class="title-icon">🛍️</span>
                    Purchased Items
                </h5>
                <span class="items-count">@(order.Items?.Count() ?? 0) items</span>
            </div>
            <div class="items-container-modern">
                @if (order.Items != null && order.Items.Any())
                {
                    @foreach (var item in order.Items)
                    {
                        <div class="item-card-modern">
                            <div class="item-image">
                                <img src="@(item.PhotoURL ?? "/images/default-item.png")" alt="@item.MenuItemName">
                            </div>
                            <div class="item-details">
                                <h6 class="item-name">@item.MenuItemName</h6>
                                <div class="item-meta">
                                    <span class="item-quantity">Qty: @item.Quantity</span>
                                    <span class="item-price">RM @item.UnitPrice.ToString("F2")</span>
                                </div>
                                @if (!string.IsNullOrEmpty(item.SelectedPersonalizations))
                                {
                                    <div class="item-personalization">
                                        <span class="personalization-icon">✨</span>
                                        <span class="personalization-text">@item.SelectedPersonalizations</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-items-message">
                        <span class="no-items-icon">📦</span>
                        <span class="no-items-text">No items found</span>
                    </div>
                }
            </div>
        </div>
    </div>

    @section Scripts {
        (function(){
            var status = '@order.Status';
            var deliveryOption = '@order.DeliveryOption';
            var orderNumber = '@order.OrderNumber';

            // Adjust status for progress bar and display logic
            function adjustStatus(s, paymentMade, manualRefund, deliveryOpt) {
                // If payment is not success/pending, stay pending for order tracking
                if (s === 'Pending' && !paymentMade) {
                    return 'Pending';
                }
                
                // After payment made, then the order is paid
                if (paymentMade && s === 'Pending') {
                    return 'Paid';
                }
                
                // Start to prepare after payment
                if (s === 'Preparing' && paymentMade) {
                    return 'Preparing';
                }
                
                // Based on delivery option chosen by member
                if (s === 'Ready for Pickup' && deliveryOpt === 'Pickup' && paymentMade) {
                    return 'Ready for Pickup';
                } else if (s === 'Delivered' && deliveryOpt === 'Delivery' && paymentMade) {
                    return 'Delivered';
                }
                
                // For Refunded, only display when member manually refund the order
                if (s === 'Refunded' && manualRefund) {
                    return 'Refunded';
                }
                
                return s;
            }

            function mapProgress(s, deliveryOpt){
                switch(s){
                    case 'Pending': return 25;
                    case 'Paid': return 50;
                    case 'Preparing': return 75;
                    case 'Ready for Pickup': return deliveryOpt === 'Pickup' ? 100 : 75;
                    case 'Delivered': return 100;
                    case 'Refunded': return 100;
                    case 'Declined': return 0;
                    default: return 0;
                }
            }

            function statusMessage(s){
                switch(s){
                    case 'Pending': return 'Order confirmed, pending payment';
                    case 'Paid': return 'Order confirmed and paid';
                    case 'Preparing': return deliveryOption === 'Pickup' ? 'Preparing your order' : 'Preparing for delivery';
                    case 'Ready for Pickup': return 'Ready for pickup at counter';
                    case 'Delivered': return deliveryOption === 'Pickup' ? 'Order picked up' : 'Order delivered';
                    case 'Refunded': return 'Order refunded';
                    case 'Declined': return 'Order declined';
                    default: return 'Processing order...';
                }
            }

            function updateProgressBar(progress, currentStatus, paymentMade, manualRefund) {
                var progressBar = document.getElementById('progressBar');
                var progressText = document.getElementById('progressText');
                var statusText = document.getElementById('statusText');
                var paymentButtonContainer = document.getElementById('paymentButtonContainer');
                var refundedStep = document.getElementById('refundedStep');
                var finalStep = document.getElementById('finalStep');

                // Update final step text based on delivery option
                if (deliveryOption === 'Pickup') {
                    finalStep.textContent = 'Ready for Pickup';
                } else {
                    finalStep.textContent = 'Delivered';
                }

                // Show/hide refunded step
                if (manualRefund && currentStatus === 'Refunded') {
                    refundedStep.style.display = 'block';
                    // Change progress bar color for refunded orders
                    progressBar.style.background = 'linear-gradient(90deg, #ff4444, #ffffff, #ff4444)';
                } else {
                    refundedStep.style.display = 'none';
                    progressBar.style.background = 'linear-gradient(90deg, #4CAF50, #8BC34A)';
                }

                // Show payment button only if status is pending and payment not made
                if (currentStatus === 'Pending' && !paymentMade) {
                    paymentButtonContainer.style.display = 'block';
                } else {
                    paymentButtonContainer.style.display = 'none';
                }

                // Smooth transition
                progressBar.style.transition = 'width 0.8s ease-in-out';
                progressBar.style.width = progress + '%';
                progressText.textContent = Math.round(progress) + '%';
                statusText.textContent = statusMessage(currentStatus);
            }

            function updateStepsVisualState(progress, currentStatus, manualRefund) {
                var steps = document.querySelectorAll('#steps .step:not(#refundedStep)');
                steps.forEach(function(step, index) {
                    var stepProgress = (index + 1) * 25;
                    step.classList.remove('active');
                    if (progress >= stepProgress) {
                        step.classList.add('active');
                    }
                });
                
                // Handle refunded step separately
                var refundedStep = document.getElementById('refundedStep');
                if (manualRefund && currentStatus === 'Refunded') {
                    refundedStep.classList.add('active');
                } else {
                    refundedStep.classList.remove('active');
                }
            }

            // Initial render with adjusted status
            var paymentMade = false; // Default to false, update dynamically if possible
            var manualRefund = false; // Default to false, update dynamically if possible
            var adjustedStatus = adjustStatus(status, paymentMade, manualRefund, deliveryOption);
            var progress = mapProgress(adjustedStatus, deliveryOption);
            updateProgressBar(progress, adjustedStatus, paymentMade, manualRefund);
            updateStepsVisualState(progress, adjustedStatus, manualRefund);

            // Auto-refresh status every 3 seconds for demo purposes
            var refreshInterval = setInterval(function() {
                fetch('/Cart/GetOrderStatus?orderId=' + orderNumber)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            status = data.status;
                            paymentMade = data.paymentMade || false;
                            manualRefund = data.manualRefund || false;
                            adjustedStatus = adjustStatus(status, paymentMade, manualRefund, deliveryOption);
                            progress = mapProgress(adjustedStatus, deliveryOption);
                            updateProgressBar(progress, adjustedStatus, paymentMade, manualRefund);
                            updateStepsVisualState(progress, adjustedStatus, manualRefund);

                            // If order is delivered or final status, stop refreshing
                            if (adjustedStatus === 'Delivered' || adjustedStatus === 'Ready for Pickup' || adjustedStatus === 'Refunded' || adjustedStatus === 'Declined') {
                                clearInterval(refreshInterval);
                            }
                        }
                    })
                    .catch(error => {
                        console.log('Status check failed:', error);
                    });
            }, 3000); // Check every 3 seconds

            // Stop refreshing after 15 seconds for demo
            setTimeout(function() {
                clearInterval(refreshInterval);
            }, 15000);
        })();

        // Function to handle payment button click
        function proceedToPayment(orderNumber) {
            // Debug logging
            console.log('Completing payment for order:', orderNumber);
            
            // Use consistent URL format with History view
            var paymentUrl = '@Url.Action("Payment", "Cart")/' + orderNumber;
            console.log('Payment URL:', paymentUrl);
            
            // Redirect to payment page with order ID as route parameter
            window.location.href = paymentUrl;
        }
    }

    <style>
        .step { color:#888; font-size:.9rem; transition: all 0.3s ease; }
        .step.active { color:#4CAF50; font-weight:600; }
        .refunded-step.active { 
            color:#000 !important; 
            background: linear-gradient(45deg, #ff4444, #ffffff, #ff4444) !important;
            animation: refundPulse 2s infinite;
        }
        
        @@keyframes refundPulse {
            0% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(255, 68, 68, 0); }
            100% { box-shadow: 0 0 0 0 rgba(255, 68, 68, 0); }
        }
        
        #proceedPaymentBtn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(255, 193, 7, 0.4);
        }
        
        /* Pulse animation for payment button */
        .pulse-payment-btn {
            animation: paymentPulse 2s infinite;
        }
        
        @@keyframes paymentPulse {
            0% { 
                box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 6px 20px rgba(255, 193, 7, 0.6);
                transform: scale(1.02);
            }
            100% { 
                box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
                transform: scale(1);
            }
        }
    </style>
}


