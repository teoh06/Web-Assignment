@model WebApplication2.Models.Category

@{
    ViewData["Title"] = "Create Category";
}

<h1>Create Category</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <h4>Validation Errors:</h4>
        <ul>
            @foreach (var modelState in ViewData.ModelState.Values)
            {
                foreach (var error in modelState.Errors)
                {
                    <li>@error.ErrorMessage</li>
                }
            }
        </ul>
    </div>
}

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label">Category Name</label>
                <input asp-for="Name" class="form-control" placeholder="Enter category name" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create Category" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Add form submission debugging
        document.querySelector('form').addEventListener('submit', function(e) {
            console.log('Category form submitted');
            console.log('Form data:', new FormData(this));
            
            // Log form field values
            const formData = new FormData(this);
            for (let [key, value] of formData.entries()) {
                console.log(`${key}: ${value}`);
            }
        });
    </script>
}
