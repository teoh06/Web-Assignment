@model WebApplication2.Models.MenuItem
@{
    ViewBag.Title = "Add Menu Item";
    var categories = ViewBag.Categories as List<WebApplication2.Models.Category> ?? new List<WebApplication2.Models.Category>();
}

@if (TempData["Message"] != null)
{
    <div class="alert alert-info">@TempData["Message"]</div>
}


<div class="container mt-4">
    <div class="row">

        <!-- Left: Bulk Upload -->
        <div class="col-md-5">
            <h3>Bulk Upload Menu Items (TXT)</h3>
            <div id="bulkUploadMessage"></div>

            <form id="dummyTokenForm" style="display:none;">
                @Html.AntiForgeryToken()
            </form>

            <div id="txtDropArea" class="drag-area">
                <input type="file" id="txtFileInput" name="txtFile" accept=".txt" style="display:none;" />
                <div id="txtPreviewContent">
                    <span id="txtDropText">Drag & drop a TXT file here, or click to select.</span>
                </div>
            </div>
            <small class="form-text text-muted">
                TXT format: Name, Description, Price, CategoryName, OptionalPhotoURL <br />
                Example 1: Cheeseburger, Juicy beef burger with cheese, 12.50, Main Course, https://example.com/images/cheeseburger.jpg <br />
                Example 2: Chocolate Cake, Rich chocolate cake slice, 7.00, Desserts, https://example.com/images/chocolatecake.jpg
            </small>
            <br />
            <br />
            <h3>Multiple Photo Upload</h3>
            <form id="photoUploadForm" method="post" enctype="multipart/form-data" asp-controller="MenuItem" asp-action="UploadPhotos">
                @Html.AntiForgeryToken()
                <div id="photoDropArea" class="drag-area">
                    <input type="file" id="photoInput" name="photos" accept="image/*" multiple hidden />
                    <div id="photoDropText">Drag & drop images here or click to select (Max size: 2MB each)</div>
                    <div id="photoPreview" class="preview-images"></div>
                </div>
                <br />
                <button type="submit" class="btn btn-secondary">Upload Photos</button>
            </form>
        </div>

        <!-- Middle: OR -->
        <div class="col-md-2 text-center d-flex align-items-center justify-content-center">
            <h4>OR</h4>
        </div>

        <!-- Right: Add New Menu Item -->
        <div class="col-md-5">
            <h3>Add New Menu Item</h3>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMessage"]</div>
            }

            <form asp-action="Create" method="post" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="Name">Item Name</label>
                    <input asp-for="Name" class="form-control" placeholder="Enter menu item name" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Description">Description</label>
                    <textarea asp-for="Description" class="form-control" placeholder="Enter item description" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Price">Price</label>
                    <div class="input-group">
                        <span class="input-group-text">RM</span>
                        <input asp-for="Price" class="form-control" type="number" step="0.01" min="0.01" placeholder="0.00" />
                    </div>
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="CategoryId">Category</label>
                    <select asp-for="CategoryId" class="form-control" asp-items="@(new SelectList(categories, "CategoryId", "Name"))">
                        <option value="">-- Select Category --</option>
                    </select>
                    <span asp-validation-for="CategoryId" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="StockQuantity">Stock Quantity</label>
                    <input asp-for="StockQuantity" class="form-control" type="number" min="0" placeholder="0" />
                    <span asp-validation-for="StockQuantity" class="text-danger"></span>
                    <small class="form-text text-muted">Enter the available quantity in stock. Set to 0 if out of stock.</small>
                </div>

                <div class="form-group">
                    <label for="imageFile">Photo (Optional)</label>
                    <div id="drop-area" class="drag-area">
                        <input type="file" id="imageInput" name="imageFile" accept="image/*" class="file-input" />
                        <div id="preview-content">
                            <span id="drop-text">Drag & drop an image here, or click to select. (Max 2MB)</span>
                            <div id="preview-images" class="preview-images"></div>
                        </div>
                        <button type="button" id="deletePhoto" class="btn btn-danger btn-sm" style="display:none;">X</button>
                    </div>
                    <small class="form-text text-muted">Supported formats: JPEG, PNG, GIF, WebP. Maximum size: 2MB.</small>
                    <span asp-validation-for="PhotoURL" class="text-danger"></span>
                </div>
                
                <!-- Image Processing Controls (hidden until image is selected) -->
                <div id="imageProcessingControls" class="form-group" style="display:none;">
                    <h5>Image Processing</h5>
                    
                    <!-- Resize Controls -->
                    <div class="mb-3">
                        <label for="resizeWidth" class="form-label">Resize Width (px)</label>
                        <input type="number" id="resizeWidth" class="form-control" min="50" max="1000" value="300" />
                        
                        <label for="resizeHeight" class="form-label mt-2">Resize Height (px)</label>
                        <input type="number" id="resizeHeight" class="form-control" min="50" max="1000" value="300" />
                        
                        <button type="button" id="resizeBtn" class="btn btn-sm btn-primary mt-2">Resize</button>
                        <button type="button" id="resetBtn" class="btn btn-sm btn-secondary mt-2 ml-2">Reset</button>
                    </div>
                    
                    <!-- Rotation Controls -->
                    <div class="mb-3">
                        <label class="form-label">Rotate Image</label>
                        <div class="d-flex">
                            <button type="button" id="rotateLeftBtn" class="btn btn-sm btn-info mr-2">Rotate Left</button>
                            <button type="button" id="rotateRightBtn" class="btn btn-sm btn-info">Rotate Right</button>
                        </div>
                    </div>
                    
                    <!-- Crop Controls -->
                    <div class="mb-3">
                        <button type="button" id="enableCropBtn" class="btn btn-sm btn-warning">Enable Crop</button>
                        <button type="button" id="cropBtn" class="btn btn-sm btn-success ml-2" style="display:none;">Apply Crop</button>
                        <button type="button" id="cancelCropBtn" class="btn btn-sm btn-danger ml-2" style="display:none;">Cancel Crop</button>
                    </div>
                    
                    <input type="hidden" id="processedImageData" name="processedImageData" />
                </div>

                <button type="submit" class="btn btn-primary submit-btn">Create Item</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            /* -----------------------------
             * Bulk TXT Upload (AJAX)
             * ----------------------------- */
            const txtDropArea = document.getElementById('txtDropArea');
            const txtFileInput = document.getElementById('txtFileInput');
            const txtDropText = document.getElementById('txtDropText');
            const txtPreviewContent = document.getElementById('txtPreviewContent');
            const bulkUploadMessage = document.getElementById('bulkUploadMessage');

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                txtDropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                });
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                txtDropArea.addEventListener(eventName, () => txtDropArea.classList.add('active'));
            });
            ['dragleave', 'drop'].forEach(eventName => {
                txtDropArea.addEventListener(eventName, () => txtDropArea.classList.remove('active'));
            });

            txtDropArea.addEventListener('click', () => txtFileInput.click());

            txtFileInput.addEventListener('change', () => {
                if (txtFileInput.files.length > 0) {
                    uploadTxtFile(txtFileInput.files[0]);
                }
            });

            txtDropArea.addEventListener('drop', e => {
                if (e.dataTransfer.files.length > 0) {
                    uploadTxtFile(e.dataTransfer.files[0]);
                }
            });

            function uploadTxtFile(file) {
                if (!file || !file.name.endsWith('.txt')) {
                    bulkUploadMessage.innerHTML = '<div class="alert alert-danger">Only .txt files are allowed.</div>';
                    return;
                }

                const formData = new FormData();
                formData.append('txtFile', file);

                // get antiforgery token
                const token = document.querySelector('#dummyTokenForm input[name="__RequestVerificationToken"]').value;

                fetch('/MenuItem/BulkUpload', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': token
                    }
                })
                .then(res => res.text())
                .then(data => {
                    bulkUploadMessage.innerHTML = `<div class="alert alert-success">${data}</div>`;
                })
                .catch(err => {
                    bulkUploadMessage.innerHTML = `<div class="alert alert-danger">Upload failed: ${err}</div>`;
                });
            }


            /* -----------------------------
             * Multiple Photo Upload
             * ----------------------------- */
            const photoDropArea = document.getElementById('photoDropArea');
            const photoInput = document.getElementById('photoInput');
            const photoPreview = document.getElementById('photoPreview');
            const photoDropText = document.getElementById('photoDropText');

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                photoDropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                });
            });

            ['dragenter', 'dragover'].forEach(eventName => photoDropArea.classList.add('active'));
            ['dragleave', 'drop'].forEach(eventName => photoDropArea.classList.remove('active'));

            photoDropArea.addEventListener('click', () => photoInput.click());

            photoInput.addEventListener('change', () => {
                updatePreviews(photoInput.files);
            });

            photoDropArea.addEventListener('drop', e => {
                const dt = new DataTransfer();
                for (const file of e.dataTransfer.files) {
                    if (file.type.startsWith('image/') && file.size <= 2 * 1024 * 1024) {
                        dt.items.add(file);
                    }
                }
                photoInput.files = dt.files;
                updatePreviews(photoInput.files);
            });

            function updatePreviews(files) {
                photoPreview.innerHTML = "";
                for (const file of files) {
                    const reader = new FileReader();
                    reader.onload = e => {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        photoPreview.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                }
            }


            /* -----------------------------
             * Single Image Processing
             * ----------------------------- */
            const dropArea = document.getElementById('drop-area');
            const imageInput = document.getElementById('imageInput');
            const dropText = document.getElementById('drop-text');
            const previewImages = document.getElementById('preview-images');
            const deleteBtn = document.getElementById('deletePhoto');
            const processingControls = document.getElementById('imageProcessingControls');
            const processedImageData = document.getElementById('processedImageData');

            const resizeBtn = document.getElementById('resizeBtn');
            const resetBtn = document.getElementById('resetBtn');
            const rotateLeftBtn = document.getElementById('rotateLeftBtn');
            const rotateRightBtn = document.getElementById('rotateRightBtn');
            const enableCropBtn = document.getElementById('enableCropBtn');
            const cropBtn = document.getElementById('cropBtn');
            const cancelCropBtn = document.getElementById('cancelCropBtn');

            let originalImage = null;
            let currentImage = null;
            let cropper = null;

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                }, false);
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.add('active'), false);
            });
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.remove('active'), false);
            });

            dropArea.addEventListener('drop', e => {
                const dt = e.dataTransfer;
                if (dt.files.length > 0) {
                    imageInput.files = dt.files;
                    handleFile(dt.files[0]);
                }
            });

            dropArea.addEventListener('click', () => imageInput.click());

            imageInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleFile(e.target.files[0]);
                }
            });

            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                clearPreview();
                processingControls.style.display = 'none';
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });

            resizeBtn.addEventListener('click', resizeImage);
            resetBtn.addEventListener('click', resetImage);
            rotateLeftBtn.addEventListener('click', () => rotateImage(-90));
            rotateRightBtn.addEventListener('click', () => rotateImage(90));
            enableCropBtn.addEventListener('click', enableCrop);
            cropBtn.addEventListener('click', applyCrop);
            cancelCropBtn.addEventListener('click', cancelCrop);

            function handleFile(file) {
                if (!file || !file.type.startsWith('image/')) return;

                const reader = new FileReader();
                reader.onload = (e) => {
                    originalImage = e.target.result;
                    currentImage = originalImage;
                    updatePreview(currentImage);
                    processingControls.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }

            function updatePreview(imageData) {
                previewImages.innerHTML = '';
                dropText.style.display = 'none';
                deleteBtn.style.display = 'block';

                const img = document.createElement('img');
                img.src = imageData;
                img.id = 'previewImage';
                img.className = 'preview-image';
                img.style.maxWidth = '100%';
                img.style.maxHeight = '300px';
                previewImages.appendChild(img);

                processedImageData.value = imageData;
            }

            function clearPreview() {
                imageInput.value = '';
                previewImages.innerHTML = '';
                dropText.style.display = 'block';
                deleteBtn.style.display = 'none';
                processedImageData.value = '';
            }

            function resizeImage() {
                const width = parseInt(document.getElementById('resizeWidth').value);
                const height = parseInt(document.getElementById('resizeHeight').value);

                if (isNaN(width) || isNaN(height) || width <= 0 || height <= 0) {
                    alert('Please enter valid dimensions');
                    return;
                }

                const canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                const ctx = canvas.getContext('2d');

                const img = new Image();
                img.onload = function() {
                    ctx.drawImage(img, 0, 0, width, height);
                    currentImage = canvas.toDataURL('image/jpeg');
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        enableCropBtn.style.display = 'block';
                        cropBtn.style.display = 'none';
                        cancelCropBtn.style.display = 'none';
                    }
                };
                img.src = currentImage;
            }

            function resetImage() {
                if (originalImage) {
                    currentImage = originalImage;
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        enableCropBtn.style.display = 'block';
                        cropBtn.style.display = 'none';
                        cancelCropBtn.style.display = 'none';
                    }
                }
            }

            function rotateImage(degrees) {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                const img = new Image();
                img.onload = function() {
                    if (Math.abs(degrees) === 90 || Math.abs(degrees) === 270) {
                        canvas.width = img.height;
                        canvas.height = img.width;
                    } else {
                        canvas.width = img.width;
                        canvas.height = img.height;
                    }
                    ctx.translate(canvas.width / 2, canvas.height / 2);
                    ctx.rotate(degrees * Math.PI / 180);
                    ctx.drawImage(img, -img.width / 2, -img.height / 2);

                    currentImage = canvas.toDataURL('image/jpeg');
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        enableCropBtn.style.display = 'block';
                        cropBtn.style.display = 'none';
                        cancelCropBtn.style.display = 'none';
                    }
                };
                img.src = currentImage;
            }

            function enableCrop() {
                const image = document.getElementById('previewImage');
                if (!image) return;
                cropper = new Cropper(image, {
                    aspectRatio: NaN,
                    viewMode: 1,
                    guides: true,
                    highlight: true,
                    dragMode: 'crop'
                });
                enableCropBtn.style.display = 'none';
                cropBtn.style.display = 'inline-block';
                cancelCropBtn.style.display = 'inline-block';
            }

            function applyCrop() {
                if (!cropper) return;
                const canvas = cropper.getCroppedCanvas();
                if (!canvas) return;
                currentImage = canvas.toDataURL('image/jpeg');
                cropper.destroy();
                cropper = null;
                updatePreview(currentImage);
                enableCropBtn.style.display = 'block';
                cropBtn.style.display = 'none';
                cancelCropBtn.style.display = 'none';
            }

            function cancelCrop() {
                if (!cropper) return;
                cropper.destroy();
                cropper = null;
                updatePreview(currentImage);
                enableCropBtn.style.display = 'block';
                cropBtn.style.display = 'none';
                cancelCropBtn.style.display = 'none';
            }

        });
    </script>
}



    <style>
        .drag-area {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            cursor: pointer;    
            border-radius: 5px;
            transition: border-color 0.3s, background-color 0.3s;
            margin-bottom: 10px;
        }

            .drag-area.active {
                border-color: #007bff;
                background-color: #f8f9fa;
            }

        .preview-images img {
            max-width: 300px;
            max-height: 300px;
            width: auto;
            height: auto;
            object-fit: contain;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    </style>
}
