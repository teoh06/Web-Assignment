@model WebApplication2.Models.MenuItem
@{
    ViewBag.Title = "Add Menu Item";
}

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<div class="create-form-container">

    <form asp-action="Create" method="post" enctype="multipart/form-data" class="create-form">
        <div asp-validation-summary="ModelOnly" class="validation-summary"></div>

        <div class="form-group">
            <label asp-for="Name">Name</label>
            <input asp-for="Name" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Description">Description</label>
            <input asp-for="Description" />
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Price">Price</label>
            <input asp-for="Price" />
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="CategoryId">Category</label>
            <select asp-for="CategoryId" asp-items="@(new SelectList(ViewBag.Categories, "CategoryId", "Name"))"></select>
            <span asp-validation-for="CategoryId" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label>Images (Drag & Drop or Select Multiple)</label>
            <div id="drop-area" class="drag-area">
                <input type="file" id="imageInput" name="ImageFiles" accept="image/*" class="file-input" multiple />
                <div id="preview-content">
                    <span id="drop-text">Drag & drop images here, or click to select.</span>
                    <div id="preview-images" class="preview-images"></div>
                </div>
                <button type="button" id="deletePhotos" style="display:none;">Delete All</button>
            </div>
            <div class="url-input-label">Or enter image URL:</div>
            <input asp-for="PhotoURL" id="photoUrlInput" placeholder="Optional: Enter image URL if not uploading" />
            <span asp-validation-for="PhotoURL" class="text-danger"></span>
        </div>

        <button type="submit" class="submit-btn">
            Add Product
        </button>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <link href="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const dropArea = document.getElementById('drop-area');
            const imageInput = document.getElementById('imageInput');
            const dropText = document.getElementById('drop-text');
            const previewImages = document.getElementById('preview-images');
            const deleteBtn = document.getElementById('deletePhotos');
            const photoUrlInput = document.getElementById('photoUrlInput');
            let imageFiles = [];

            deleteBtn.style.display = 'none';

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                }, false);
            });
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.add('active'), false);
            });
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.remove('active'), false);
            });
            dropArea.addEventListener('drop', e => {
                const dt = e.dataTransfer;
                handleFiles(dt.files);
            }, false);
            imageInput.addEventListener('change', (e) => {
                handleFiles(e.target.files);
            });
            deleteBtn.addEventListener('click', e => {
                e.stopPropagation();
                clearPreviews();
            });
            function handleFiles(files) {
                imageFiles = Array.from(files);
                previewImages.innerHTML = '';
                if (imageFiles.length > 0) {
                    dropText.classList.add('hidden');
                    deleteBtn.style.display = 'flex';
                    imageFiles.forEach((file, idx) => {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.className = 'preview-image';
                            img.style.maxWidth = '120px';
                            img.style.margin = '4px';
                            img.setAttribute('data-idx', idx);
                            // TODO: Add cropper/rotate/flip controls here
                            previewImages.appendChild(img);
                        };
                        reader.readAsDataURL(file);
                    });
                    photoUrlInput.value = '';
                } else {
                    dropText.classList.remove('hidden');
                    deleteBtn.style.display = 'none';
                }
            }
            function clearPreviews() {
                imageInput.value = '';
                imageFiles = [];
                previewImages.innerHTML = '';
                dropText.classList.remove('hidden');
                deleteBtn.style.display = 'none';
            }
        });
    </script>
}