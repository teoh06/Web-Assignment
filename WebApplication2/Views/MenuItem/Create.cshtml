@model WebApplication2.Models.MenuItem
@{
    ViewBag.Title = "Add Menu Item";
    var categories = ViewBag.Categories as List<WebApplication2.Models.Category> ?? new List<WebApplication2.Models.Category>();
}

@if (TempData["Message"] != null)
{
    <div class="alert">@TempData["Message"]</div>
}


<div class="container mt-4">
    <div class="row">

        <!-- Left: Bulk Upload -->
        <div class="col-md-5">
            <h3>Bulk Upload Menu Items (TXT)</h3>
            <div id="bulkUploadMessage"></div>

            <form id="dummyTokenForm" style="display:none;">
                @Html.AntiForgeryToken()
            </form>

            <div id="txtDropArea" class="drag-area">
                <input type="file" id="txtFileInput" name="txtFile" accept=".txt" style="display:none;" />
                <div id="txtPreviewContent">
                    <span id="txtDropText">Drag & drop a TXT file here, or click to select.</span>
                </div>
            </div>
            <small class="form-text text-muted">
                TXT format: Name; Description; Price; CategoryName; OptionalPhotoURL <br />
                Example 1: Cheeseburger; Juicy beef burger with cheese; 12.50; Main Course; https://example.com/images/cheeseburger.jpg <br />
                Example 2: Chocolate Cake; Rich chocolate cake slice; 7.00; Desserts; https://example.com/images/chocolatecake.jpg
            </small>
            <br />
            <br />
            <h3>Multiple Photo Upload</h3>
            <form id="photoUploadForm" method="post" enctype="multipart/form-data" asp-controller="MenuItem" asp-action="UploadPhotos">
                @Html.AntiForgeryToken()
                <div id="photoDropArea" class="drag-area">
                    <input type="file" id="photoInput" name="photos" accept="image/*" multiple hidden />
                    <div id="photoDropText">Drag & drop images here or click to select (Max size: 2MB each)</div>
                    <div id="photoPreview" class="preview-images"></div>
                </div>
                <br />
                <button type="submit" class="btn btn-secondary">Upload Photos</button>
            </form>
        </div>

        <!-- Middle: OR -->
        <div class="col-md-2 text-center d-flex align-items-center justify-content-center">
            <h4>OR</h4>
        </div>

        <!-- Right: Add New Menu Item -->
        <div class="col-md-5">
            <h3>Add New Menu Item</h3>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMessage"]</div>
            }

            <form asp-action="Create" method="post" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="Name">Item Name</label>
                    <input asp-for="Name" class="form-control" placeholder="Enter menu item name" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Description">Description</label>
                    <textarea asp-for="Description" class="form-control" placeholder="Enter item description" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Price">Price</label>
                    <div class="input-group">
                        <span class="input-group-text">RM</span>
                        <input asp-for="Price" class="form-control" type="number" step="0.01" min="0.01" placeholder="0.00" />
                    </div>
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="CategoryId">Category</label>
                    <select asp-for="CategoryId" class="form-control" asp-items="@(new SelectList(categories, "CategoryId", "Name"))">
                        <option value="">-- Select Category --</option>
                    </select>
                    <span asp-validation-for="CategoryId" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="StockQuantity">Stock Quantity</label>
                    <input asp-for="StockQuantity" class="form-control" type="number" min="0" placeholder="0" />
                    <span asp-validation-for="StockQuantity" class="text-danger"></span>
                    <small class="form-text text-muted">Enter the available quantity in stock. Set to 0 if out of stock.</small>
                </div>

                <div class="form-group">
                    <label for="imageFile">Photo (Optional)</label>
                    <div class="image-upload-container">
                        <!-- Input Area -->
                        <div id="drop-area" class="drag-area" style="display:block;">
                            <input type="file" id="imageInput" name="imageFile" accept="image/*" class="file-input" />
                            <div id="drop-text" class="upload-prompt">
                                <i class="fas fa-cloud-upload-alt upload-icon"></i>
                                <p>Drag & drop an image here, or click to select.</p>
                                <small>(Max 2MB)</small>
                            </div>
                        </div>
                        <!-- Preview Area (Hidden initially) -->
                        <div id="preview-container" class="preview-container" style="display:none;">
                            <div class="preview-header d-flex align-items-center justify-content-between">
                                <h6 class="m-0">Preview</h6>
                                <button type="button" id="removeImageBtn" class="btn btn-outline-danger btn-sm ms-2">
                                    <i class="fas fa-trash-alt"></i> Remove Image
                                </button>
                            </div>
                            <div id="preview-images" class="preview-images"></div>
                            <div class="image-controls d-flex gap-2 justify-content-center mt-2">
                                <button type="button" id="rotateLeftBtn" class="btn btn-sm btn-light" title="Rotate Left">
                                    <i class="fas fa-undo"></i>
                                </button>
                                <button type="button" id="rotateRightBtn" class="btn btn-sm btn-light" title="Rotate Right">
                                    <i class="fas fa-redo"></i>
                                </button>
                                <button type="button" id="resizeBtn" class="btn btn-sm btn-light" title="Resize">
                                    <i class="fas fa-expand-arrows-alt"></i>
                                </button>
                                <button type="button" id="resetBtn" class="btn btn-sm btn-warning" title="Reset">
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                            </div>
                            <div class="resize-inputs d-flex gap-2 justify-content-center mt-2">
                                <input type="number" id="resizeWidth" class="form-control form-control-sm" placeholder="Width" min="10" max="2000" style="width:80px;" />
                                <input type="number" id="resizeHeight" class="form-control form-control-sm" placeholder="Height" min="10" max="2000" style="width:80px;" />
                            </div>
                        </div>
                    </div>
                    <small class="form-text text-muted">Supported formats: JPEG, PNG, GIF, WebP. Maximum size: 2MB.</small>
                    <span asp-validation-for="PhotoURL" class="text-danger"></span>
                    <input type="hidden" id="processedImageData" name="processedImageData" />
                </div>

                <button type="submit" class="btn btn-primary submit-btn">Create Item</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            /* ============================
             * BULK TXT UPLOAD (AJAX)
             * ============================ */
            const txtDropArea = document.getElementById('txtDropArea');
            const txtFileInput = document.getElementById('txtFileInput');
            const txtDropText = document.getElementById('txtDropText');
            const txtPreviewContent = document.getElementById('txtPreviewContent');
            const bulkUploadMessage = document.getElementById('bulkUploadMessage');

            // Prevent default on drag events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                txtDropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                });
            });
            // Visual feedback
            ['dragenter', 'dragover'].forEach(eventName => {
                txtDropArea.addEventListener(eventName, () => txtDropArea.classList.add('active'));
            });
            ['dragleave', 'drop'].forEach(eventName => {
                txtDropArea.addEventListener(eventName, () => txtDropArea.classList.remove('active'));
            });

            // Click to browse
            txtDropArea.addEventListener('click', () => txtFileInput.click());

            // File chosen by dialog
            txtFileInput.addEventListener('change', () => {
                if (txtFileInput.files.length > 0) {
                    handleTxtFile(txtFileInput.files[0]);
                }
            });

            // File dropped
            txtDropArea.addEventListener('drop', e => {
                if (e.dataTransfer.files.length > 0) {
                    handleTxtFile(e.dataTransfer.files[0]);
                }
            });

            function handleTxtFile(file) {
                if (!file) return;
                const isTxt = file.name.toLowerCase().endsWith('.txt') || file.type === 'text/plain';
                if (!isTxt) {
                    bulkUploadMessage.innerHTML = '<div class="alert alert-danger">Only .txt files are allowed.</div>';
                    return;
                }

                // Optional: quick preview of first few lines
                const reader = new FileReader();
                reader.onload = e => {
                    const text = (e.target.result || '').toString();
                    const lines = text.split(/\r?\n/).filter(Boolean).slice(0, 5);
                    txtPreviewContent.innerHTML = `
                        <div class="text-start">
                            <strong>Preview (${file.name}):</strong>
                            <pre style="white-space:pre-wrap;margin-top:6px;">${lines.join('\n')}</pre>
                        </div>`;
                    txtDropText && (txtDropText.style.display = 'none');
                };
                reader.readAsText(file);

                uploadTxtFile(file);
            }

            function uploadTxtFile(file) {
                const formData = new FormData();
                formData.append('txtFile', file);

                const tokenInput = document.querySelector('#dummyTokenForm input[name="__RequestVerificationToken"]');
                const token = tokenInput ? tokenInput.value : null;

                fetch('/MenuItem/BulkUpload', {
                    method: 'POST',
                    body: formData,
                    headers: token ? { 'RequestVerificationToken': token } : {}
                })
                .then(async res => {
                    const text = await res.text();
                    if (!res.ok) throw new Error(text || 'Server error');
                    bulkUploadMessage.innerHTML = `<div class="alert alert-success">${text}</div>`;
                })
                .catch(err => {
                    bulkUploadMessage.innerHTML = `<div class="alert alert-danger">Upload failed: ${err.message}</div>`;
                });
            }


            /* ============================
             * MULTIPLE PHOTO UPLOAD
             * ============================ */
            const photoDropArea = document.getElementById('photoDropArea');
            const photoInput = document.getElementById('photoInput');
            const photoPreview = document.getElementById('photoPreview');
            const photoDropText = document.getElementById('photoDropText');

            // Prevent default on drag events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                photoDropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                });
            });
            // Visual feedback (FIXED: attach to events, not at load)
            ['dragenter', 'dragover'].forEach(eventName => {
                photoDropArea.addEventListener(eventName, () => photoDropArea.classList.add('active'));
            });
            ['dragleave', 'drop'].forEach(eventName => {
                photoDropArea.addEventListener(eventName, () => photoDropArea.classList.remove('active'));
            });

            photoDropArea.addEventListener('click', () => photoInput.click());

            photoInput.addEventListener('change', () => {
                updatePreviews(photoInput.files);
            });

            photoDropArea.addEventListener('drop', e => {
                const dt = new DataTransfer();
                for (const file of e.dataTransfer.files) {
                    if (file.type.startsWith('image/') && file.size <= 2 * 1024 * 1024) {
                        dt.items.add(file);
                    }
                }
                photoInput.files = dt.files;
                updatePreviews(photoInput.files);
            });

            function updatePreviews(files) {
                photoPreview.innerHTML = "";
                for (const file of files) {
                    const reader = new FileReader();
                    reader.onload = e => {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        photoPreview.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                }
            }


            /* ============================
             * SINGLE IMAGE PROCESSING
             * ============================ */
            const dropArea = document.getElementById('drop-area');
            const imageInput = document.getElementById('imageInput');
            const dropText = document.getElementById('drop-text');
            const previewContainer = document.getElementById('preview-container');
            const previewImages = document.getElementById('preview-images');
            const removeImageBtn = document.getElementById('removeImageBtn');
            const processedImageData = document.getElementById('processedImageData');
            const rotateLeftBtn = document.getElementById('rotateLeftBtn');
            const rotateRightBtn = document.getElementById('rotateRightBtn');
            const resizeBtn = document.getElementById('resizeBtn');
            const resetBtn = document.getElementById('resetBtn');
            const resizeWidth = document.getElementById('resizeWidth');
            const resizeHeight = document.getElementById('resizeHeight');

            let originalImage = null;
            let currentImage = null;
            let cropper = null;

            // Prevent default drag events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                });
            });

            // Visual feedback for drag events
            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => {
                    if (!cropper) dropArea.classList.add('active');
                });
            });
            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.remove('active'));
            });

            // File handling
            dropArea.addEventListener('drop', e => {
                if (!cropper) {
                    const dt = e.dataTransfer;
                    if (dt.files.length > 0) {
                        imageInput.files = dt.files;
                        handleFile(dt.files[0]);
                    }
                }
            });

            dropArea.addEventListener('click', () => {
                if (!cropper) imageInput.click();
            });

            imageInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleFile(e.target.files[0]);
                }
            });

            // Remove image button
            removeImageBtn.addEventListener('click', () => {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
                clearPreview();
                dropArea.style.display = 'block';
                previewContainer.style.display = 'none';
            });

            // Rotate buttons
            rotateLeftBtn.addEventListener('click', () => rotateImage(-90));
            rotateRightBtn.addEventListener('click', () => rotateImage(90));
            // Resize button
            resizeBtn.addEventListener('click', resizeImage);
            // Reset button
            resetBtn.addEventListener('click', resetImage);

            function handleFile(file) {
                if (!file || !file.type.startsWith('image/')) return;
                if (file.size > 2 * 1024 * 1024) {
                    alert('Image size must be less than 2MB');
                    return;
                }

                const reader = new FileReader();
                reader.onload = (e) => {
                    originalImage = e.target.result;
                    currentImage = originalImage;
                    updatePreview(currentImage);
                    initCropper();
                };
                reader.readAsDataURL(file);
            }

            function updatePreview(imageData) {
                dropArea.style.display = 'none';
                previewContainer.style.display = 'block';

                previewImages.innerHTML = '';
                const img = document.createElement('img');
                img.src = imageData;
                img.id = 'previewImage';
                img.className = 'preview-image';
                previewImages.appendChild(img);
                processedImageData.value = imageData;
            }

            function clearPreview() {
                imageInput.value = '';
                previewImages.innerHTML = '';
                processedImageData.value = '';
                originalImage = null;
                currentImage = null;
            }

            function initCropper() {
                const image = document.getElementById('previewImage');
                if (!image) return;

                cropper = new Cropper(image, {
                    viewMode: 1,
                    dragMode: 'move',
                    aspectRatio: NaN,
                    autoCropArea: 1,
                    cropend: function() {
                        const canvas = cropper.getCroppedCanvas();
                        if (canvas) {
                            processedImageData.value = canvas.toDataURL('image/jpeg');
                        }
                    }
                });
            }

            function rotateImage(degrees) {
                if (!currentImage) return;
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();
                img.onload = function () {
                    if (Math.abs(degrees) === 90 || Math.abs(degrees) === 270) {
                        canvas.width = img.height;
                        canvas.height = img.width;
                    } else {
                        canvas.width = img.width;
                        canvas.height = img.height;
                    }
                    ctx.translate(canvas.width / 2, canvas.height / 2);
                    ctx.rotate(degrees * Math.PI / 180);
                    ctx.drawImage(img, -img.width / 2, -img.height / 2);
                    currentImage = canvas.toDataURL('image/jpeg');
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        initCropper();
                    }
                };
                img.src = currentImage;
            }

            function resizeImage() {
                const width = parseInt(resizeWidth.value);
                const height = parseInt(resizeHeight.value);
                if (isNaN(width) || isNaN(height) || width <= 0 || height <= 0) {
                    alert('Please enter valid dimensions');
                    return;
                }
                const canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                const ctx = canvas.getContext('2d');
                const img = new Image();
                img.onload = function () {
                    ctx.drawImage(img, 0, 0, width, height);
                    currentImage = canvas.toDataURL('image/jpeg');
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        initCropper();
                    }
                };
                img.src = currentImage;
            }

            function resetImage() {
                if (originalImage) {
                    currentImage = originalImage;
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        initCropper();
                    }
                }
            }

            // Form submission
            document.querySelector('form[asp-action="Create"]').addEventListener('submit', function(e) {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas();
                    if (canvas) {
                        processedImageData.value = canvas.toDataURL('image/jpeg');
                    }
                    // Clear the file input since we're using the processed data
                    imageInput.value = '';
                }
            });
        });
    </script>

    <style>
        .image-upload-container {
            position: relative;
            margin-bottom: 1rem;
        }

        .drag-area {
            border: 2px dashed #ccc;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .drag-area.active {
            border-color: #007bff;
        }

        .drag-area.disabled {
            pointer-events: none;
            opacity: 0.6;
        }

        .upload-prompt {
            color: #666;
        }

        .upload-icon {
            font-size: 2rem;
            color: #007bff;
            margin-bottom: 1rem;
        }

        .preview-container {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 1rem;
        }

        .preview-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #dee2e6;
        }

        .btn-close {
            background: none;
            border: none;
            color: #dc3545;
            font-size: 1.2rem;
            padding: 0.25rem;
            cursor: pointer;
            transition: color 0.2s;
        }

        .btn-close:hover {
            color: #c82333;
        }

        .preview-images {
            text-align: center;
            margin-bottom: 1rem;
        }

        .preview-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 4px;
        }

        .image-controls {
            display: flex;
            gap: 0.5rem;
        }

        #removeImageBtn {
            font-size: 0.875rem;
            padding: 0.25rem 0.5rem;
        }

        #removeImageBtn i {
            margin-right: 0.25rem;
        }
    </style>
}
