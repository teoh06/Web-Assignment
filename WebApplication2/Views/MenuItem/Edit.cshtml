@model WebApplication2.Models.MenuItem
@{
    ViewBag.Title = "Edit Menu Item";
    var categories = ViewBag.Categories as List<WebApplication2.Models.Category> ?? new List<WebApplication2.Models.Category>();
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <h3>Edit Menu Item</h3>
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <h4>Validation Errors:</h4>
                    <ul>
                        @foreach (var modelState in ViewData.ModelState.Values)
                        {
                            foreach (var error in modelState.Errors)
                            {
                                <li>@error.ErrorMessage</li>
                            }
                        }
                    </ul>
                </div>
            }

            <form asp-action="Edit" method="post" enctype="multipart/form-data">
                <input type="hidden" asp-for="MenuItemId" />
                <input type="hidden" name="removeImage" id="removeImage" value="false" />
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="row">
                    <!-- Left Column: Item Details -->
                    <div class="col-md-7">
                        <div class="form-group mb-3">
                            <label asp-for="Name">Item Name</label>
                            <input asp-for="Name" class="form-control" placeholder="Enter menu item name" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Description">Description</label>
                            <textarea asp-for="Description" class="form-control" placeholder="Enter item description" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Price">Price</label>
                            <div class="input-group">
                                <span class="input-group-text">RM</span>
                                <input asp-for="Price" class="form-control" type="number" step="0.01" min="0.01" placeholder="0.00" />
                            </div>
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="CategoryId">Category</label>
                            <select asp-for="CategoryId" class="form-control" asp-items="@(new SelectList(categories, "CategoryId", "Name"))">
                                <option value="">-- Select Category --</option>
                            </select>
                            <span asp-validation-for="CategoryId" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="StockQuantity">Stock Quantity</label>
                            <input asp-for="StockQuantity" class="form-control" type="number" min="0" placeholder="Enter stock quantity" />
                            <span asp-validation-for="StockQuantity" class="text-danger"></span>
                            <small class="form-text text-muted">Enter the available quantity in stock. Set to 0 if out of stock.</small>
                        </div>
                    </div>

                    <!-- Right Column: Photo Upload -->
                    <div class="col-md-5">
                        <div class="form-group">
                            <label for="imageFile">Photo</label>
                            <div class="image-upload-container">
                                <!-- Input Area -->
                                <div id="drop-area" class="drag-area" style="display: @(string.IsNullOrEmpty(Model.PhotoURL) ? "block" : "none");">
                                    <input type="file" id="imageInput" name="imageFile" accept="image/*" class="file-input" style="display:none;" />
                                    <div id="drop-text" class="upload-prompt">
                                        <i class="fas fa-cloud-upload-alt upload-icon"></i>
                                        <p>Drag & drop an image here, or click to select.</p>
                                        <small>(Max 2MB)</small>
                                    </div>
                                </div>

                                <!-- Preview Area -->
                                <div id="preview-container" class="preview-container" style="display: @(string.IsNullOrEmpty(Model.PhotoURL) ? "none" : "block");">
                                    <div class="preview-header d-flex align-items-center justify-content-between">
                                        <h6 class="m-0">Current Image</h6>
                                        <button type="button" id="removeImageBtn" class="btn btn-outline-danger btn-sm ms-2">
                                            <i class="fas fa-trash-alt"></i> Remove
                                        </button>
                                    </div>
                                    <div id="preview-images" class="preview-images">
                                        @if (!string.IsNullOrEmpty(Model.PhotoURL))
                                        {
                                            <img src="/images/@Model.PhotoURL" class="preview-image" id="previewImage" alt="Current Image" />
                                        }
                                    </div>
                                    <div class="image-controls d-flex gap-2 justify-content-center mt-2">
                                        <button type="button" id="rotateLeftBtn" class="btn btn-sm btn-light" title="Rotate Left">
                                            <i class="fas fa-undo"></i>
                                        </button>
                                        <button type="button" id="rotateRightBtn" class="btn btn-sm btn-light" title="Rotate Right">
                                            <i class="fas fa-redo"></i>
                                        </button>
                                        <button type="button" id="resizeBtn" class="btn btn-sm btn-light" title="Resize">
                                            <i class="fas fa-expand-arrows-alt"></i>
                                        </button>
                                        <button type="button" id="resetBtn" class="btn btn-sm btn-warning" title="Reset">
                                            <i class="fas fa-sync-alt"></i>
                                        </button>
                                    </div>
                                    <div class="resize-inputs d-flex gap-2 justify-content-center mt-2">
                                        <input type="number" id="resizeWidth" class="form-control form-control-sm" placeholder="Width" min="10" max="2000" style="width:80px;" />
                                        <input type="number" id="resizeHeight" class="form-control form-control-sm" placeholder="Height" min="10" max="2000" style="width:80px;" />
                                    </div>
                                </div>
                            </div>
                            <small class="form-text text-muted">Supported formats: JPEG, PNG, GIF, WebP. Maximum size: 2MB.</small>
                            <span asp-validation-for="PhotoURL" class="text-danger"></span>
                            <input type="hidden" id="processedImageData" name="processedImageData" />
                        </div>
                    </div>
                </div>

                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary submit-btn">Save Changes</button>
                    <br>
                    <br>
                    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const dropArea = document.getElementById('drop-area');
            const imageInput = document.getElementById('imageInput');
            const dropText = document.getElementById('drop-text');
            const previewContainer = document.getElementById('preview-container');
            const previewImages = document.getElementById('preview-images');
            const removeImageBtn = document.getElementById('removeImageBtn');
            const removeImageInput = document.getElementById('removeImage');
            const processedImageData = document.getElementById('processedImageData');
            const rotateLeftBtn = document.getElementById('rotateLeftBtn');
            const rotateRightBtn = document.getElementById('rotateRightBtn');
            const resizeBtn = document.getElementById('resizeBtn');
            const resetBtn = document.getElementById('resetBtn');
            const resizeWidth = document.getElementById('resizeWidth');
            const resizeHeight = document.getElementById('resizeHeight');

            let originalImage = null;
            let currentImage = null;
            let cropper = null;

            // Initialize cropper if there's an existing image
            if (previewImages.querySelector('img')) {
                initCropper();
            }

            // Drag & drop events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, e => {
                    e.preventDefault();
                    e.stopPropagation();
                });
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.add('active'));
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, () => dropArea.classList.remove('active'));
            });

            dropArea.addEventListener('drop', e => {
                const dt = e.dataTransfer;
                if (dt.files.length > 0) {
                    imageInput.files = dt.files;
                    handleFile(dt.files[0]);
                }
            });

            dropArea.addEventListener('click', () => imageInput.click());

            imageInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleFile(e.target.files[0]);
                }
            });

            // Remove image button
            removeImageBtn.addEventListener('click', () => {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
                clearPreview();
                removeImageInput.value = 'true';
                dropArea.style.display = 'block';
                previewContainer.style.display = 'none';
            });

            // Image processing buttons
            rotateLeftBtn.addEventListener('click', () => rotateImage(-90));
            rotateRightBtn.addEventListener('click', () => rotateImage(90));
            resizeBtn.addEventListener('click', resizeImage);
            resetBtn.addEventListener('click', resetImage);

            function handleFile(file) {
                if (!file || !file.type.startsWith('image/')) return;
                if (file.size > 2 * 1024 * 1024) {
                    alert('Image size must be less than 2MB');
                    return;
                }

                removeImageInput.value = 'false';
                const reader = new FileReader();
                reader.onload = (e) => {
                    originalImage = e.target.result;
                    currentImage = originalImage;
                    updatePreview(currentImage);
                    initCropper();
                };
                reader.readAsDataURL(file);
            }

            function updatePreview(imageData) {
                dropArea.style.display = 'none';
                previewContainer.style.display = 'block';
                previewImages.innerHTML = '';
                const img = document.createElement('img');
                img.src = imageData;
                img.id = 'previewImage';
                img.className = 'preview-image';
                previewImages.appendChild(img);
                processedImageData.value = imageData;
            }

            function clearPreview() {
                imageInput.value = '';
                previewImages.innerHTML = '';
                processedImageData.value = '';
                originalImage = null;
                currentImage = null;
            }

            function initCropper() {
                const image = document.getElementById('previewImage');
                if (!image) return;

                if (cropper) {
                    cropper.destroy();
                }

                cropper = new Cropper(image, {
                    viewMode: 1,
                    dragMode: 'move',
                    aspectRatio: NaN,
                    autoCropArea: 1,
                    cropend: function() {
                        const canvas = cropper.getCroppedCanvas();
                        if (canvas) {
                            processedImageData.value = canvas.toDataURL('image/jpeg');
                        }
                    }
                });
            }

            function rotateImage(degrees) {
                if (!currentImage) return;
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();
                img.onload = function() {
                    if (Math.abs(degrees) === 90 || Math.abs(degrees) === 270) {
                        canvas.width = img.height;
                        canvas.height = img.width;
                    } else {
                        canvas.width = img.width;
                        canvas.height = img.height;
                    }
                    ctx.translate(canvas.width / 2, canvas.height / 2);
                    ctx.rotate(degrees * Math.PI / 180);
                    ctx.drawImage(img, -img.width / 2, -img.height / 2);
                    currentImage = canvas.toDataURL('image/jpeg');
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        initCropper();
                    }
                };
                img.src = currentImage;
            }

            function resizeImage() {
                const width = parseInt(resizeWidth.value);
                const height = parseInt(resizeHeight.value);
                if (isNaN(width) || isNaN(height) || width <= 0 || height <= 0) {
                    alert('Please enter valid dimensions');
                    return;
                }
                const canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                const ctx = canvas.getContext('2d');
                const img = new Image();
                img.onload = function() {
                    ctx.drawImage(img, 0, 0, width, height);
                    currentImage = canvas.toDataURL('image/jpeg');
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        initCropper();
                    }
                };
                img.src = currentImage;
            }

            function resetImage() {
                if (originalImage) {
                    currentImage = originalImage;
                    updatePreview(currentImage);
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                        initCropper();
                    }
                }
            }

            // Form submission
            document.querySelector('form').addEventListener('submit', function(e) {
                console.log('Form submitted');
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas();
                    if (canvas) {
                        processedImageData.value = canvas.toDataURL('image/jpeg');
                    }
                }
            });
        });
    </script>
    <style>
        .image-upload-container {
            position: relative;
            margin-bottom: 1rem;
        }

        .drag-area {
            border: 2px dashed #ccc;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .drag-area.active {
            border-color: #007bff;
        }

        .upload-prompt {
            color: #666;
        }

        .upload-icon {
            font-size: 2rem;
            color: #007bff;
            margin-bottom: 1rem;
        }

        .preview-container {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 1rem;
        }

        .preview-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #dee2e6;
        }

        .preview-images {
            text-align: center;
            margin-bottom: 1rem;
        }

        .preview-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 4px;
        }

        .image-controls {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
        }

        #removeImageBtn {
            font-size: 0.875rem;
            padding: 0.25rem 0.5rem;
        }

        #removeImageBtn i {
            margin-right: 0.25rem;
        }
    </style>
}
