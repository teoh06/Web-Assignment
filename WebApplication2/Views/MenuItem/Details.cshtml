@model WebApplication2.Models.MenuItemDetailsVM
@using WebApplication2.Models;
@{
    ViewBag.Title = "Menu Item Details";
    var menuItem = Model.MenuItem;
    var db = Context.RequestServices.GetService(typeof(DB)) as DB;
    var options = db.PersonalizationOptions.Where(o => o.CategoryId == menuItem.CategoryId).ToList();
    bool isFav = false;
    if (User.Identity.IsAuthenticated)
    {
        isFav = db.MenuItemFavorites.Any(f => f.MenuItemId == menuItem.MenuItemId && f.MemberEmail == User.Identity.Name);
    }
}
@if (TempData["EditMessage"] != null)
{
    <div class="alert alert-info" role="alert">
        @Html.Raw(TempData["EditMessage"])
    </div>
}
<div class="menuitem-details-main">
    <div class="menuitem-details-flex">
        <div class="menuitem-gallery-card">
            <div id="menuitem-gallery" class="swiper-container">
                <div class="swiper-wrapper">
                    @if (menuItem.MenuItemImages != null && menuItem.MenuItemImages.Count > 0)
                    {
                        foreach (var img in menuItem.MenuItemImages)
                        {
                            <div class="swiper-slide">
                                <img src="/images/@img.FileName" class="img-fluid menuitem-photo" alt="@menuItem.Name">
                            </div>
                        }
                    }
                    else if (!string.IsNullOrEmpty(menuItem.PhotoURL))
                    {
                        <div class="swiper-slide">
                            <img src="@(menuItem.PhotoURL.StartsWith("http") ? menuItem.PhotoURL : "/images/" + menuItem.PhotoURL)" class="img-fluid menuitem-photo" alt="@menuItem.Name">
                        </div>
                    }
                </div>
                <div class="swiper-pagination"></div>
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
            </div>
        </div>
        <div class="menuitem-info-card">
            <h2 class="menuitem-title">@menuItem.Name</h2>
            <div class="menuitem-category">@menuItem.Category?.Name</div>
            <div class="menuitem-price">@menuItem.Price.ToString("C", new System.Globalization.CultureInfo("en-MY"))</div>
            <div class="menuitem-desc">@menuItem.Description</div>
            <div class="menuitem-stock">
                <span class="stock-label">Stock:</span>
                <span class="stock-value @(menuItem.StockQuantity <= 0 ? "text-danger" : menuItem.StockQuantity < 10 ? "text-warning" : "text-success")">@menuItem.StockQuantity</span>
                @if (menuItem.StockQuantity <= 0)
                {
                    <span class="badge bg-danger ms-2">Out of Stock</span>
                }
                else if (menuItem.StockQuantity < 10)
                {
                    <span class="badge bg-warning text-dark ms-2">Low Stock</span>
                }
                else
                {
                    <span class="badge bg-success ms-2">In Stock</span>
                }
            </div>
            <hr>
            @if (User.IsInRole("Member"))
            {
                <div class="menuitem-actions">
                    <button id="favoriteBtn" class="btn btn-outline-danger btn-sm @(isFav ? "btn-danger" : "")" data-id="@menuItem.MenuItemId" onclick="toggleFavorite(this); return false;">
                        <span id="fav-icon">@(isFav ? "♥" : "♡")</span> Favorite
                    </button>
                    <div class="rating-summary mb-2">
                        <span id="avg-rating" class="fw-bold">@Model.AverageRating.ToString("0.0")</span> / 5
                        <span class="ms-2">(@Model.RatingsCount ratings)</span>
                    </div>
                    <div class="mb-2">
                        <label>Rate this item:</label>
                        <span id="user-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <span class="star" data-value="@i" style="font-size:1.5em; cursor:pointer; color:#d4aa46;">☆</span>
                            }
                        </span>
                    </div>
                </div>
            }
            @if (User.IsInRole("Admin"))
            {
                <a href="@Url.Action("Edit", new { id = menuItem.MenuItemId })" class="btn btn-primary">Edit</a>
            }
            <a href="@Url.Action("Index")" class="btn btn-secondary">Back to List</a>
            @if (User.IsInRole("Member"))
            {
                <form asp-controller="Cart" asp-action="Add" method="post" id="addToCartForm" class="add-to-cart-form">
                    <input type="hidden" name="menuItemId" value="@menuItem.MenuItemId" />
                    <div class="quantity-row mb-2">
                        <label>Quantity:</label>
                        <input type="number" name="quantity" value="1" min="1" max="100" class="form-control d-inline-block" style="width:70px; margin-left:10px;" />
                    </div>
                    @if (options.Any())
                    {
                        <div class="mb-2">
                            <label>Personalization:</label>
                            <div class="personalization-options">
                                @foreach (var opt in options)
                                {
                                    <label class="me-2">
                                        <input type="checkbox" name="personalizations" value="@opt.Name" /> @opt.Name
                                    </label>
                                }
                            </div>
                        </div>
                    }
                    <input type="hidden" name="SelectedPersonalizations" id="SelectedPersonalizations" />
                    <button type="submit" class="btn btn-success" onclick="collectPersonalizations(event)">Add to Cart</button>
                </form>
            }
        </div>
    </div>
    <div class="menuitem-comments-card card mt-4">
        <div class="card-header my-muted">Comments</div>
        <div class="card-body">
            <div id="comments-list">
                @foreach (var c in Model.Comments)
                {
                    <div class="mb-2 comment-item"><b>@c.Member?.Name (Foodie Voice)</b>: @c.Content <span class="my-muted small">(@c.CommentedAt.ToShortTimeString())</span></div>
                }
            </div>
            @if (User.Identity!.IsAuthenticated)
            {
                <form id="comment-form" onsubmit="addComment(event)">
                    <div class="input-group">
                        <input type="text" id="comment-input" class="form-control" placeholder="Add a comment..." maxlength="200" required />
                        <button type="submit" class="btn btn-outline-primary">Post</button>
                    </div>
                </form>
            }
            else
            {
                <div class="my-muted">Login to add a comment.</div>
            }
        </div>
    </div>
</div>

@section Scripts {
<script src="https://unpkg.com/swiper@10/swiper-bundle.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/swiper@10/swiper-bundle.min.css" />
<script>
    var swiper = new Swiper('#menuitem-gallery', {
        loop: true,
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        slidesPerView: 1,
        spaceBetween: 10,
    });
function getAntiForgeryToken() {
    // Try to get the token from the form if present
    var token = $('input[name="__RequestVerificationToken"]').val();
    if (!token) {
        // Try to get from layout if not present in this form
        token = $("form input[name='__RequestVerificationToken']").first().val();
    }
    return token;
}
function refreshFavoriteList() {
    if ($('#favoriteList').length) {
        $.get('/Account/GetFavoriteListPartial', function(html) {
            $('#favoriteList').html(html);
        });
    }
}
function toggleFavorite(btn) {
    var icon = document.getElementById('fav-icon');
    var menuItemId = $(btn).data('id');
    var token = getAntiForgeryToken();
    $.ajax({
        url: '/MenuItem/ToggleFavorite',
        type: 'POST',
        data: {
            menuItemId: menuItemId,
            __RequestVerificationToken: token
        },
        xhrFields: { withCredentials: true },
        success: function(data) {
            if (data.favorited) {
                icon.textContent = '♥';
                btn.classList.remove('btn-outline-danger');
                btn.classList.add('btn-danger');
            } else {
                icon.textContent = '♡';
                btn.classList.remove('btn-danger');
                btn.classList.add('btn-outline-danger');
            }
            refreshFavoriteList();
            if (typeof showFeedback === 'function') showFeedback(data.favorited ? 'Added to favorites!' : 'Removed from favorites!', 'info');
        },
        error: function(xhr) {
            alert('Failed to update favorite. Please log in and try again.');
        }
    });
}
// Star rating AJAX
const stars = document.querySelectorAll('.star');
stars.forEach(star => {
    star.addEventListener('mouseover', function() {
        const val = parseInt(this.getAttribute('data-value'));
        stars.forEach((s, i) => s.textContent = i < val ? '★' : '☆');
    });
    star.addEventListener('mouseout', function() {
        stars.forEach(s => s.textContent = '☆');
    });
    star.addEventListener('click', function() {
        const val = this.getAttribute('data-value');
        fetch('@Url.Action("AddRating", "MenuItem")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
            body: `menuItemId=@menuItem.MenuItemId&value=${val}`
        })
        .then(r => r.json())
        .then(data => {
            document.getElementById('avg-rating').textContent = data.avg.toFixed(1);
            document.querySelector('.rating-summary .ms-2').textContent = `(${data.count} ratings)`;
            alert('Thank you for rating ' + val + ' stars!');
        });
    });
});
// Comment AJAX
function addComment(e) {
    e.preventDefault();
    var input = document.getElementById('comment-input');
    var list = document.getElementById('comments-list');
    if (input.value.trim()) {
        fetch('@Url.Action("AddComment", "MenuItem")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
            body: `menuItemId=@menuItem.MenuItemId&content=${encodeURIComponent(input.value)}`
        })
        .then(r => r.json())
        .then(data => {
            var div = document.createElement('div');
            div.className = 'mb-2 comment-item';
            div.innerHTML = `<b>You</b>: ${data.content} <span class='my-muted small'>(just now)</span>`;
            list.prepend(div);
            input.value = '';
        });
    }
}
function collectPersonalizations(e) {
    var checked = Array.from(document.querySelectorAll('input[name="personalizations"]:checked')).map(x => x.value);
    document.getElementById('SelectedPersonalizations').value = checked.join(',');
}
document.getElementById('addToCartForm')?.addEventListener('submit', function(e) {
    e.preventDefault();
    collectPersonalizations(e);
    var form = e.target;
    var formData = new FormData(form);
    var token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
    fetch(form.action, {
        method: 'POST',
        headers: {
            'RequestVerificationToken': token
        },
        body: new URLSearchParams([...formData])
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(data.message);
        } else {
            alert(data.message || 'Failed to add to cart.');
        }
    })
    .catch(error => {
        console.error('Error adding to cart:', error);
        alert('Something went wrong.');
    });
})
</script>
}
