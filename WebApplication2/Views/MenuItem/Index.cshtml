@model WebApplication2.Models.MenuItemIndexVM
@using System.Globalization;
@using System.Linq

@{
    ViewBag.Title = "Menu";
    var isMember = User.IsInRole("Member");
    var isAdmin = User.IsInRole("Admin");
}

<div class="menu-container">
    <div class="filter-section">
        <form id="filterForm" class="filter-form">
            <div class="input-group search-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" name="search" id="searchInput" value="@Context.Request.Query["search"]"
                       placeholder="Search dishes..." class="form-control search-input" />
            </div>
            <div class="filters-row">
                <select name="categoryId" id="categorySelect" class="form-control category-select">
                    <option value="">All Categories</option>
                    @foreach (var cat in Model.Categories)
                    {
                        var isSelected = Context.Request.Query["categoryId"] == cat.CategoryId.ToString();
                        <option value="@cat.CategoryId" selected="@isSelected">@cat.Name</option>
                    }
                </select>
                <div class="price-filters">
                    <input type="number" name="minPrice" id="minPriceInput"
                           value="@Context.Request.Query["minPrice"]" placeholder="Min Price"
                           class="form-control price-input" min="0" step="0.01" />
                    <input type="number" name="maxPrice" id="maxPriceInput"
                           value="@Context.Request.Query["maxPrice"]" placeholder="Max Price"
                           class="form-control price-input" min="0" step="0.01" />
                </div>
                <div class="filter-buttons">
                    <button type="submit" class="btn btn-primary filter-btn">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                    <button type="button" id="clearFilters" class="btn btn-secondary clear-btn">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
            </div>
        </form>
    </div>

    @if (isAdmin)
    {
        <div class="admin-actions mb-4 d-flex justify-content-between align-items-center">
            <div>
                <a class="btn btn-success add-product-btn" asp-controller="MenuItem" asp-action="Create">
                    <i class="fas fa-plus"></i> Add New Product
                </a>
                <button id="bulkDeleteBtn" class="btn btn-danger ms-2 bulk-delete-btn" style="display:none;">
                    <i class="fas fa-trash"></i> Delete Selected Items
                </button>
            </div>
            <div class="selected-count" style="display:none;">
                <span class="badge bg-danger" id="selectedCount">0 items selected</span>
            </div>
        </div>
    }

    @using System.Text
    @functions {
        string GetStarHtml(double avg)
        {
            int full = (int)Math.Floor(avg);
            bool half = avg - full >= 0.5;
            int empty = 5 - full - (half ? 1 : 0);
            var html = new StringBuilder();
            for (int i = 0; i < full; i++) html.Append("<span class='star-full'>&#9733;</span>");
            if (half) html.Append("<span class='star-half'>&#9733;</span>");
            for (int i = 0; i < empty; i++) html.Append("<span class='star-empty'>&#9734;</span>");
            return html.ToString();
        }
    }

    <div class="menu-items-grid" id="menuItemsGrid">
        @foreach (var item in Model.MenuItems)
        {
            var ratings = item.MenuItemRatings ?? new List<WebApplication2.Models.MenuItemRating>();
            double avgRating = ratings.Count > 0 ? ratings.Average(r => r.Value) : 0;
            <div class="menu-item-card" data-aos="fade-up">
                <div class="item-image">
                    @if (isAdmin)
                    {
                        <label class="admin-select-checkbox">
                            <input type="checkbox" class="item-checkbox" data-item-id="@item.MenuItemId" data-item-name="@item.Name" />
                            <span class="custom-checkbox"></span>
                        </label>
                    }
                    <a asp-controller="MenuItem" asp-action="Details" asp-route-id="@item.MenuItemId">
                        <img src="~/Images/@(item.PhotoURL ?? "default.jpg")" alt="@item.Name" loading="lazy" />
                    </a>
                    <div class="item-badges">
                        <span class="item-price">@item.Price.ToString("C", new CultureInfo("en-MY"))</span>
                        <span class="item-rating">
                            @Html.Raw(GetStarHtml(avgRating))
                            <span class="avg-rating">@avgRating.ToString("0.0")</span>
                        </span>
                    </div>
                    @if (isAdmin && !item.IsActive)
                    {
                        <span class="status-badge inactive-badge">Inactive</span>
                    }
                    @if (item.StockQuantity <= 0)
                    {
                        <span class="status-badge out-of-stock-badge">Out of Stock</span>
                    }
                    else if (item.StockQuantity < 10)
                    {
                        <span class="status-badge low-stock-badge">Low Stock: @item.StockQuantity left</span>
                    }
                </div>
                <div class="item-info">
                    <h3 class="item-name">@item.Name</h3>
                    <p class="item-category">@item.Category?.Name</p>
                    <p class="item-stock">Stock: @item.StockQuantity</p>
                    <div class="item-actions">
                        @if (isAdmin)
                        {
                            <div class="admin-buttons">
                                <form asp-action="ToggleActive" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.MenuItemId" />
                                    <button type="submit" class="btn btn-sm @(item.IsActive ? "btn-secondary" : "btn-success") toggle-btn">
                                        @(item.IsActive ? "Deactivate" : "Activate")
                                    </button>
                                </form>
                                <a class="btn btn-sm btn-warning edit-btn" asp-action="Edit" asp-route-id="@item.MenuItemId">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a class="btn btn-sm btn-danger delete-btn" asp-action="Delete" asp-route-id="@item.MenuItemId">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        }
                        else if (isMember)
                        {
                            <form asp-controller="Cart" asp-action="Add" method="post" class="add-to-cart-form">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="menuItemId" value="@item.MenuItemId" />
                                <div class="quantity-control">
                                    <input type="number" name="quantity" value="1" min="1" max="100" class="form-control quantity-input" />
                                    <button type="submit" class="btn btn-primary add-to-cart-btn">
                                        <i class="fas fa-cart-plus"></i> Add to Cart
                                    </button>
                                </div>
                            </form>
                        }
                        <a class="btn btn-sm btn-info details-btn" asp-action="Details" asp-route-id="@item.MenuItemId">
                            <i class="fas fa-info-circle"></i> Details
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <div id="loadingIndicator" class="loading-indicator">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

<style>
    .menu-container {
        max-width: 1600px;
        margin: 0 auto;
        padding: 32px 16px;
    }

    .filter-section {
        background: var(--bg-secondary);
        padding: 32px 24px;
        border-radius: 18px;
        box-shadow: var(--shadow-md);
        margin-bottom: 40px;
    }

    .filter-form {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }

    .search-group {
        max-width: 700px;
    }

    .search-input {
        border-radius: 0 28px 28px 0;
        font-size: 1.15rem;
        padding: 16px 24px;
    }

    .input-group-text {
        border-radius: 28px 0 0 28px;
        background: var(--primary-brand);
        color: white;
        border: none;
        padding: 0 24px;
        font-size: 1.2rem;
    }

    .filters-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        align-items: center;
    }

    .category-select,
    .price-input {
        border-radius: 28px;
        padding: 12px 24px;
        border: 1px solid var(--border-color);
        background: var(--bg-primary);
        color: var(--text-primary);
        font-size: 1.05rem;
    }

    .price-filters {
        display: flex;
        gap: 16px;
    }

    .filter-btn,
    .clear-btn {
        border-radius: 28px;
        padding: 12px 28px;
        font-size: 1.05rem;
        transition: all 0.3s ease;
    }

        .filter-btn:hover,
        .clear-btn:hover {
            transform: translateY(-2px);
        }

    .menu-items-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));
        gap: 32px;
        padding: 24px 0;
    }

    .menu-item-card {
        border-radius: 18px;
        overflow: hidden;
        box-shadow: var(--shadow-md);
        transition: all 0.3s ease;
        position: relative;
        min-height: 420px;
        display: flex;
        flex-direction: column;
        animation: cardAppear 0.5s ease-out;
    }

        .menu-item-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .menu-item-card.selected {
            box-shadow: 0 0 0 3px var(--primary-brand);
        }

    .item-image {
        position: relative;
        width: 100%;
        height: 220px;
        overflow: hidden;
        background: var(--bg-primary);
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .item-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
            border-radius: 0;
        }

        .item-image:hover img {
            transform: scale(1.08);
        }

    .item-badges {
        position: absolute;
        bottom: 16px;
        left: 16px;
        right: 16px;
        display: flex;
        flex-direction: row;
        gap: 12px;
        justify-content: flex-start;
        align-items: flex-end;
        z-index: 2;
    }

    .item-price {
        background: rgba(0, 0, 0, 0.85);
        color: #fff;
        padding: 7px 18px;
        border-radius: 22px;
        font-weight: bold;
        font-size: 1.08rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.12);
        z-index: 3;
        backdrop-filter: blur(5px);
        margin-bottom: 0;
    }

    .item-rating {
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 7px 18px;
        border-radius: 22px;
        font-weight: bold;
        font-size: 1.05rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.12);
        backdrop-filter: blur(5px);
        margin-bottom: 0;
    }

    .status-badge {
        position: absolute;
        top: 12px;
        right: 12px;
        padding: 7px 18px;
        border-radius: 22px;
        font-size: 0.95em;
        font-weight: bold;
        z-index: 4;
        backdrop-filter: blur(5px);
    }

    .inactive-badge {
        background-color: rgba(108, 117, 125, 0.9);
        color: white;
    }

    .out-of-stock-badge {
        background-color: rgba(220, 53, 69, 0.9);
        color: white;
    }

    .low-stock-badge {
        background-color: rgba(255, 193, 7, 0.9);
        color: #212529;
    }

    .item-info {
        padding: 28px 22px 18px 22px;
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }

    .item-name {
        font-size: 1.25rem;
        font-weight: bold;
        margin: 0 0 12px 0;
        color: var(--text-primary);
        word-break: break-word;
        line-height: 1.2;
    }

    .item-category {
        color: var(--text-secondary);
        font-size: 1.05rem;
        margin-bottom: 10px;
        margin-top: 2px;
        word-break: break-word;
    }

    .item-stock {
        color: var(--text-secondary);
        font-size: 1.05rem;
        margin-bottom: 18px;
        margin-top: 2px;
    }

    .item-actions {
        display: flex;
        flex-direction: column;
        gap: 14px;
        margin-top: auto;
    }

    .admin-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .quantity-control {
        display: flex;
        gap: 12px;
    }

    .quantity-input {
        width: 90px;
        text-align: center;
        border-radius: 22px;
        font-size: 1.05rem;
    }

    .add-to-cart-btn {
        flex: 1;
        border-radius: 22px;
        font-size: 1.05rem;
        transition: all 0.3s ease;
    }

        .add-to-cart-btn:hover {
            transform: translateY(-2px);
        }

    .details-btn {
        width: 100%;
        border-radius: 22px;
        font-size: 1.05rem;
    }

    .star-full {
        color: #ffd700;
    }

    .star-half {
        color: #ffd700;
        opacity: 0.6;
    }

    .star-empty {
        color: #b0b8c1;
    }

    .loading-indicator {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        background: var(--bg-primary);
        padding: 24px;
        border-radius: 12px;
        box-shadow: var(--shadow-lg);
    }

    .empty-state {
        text-align: center;
        padding: 48px;
        color: var(--text-secondary);
    }

    @@keyframes cardAppear {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 900px) {
        .menu-items-grid {
            grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
            gap: 18px;
        }

        .menu-item-card {
            min-height: 340px;
        }

        .item-image {
            height: 160px;
        }

        .item-info {
            padding: 18px 10px 12px 10px;
        }
    }

    @@media (max-width: 600px) {
        .menu-container {
            padding: 8px 2px;
        }

        .filter-section {
            padding: 12px 4px;
        }

        .menu-items-grid {
            grid-template-columns: 1fr;
            gap: 12px;
        }

        .menu-item-card {
            min-height: 220px;
        }

        .item-image {
            height: 100px;
        }

        .item-info {
            padding: 8px 4px 6px 4px;
        }
    }

    .admin-select-checkbox {
        position: absolute;
        top: 16px;
        left: 16px;
        z-index: 10;
        display: flex;
        align-items: center;
        cursor: pointer;
    }
    .admin-select-checkbox input[type="checkbox"] {
        display: none;
    }
    .admin-select-checkbox .custom-checkbox {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: #fff;
        border: 2px solid #1565C0;
        box-shadow: 0 2px 8px #0002;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: border-color 0.2s, background 0.2s;
        position: relative;
        font-size: 20px;
        color: #1565C0;
    }
    .admin-select-checkbox input[type="checkbox"]:checked + .custom-checkbox {
        background: #1565C0;
        border-color: #1565C0;
        color: #fff;
    }
    .admin-select-checkbox .custom-checkbox::after {
        content: '\2713'; /* Unicode checkmark */
        display: none;
        font-size: 20px;
        font-weight: bold;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    .admin-select-checkbox input[type="checkbox"]:checked + .custom-checkbox::after {
        display: block;
    }
</style>

@section Scripts {
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <script>
        // Initialize AOS
        AOS.init({
            duration: 800,
            once: true
        });

        // Inject rating star CSS for dynamic content
        function injectStarCss() {
            if (!document.getElementById('dynamic-star-css')) {
                const style = document.createElement('style');
                style.id = 'dynamic-star-css';
                style.innerHTML = `
                    .star-full { color: #ffd700 !important; }
                    .star-half { color: #ffd700 !important; opacity: 0.6 !important; }
                    .star-empty { color: #b0b8c1 !important; }
                `;
                document.head.appendChild(style);
            }
        }

        // Keep track of selected items globally
        const selectedItems = new Set();
        let lastCheckboxStates = new Map();

        function updateMenuItems(items) {
            injectStarCss(); // Ensure CSS is present
            const grid = document.getElementById('menuItemsGrid');
            const isAdmin = @Json.Serialize(isAdmin);
            const isMember = @Json.Serialize(isMember);

            if (!items || items.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <p>No menu items found matching your criteria.</p>
                    </div>`;
                return;
            }

            // Save checkbox states before updating grid
            if (isAdmin) {
                document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                    lastCheckboxStates.set(checkbox.dataset.itemId, checkbox.checked);
                });
            }

            grid.innerHTML = items.map(item => `
                <div class="menu-item-card${selectedItems.has(item.menuItemId.toString()) ? ' selected' : ''}">
                    ${isAdmin ? `
                        <div class="item-image">
                            <label class="admin-select-checkbox">
                                <input type="checkbox" class="item-checkbox"
                                    data-item-id="${item.menuItemId}"
                                    data-item-name="${item.name}"
                                    ${selectedItems.has(item.menuItemId.toString()) ? 'checked' : ''} />
                                <span class="custom-checkbox"></span>
                            </label>
                            <a href="/MenuItem/Details/${item.menuItemId}">
                                <img src="/Images/${item.photoURL || 'default.jpg'}" alt="${item.name}" />
                            </a>
                            <div class="item-badges">
                                <span class="item-price">${item.price}</span>
                                <span class="item-rating">${item.ratingHtml || ''} <span class="avg-rating">${item.avgRating || '0.0'}</span></span>
                            </div>
                            ${!item.isActive ? '<span class="status-badge inactive-badge">Inactive</span>' : ''}
                            ${item.stockQuantity <= 0 ? '<span class="status-badge out-of-stock-badge">Out of Stock</span>' : ''}
                            ${item.stockQuantity > 0 && item.stockQuantity < 10 ? `<span class="status-badge low-stock-badge">Low Stock: ${item.stockQuantity} left</span>` : ''}
                        </div>
                    ` : `
                        <div class="item-image">
                            <a href="/MenuItem/Details/${item.menuItemId}">
                                <img src="/Images/${item.photoURL || 'default.jpg'}" alt="${item.name}" />
                            </a>
                            <div class="item-badges">
                                <span class="item-price">${item.price}</span>
                                <span class="item-rating">${item.ratingHtml || ''} <span class="avg-rating">${item.avgRating || '0.0'}</span></span>
                            </div>
                            ${item.stockQuantity <= 0 ? '<span class="status-badge out-of-stock-badge">Out of Stock</span>' : ''}
                            ${item.stockQuantity > 0 && item.stockQuantity < 10 ? `<span class="status-badge low-stock-badge">Low Stock: ${item.stockQuantity} left</span>` : ''}
                        </div>
                    `}
                    <div class="item-info">
                        <h3 class="item-name">${item.name}</h3>
                        <p class="item-category">${item.categoryName}</p>
                        <p class="item-stock">Stock: ${item.stockQuantity}</p>
                        <div class="item-actions">
                            ${getItemActions(item, isAdmin, isMember)}
                        </div>
                    </div>
                </div>
            `).join('');

            // Reattach checkbox listeners and restore states
            if (isAdmin) {
                attachCheckboxListeners();
                updateBulkDeleteUI();
            }

            attachFormListeners();
        }

        // Modify checkbox event handler
        function attachCheckboxListeners() {
            document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const itemId = this.dataset.itemId;
                    if (this.checked) {
                        selectedItems.add(itemId);
                        this.closest('.menu-item-card').classList.add('selected');
                    } else {
                        selectedItems.delete(itemId);
                        this.closest('.menu-item-card').classList.remove('selected');
                    }
                    updateBulkDeleteUI();
                });

                // Restore state if item was previously selected
                if (selectedItems.has(checkbox.dataset.itemId)) {
                    checkbox.checked = true;
                    checkbox.closest('.menu-item-card').classList.add('selected');
                }
            });
        }

        function updateBulkDeleteUI() {
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const selectedCountDisplay = document.querySelector('.selected-count');
            const selectedCountBadge = document.getElementById('selectedCount');

            const count = selectedItems.size;
            if (count > 0) {
                bulkDeleteBtn.style.display = 'inline-block';
                selectedCountDisplay.style.display = 'block';
                selectedCountBadge.textContent = `${count} item${count !== 1 ? 's' : ''} selected`;
            } else {
                bulkDeleteBtn.style.display = 'none';
                selectedCountDisplay.style.display = 'none';
            }
        }

        // Initialize bulk delete functionality
        if (document.getElementById('bulkDeleteBtn')) {
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');

            // Initial setup of checkboxes
            attachCheckboxListeners();

            bulkDeleteBtn.addEventListener('click', function() {
                if (selectedItems.size > 0) {
                    // Change from DeleteBulk to Delete
                    window.location.href = `/MenuItem/Delete?ids=${Array.from(selectedItems).join(',')}`;
                }
            });
        }

        window.addEventListener('pageshow', function() {
    if (typeof selectedItems !== 'undefined') {
        selectedItems.clear();
    }
    document.querySelectorAll('.item-checkbox').forEach(cb => {
        cb.checked = false;
        if (cb.closest('.menu-item-card')) {
            cb.closest('.menu-item-card').classList.remove('selected');
        }
    });
    if (typeof updateBulkDeleteUI === 'function') {
        updateBulkDeleteUI();
    }
});

        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            performFilter();
        });

        document.getElementById('clearFilters').addEventListener('click', function() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categorySelect').value = '';
            document.getElementById('minPriceInput').value = '';
            document.getElementById('maxPriceInput').value = '';
            performFilter();
            // Don't clear selections when clearing filters
        });

        document.getElementById('searchInput').addEventListener('input', debounce(performFilter, 500));
        document.getElementById('categorySelect').addEventListener('change', performFilter);
        document.getElementById('minPriceInput').addEventListener('change', performFilter);
        document.getElementById('maxPriceInput').addEventListener('change', performFilter);

        function performFilter() {
            const search = document.getElementById('searchInput').value;
            const categoryId = document.getElementById('categorySelect').value;
            const minPrice = document.getElementById('minPriceInput').value;
            const maxPrice = document.getElementById('maxPriceInput').value;

            document.getElementById('loadingIndicator').style.display = 'block';
            document.getElementById('menuItemsGrid').style.opacity = '0.5';

            const params = new URLSearchParams();
            if (search) params.append('search', search);
            if (categoryId) params.append('categoryId', categoryId);
            if (minPrice) params.append('minPrice', minPrice);
            if (maxPrice) params.append('maxPrice', maxPrice);

            fetch(`@Url.Action("GetFilteredMenuItems", "MenuItem")?${params.toString()}`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    updateMenuItems(data);
                })
                .catch(error => {
                    console.error('Error filtering menu items:', error);
                    document.getElementById('menuItemsGrid').innerHTML = `<div class="empty-state"><i class="fas fa-search"></i><p>Failed to filter menu items. Please try again.</p></div>`;
                })
                .finally(() => {
                    document.getElementById('loadingIndicator').style.display = 'none';
                    document.getElementById('menuItemsGrid').style.opacity = '1';
                });
        }

        function getItemActions(item, isAdmin, isMember) {
            if (isAdmin) {
                return `
                    <form action="/MenuItem/ToggleActive" method="post" class="d-inline">
                        <input name="__RequestVerificationToken" type="hidden" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                        <input type="hidden" name="id" value="${item.menuItemId}" />
                        <button type="submit" class="btn btn-sm ${item.isActive ? 'btn-secondary' : 'btn-success'}">
                            ${item.isActive ? 'Deactivate' : 'Activate'}
                        </button>
                    </form>
                    <a class="btn btn-sm btn-warning" href="/MenuItem/Edit/${item.menuItemId}">
                        <i class="fas fa-edit"></i>
                    </a>
                    <a class="btn btn-sm btn-danger" href="/MenuItem/Delete/${item.menuItemId}">
                        <i class="fas fa-trash"></i>
                    </a>
                    <a class="btn btn-sm btn-info" href="/MenuItem/Details/${item.menuItemId}">
                        <i class="fas fa-info-circle"></i> Details
                    </a>`;
            } else if (isMember) {
                return `
                    <form class="add-to-cart-form">
                        <input name="__RequestVerificationToken" type="hidden" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                        <input type="hidden" name="menuItemId" value="${item.menuItemId}" />
                        <div class="quantity-control">
                            <input type="number" name="quantity" value="1" min="1" max="100" class="form-control" />
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-cart-plus"></i> Add to Cart
                            </button>
                        </div>
                    </form>
                    <a class="btn btn-sm btn-info" href="/MenuItem/Details/${item.menuItemId}">
                        <i class="fas fa-info-circle"></i> Details
                    </a>`;
            }
            return `
                <a class="btn btn-sm btn-info" href="/MenuItem/Details/${item.menuItemId}">
                    <i class="fas fa-info-circle"></i> Details
                </a>`;
        }

        function attachFormListeners() {
            document.querySelectorAll('.add-to-cart-form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    fetch('/Cart/Add', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: new URLSearchParams(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message);
                        } else {
                            alert(data.message || 'Failed to add to cart.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Something went wrong.');
                    });
                });
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Initialize form listeners
        attachFormListeners();
    </script>
}