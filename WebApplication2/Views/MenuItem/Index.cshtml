@model WebApplication2.Models.MenuItemIndexVM
@using System.Globalization;
@using System.Linq

@{
    ViewBag.Title = "Menu";
    var isMember = User.IsInRole("Member");
    var isAdmin = User.IsInRole("Admin");
}

<div class="menu-container">
    <div class="filter-section">
        <form id="filterForm" class="filter-form">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" name="search" id="searchInput" value="@Context.Request.Query["search"]" 
                    placeholder="Search dishes..." class="form-control" />
            </div>
            <div class="filters-row">
                <select name="categoryId" id="categorySelect" class="form-control">
                    <option value="">All Categories</option>
                    @foreach (var cat in Model.Categories)
                    {
                        var isSelected = Context.Request.Query["categoryId"] == cat.CategoryId.ToString();
                        <option value="@cat.CategoryId" selected="@isSelected">@cat.Name</option>
                    }
                </select>
                <div class="price-filters">
                    <input type="number" name="minPrice" id="minPriceInput" 
                        value="@Context.Request.Query["minPrice"]" placeholder="Min Price" 
                        class="form-control" min="0" step="0.01" />
                    <input type="number" name="maxPrice" id="maxPriceInput" 
                        value="@Context.Request.Query["maxPrice"]" placeholder="Max Price" 
                        class="form-control" min="0" step="0.01" />
                </div>
                <div class="filter-buttons">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                    <button type="button" id="clearFilters" class="btn btn-secondary">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
            </div>
        </form>
    </div>

    @if (isAdmin)
    {
        <div class="admin-actions mb-4">
            <a class="btn btn-success" asp-controller="MenuItem" asp-action="Create">
                <i class="fas fa-plus"></i> Add New Product
            </a>
        </div>
    }

    @using System.Text
    @functions {
        string GetStarHtml(double avg) {
            int full = (int)Math.Floor(avg);
            bool half = avg - full >= 0.5;
            int empty = 5 - full - (half ? 1 : 0);
            var html = new StringBuilder();
            for (int i = 0; i < full; i++) html.Append("<span class='star-full'>&#9733;</span>");
            if (half) html.Append("<span class='star-half'>&#9733;</span>");
            for (int i = 0; i < empty; i++) html.Append("<span class='star-empty'>&#9734;</span>");
            return html.ToString();
        }
    }
    <div class="menu-items-grid" id="menuItemsGrid">
        @foreach (var item in Model.MenuItems)
        {
            var ratings = item.MenuItemRatings ?? new List<WebApplication2.Models.MenuItemRating>();
            double avgRating = ratings.Count > 0 ? ratings.Average(r => r.Value) : 0;
            <div class="menu-item-card">
                <div class="item-image">
                    <a asp-controller="MenuItem" asp-action="Details" asp-route-id="@item.MenuItemId">
                        <img src="~/Images/@(item.PhotoURL ?? "default.jpg")" alt="@item.Name" />
                    </a>
                    <span class="item-price">@item.Price.ToString("C", new CultureInfo("en-MY"))</span>
                    <span class="item-rating">@Html.Raw(GetStarHtml(avgRating)) <span class="avg-rating">@avgRating.ToString("0.0")</span></span>
                    @if (isAdmin && !item.IsActive)
                    {
                        <span class="inactive-badge">Inactive</span>
                    }
                    @if (item.StockQuantity <= 0)
                    {
                        <span class="out-of-stock-badge">Out of Stock</span>
                    }
                    else if (item.StockQuantity < 10)
                    {
                        <span class="low-stock-badge">Low Stock: @item.StockQuantity left</span>
                    }
                </div>
                <div class="item-info">
                    <h3 class="item-name">@item.Name</h3>
                    <p class="item-category">@item.Category?.Name</p>
                    <p class="item-stock">Stock: @item.StockQuantity</p>
                    <div class="item-actions">
                        @if (isAdmin)
                        {
                            <form asp-action="ToggleActive" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@item.MenuItemId" />
                                <button type="submit" class="btn btn-sm @(item.IsActive ? "btn-secondary" : "btn-success")">
                                    @(item.IsActive ? "Deactivate" : "Activate")
                                </button>
                            </form>
                            <a class="btn btn-sm btn-warning" asp-action="Edit" asp-route-id="@item.MenuItemId">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a class="btn btn-sm btn-danger" asp-action="Delete" asp-route-id="@item.MenuItemId">
                                <i class="fas fa-trash"></i>
                            </a>
                        }
                        else if (isMember)
                        {
                            <form asp-controller="Cart" asp-action="Add" method="post" class="add-to-cart-form">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="menuItemId" value="@item.MenuItemId" />
                                <div class="quantity-control">
                                    <input type="number" name="quantity" value="1" min="1" max="100" class="form-control" />
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-cart-plus"></i> Add to Cart
                                    </button>
                                </div>
                            </form>
                        }
                        <a class="btn btn-sm btn-info" asp-action="Details" asp-route-id="@item.MenuItemId">
                            <i class="fas fa-info-circle"></i> Details
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <div id="loadingIndicator" class="loading-indicator">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            performFilter();
        });

        document.getElementById('clearFilters').addEventListener('click', function() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categorySelect').value = '';
            document.getElementById('minPriceInput').value = '';
            document.getElementById('maxPriceInput').value = '';
            performFilter();
        });

        document.getElementById('searchInput').addEventListener('input', debounce(performFilter, 500));
        document.getElementById('categorySelect').addEventListener('change', performFilter);
        document.getElementById('minPriceInput').addEventListener('change', performFilter);
        document.getElementById('maxPriceInput').addEventListener('change', performFilter);

        function performFilter() {
            const search = document.getElementById('searchInput').value;
            const categoryId = document.getElementById('categorySelect').value;
            const minPrice = document.getElementById('minPriceInput').value;
            const maxPrice = document.getElementById('maxPriceInput').value;

            document.getElementById('loadingIndicator').style.display = 'block';
            document.getElementById('menuItemsGrid').style.opacity = '0.5';

            const params = new URLSearchParams();
            if (search) params.append('search', search);
            if (categoryId) params.append('categoryId', categoryId);
            if (minPrice) params.append('minPrice', minPrice);
            if (maxPrice) params.append('maxPrice', maxPrice);

            fetch(`@Url.Action("GetFilteredMenuItems", "MenuItem")?${params.toString()}`)
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    updateMenuItems(data);
                })
                .catch(error => {
                    console.error('Error filtering menu items:', error);
                    document.getElementById('menuItemsGrid').innerHTML = `<div class="empty-state"><i class="fas fa-search"></i><p>Failed to filter menu items. Please try again.</p></div>`;
                })
                .finally(() => {
                    document.getElementById('loadingIndicator').style.display = 'none';
                    document.getElementById('menuItemsGrid').style.opacity = '1';
                });
        }

        function updateMenuItems(items) {
            const grid = document.getElementById('menuItemsGrid');
            const isAdmin = @Json.Serialize(isAdmin);
            const isMember = @Json.Serialize(isMember);

            if (!items || items.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <p>No menu items found matching your criteria.</p>
                    </div>`;
                return;
            }

            grid.innerHTML = items.map(item => `
                <div class="menu-item-card">
                    <div class="item-image">
                        <a href="/MenuItem/Details/${item.menuItemId}">
                            <img src="/Images/${item.photoURL || 'default.jpg'}" alt="${item.name}" />
                        </a>
                        <span class="item-price">${item.price}</span>
                        ${isAdmin && !item.isActive ? '<span class="inactive-badge">Inactive</span>' : ''}
                        ${item.stockQuantity <= 0 ? '<span class="out-of-stock-badge">Out of Stock</span>' : ''}
                        ${item.stockQuantity > 0 && item.stockQuantity < 10 ? `<span class="low-stock-badge">Low Stock: ${item.stockQuantity} left</span>` : ''}
                    </div>
                    <div class="item-info">
                        <h3 class="item-name">${item.name}</h3>
                        <p class="item-category">${item.categoryName}</p>
                        <p class="item-stock">Stock: ${item.stockQuantity}</p>
                        <div class="item-actions">
                            ${getItemActions(item, isAdmin, isMember)}
                        </div>
                    </div>
                </div>
            `).join('');

            attachFormListeners();
        }

        function getItemActions(item, isAdmin, isMember) {
            if (isAdmin) {
                return `
                    <form action="/MenuItem/ToggleActive" method="post" class="d-inline">
                        <input name="__RequestVerificationToken" type="hidden" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                        <input type="hidden" name="id" value="${item.menuItemId}" />
                        <button type="submit" class="btn btn-sm ${item.isActive ? 'btn-secondary' : 'btn-success'}">
                            ${item.isActive ? 'Deactivate' : 'Activate'}
                        </button>
                    </form>
                    <a class="btn btn-sm btn-warning" href="/MenuItem/Edit/${item.menuItemId}">
                        <i class="fas fa-edit"></i>
                    </a>
                    <a class="btn btn-sm btn-danger" href="/MenuItem/Delete/${item.menuItemId}">
                        <i class="fas fa-trash"></i>
                    </a>
                    <a class="btn btn-sm btn-info" href="/MenuItem/Details/${item.menuItemId}">
                        <i class="fas fa-info-circle"></i> Details
                    </a>`;
            } else if (isMember) {
                return `
                    <form class="add-to-cart-form">
                        <input name="__RequestVerificationToken" type="hidden" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                        <input type="hidden" name="menuItemId" value="${item.menuItemId}" />
                        <div class="quantity-control">
                            <input type="number" name="quantity" value="1" min="1" max="100" class="form-control" />
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-cart-plus"></i> Add to Cart
                            </button>
                        </div>
                    </form>
                    <a class="btn btn-sm btn-info" href="/MenuItem/Details/${item.menuItemId}">
                        <i class="fas fa-info-circle"></i> Details
                    </a>`;
            }
            return `
                <a class="btn btn-sm btn-info" href="/MenuItem/Details/${item.menuItemId}">
                    <i class="fas fa-info-circle"></i> Details
                </a>`;
        }

        function attachFormListeners() {
            document.querySelectorAll('.add-to-cart-form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    fetch('/Cart/Add', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: new URLSearchParams(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message);
                        } else {
                            alert(data.message || 'Failed to add to cart.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Something went wrong.');
                    });
                });
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Initialize form listeners
        attachFormListeners();
    </script>
}

<style>
.item-rating { display: block; margin-top: 6px; font-size: 1.1em; color: #ffd700; }
.star-full { color: #ffd700; }
.star-half { color: #ffd700; opacity: 0.6; }
.star-empty { color: #b0b8c1; }
.avg-rating { color: #fff; font-size: 0.95em; margin-left: 4px; }
.out-of-stock-badge { position: absolute; top: 10px; right: 10px; background-color: #dc3545; color: white; padding: 3px 8px; border-radius: 4px; font-size: 0.8em; font-weight: bold; }
.low-stock-badge { position: absolute; top: 10px; right: 10px; background-color: #ffc107; color: #212529; padding: 3px 8px; border-radius: 4px; font-size: 0.8em; font-weight: bold; }
.item-stock { color: #6c757d; font-size: 0.9em; margin-top: 5px; }
</style>