@model UpdateProfileVM

@{
    ViewBag.Title = "Account | Update Profile";
}

<div class="menu-container">

    <form class="tidy-form" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly"></div>

        <!-- Profile Picture Section -->
        <div class="profile-photo-wrapper">
            <label class="upload" onclick="openPhotoPopup()">
                <img src="/photos/@Model.PhotoURL" id="currentProfilePhoto">
            </label>
            <br><small>Click photo to change or view history</small><br>
            <span asp-validation-for="ProfilePicture" class="field-validation-error"></span>

            <!-- Hidden inputs for photo management -->
            <input type="hidden" id="selectedPhotoPath" name="SelectedPhotoPath" value="">
            <input type="file" id="newPhotoInput" asp-for="ProfilePicture"
                   accept="image/jpeg, image/png, image/jpg, image/webp, image/gif, image/bmp, image/svg+xml, image/tiff"
                   class="hidden">

            <!-- Hidden input for processed image data -->
            <input type="hidden" id="processedImageData" name="ProcessedImageData" value="">
        </div>

        <!-- Form Fields -->
        <div class="form-fields">
            <div class="field-row">
                <label asp-for="Email">Email</label>
                <div class="email-display">@Model.Email</div>
            </div>

            <div class="field-row">
                <label asp-for="Name">Name</label>
                <input asp-for="Name" class="form-input" autofocus>
                <span asp-validation-for="Name" class="field-validation-error"></span>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="form-buttons">
            <button type="submit" class="btn-primary">Update</button>
            <button type="reset" class="btn-secondary">Reset</button>
        </div>
    </form>

    <hr />

    <section class="danger-zone">
        <h3>Delete Account</h3>
        <p>Once you delete your account, you will receive an email to finalize the process. There is a grace period for recovery.</p>
        <form id="deleteAccountForm" asp-controller="Account" asp-action="InitiateAccountDeletion" method="post">
            <button class="delete-button" type="submit">Delete Your Account</button>
        </form>
    </section>
</div>

<!-- Photo History Popup -->
<div class="photo-popup-overlay" id="photoPopup">
    <div class="photo-popup">
        <div class="popup-header">
            <h3>Profile Photo</h3>
            <button class="close-popup" onclick="closePhotoPopup()">&times;</button>
        </div>

        <!-- Upload New Photo Section -->
        <div class="upload-new-section" onclick="document.getElementById('newPhotoInput').click()">
            <div style="font-size: 32px; margin-bottom: 10px;">📷</div>
            <strong>Upload New Photo</strong>
            <p>Click to select a new image</p>
        </div>

        <!-- Advanced Image Processing Section -->
        <div id="imageProcessingSection" style="display:none; text-align:center; margin:20px 0; padding:20px; background:var(--bg-secondary); border-radius:10px;">
            <div style="max-width:400px; margin:0 auto;">
                <img id="cropperImage" style="max-width:100%; display:block;" />
            </div>
            <div style="margin-top:15px; display:flex; gap:10px; justify-content:center; flex-wrap:wrap;">
                <button type="button" class="popup-btn popup-btn-primary" onclick="cropImage()">
                    <i class="fas fa-crop"></i> Apply Crop
                </button>
                <button type="button" class="popup-btn popup-btn-secondary" onclick="rotateImage(-90)">
                    <i class="fas fa-undo"></i> Rotate Left
                </button>
                <button type="button" class="popup-btn popup-btn-secondary" onclick="rotateImage(90)">
                    <i class="fas fa-redo"></i> Rotate Right
                </button>
                <button type="button" class="popup-btn popup-btn-secondary" onclick="flipImage('horizontal')">
                    <i class="fas fa-arrows-alt-h"></i> Flip H
                </button>
                <button type="button" class="popup-btn popup-btn-secondary" onclick="flipImage('vertical')">
                    <i class="fas fa-arrows-alt-v"></i> Flip V
                </button>
                <button type="button" class="popup-btn popup-btn-danger" onclick="resetImage()">
                    <i class="fas fa-times"></i> Reset
                </button>
            </div>
            <div style="margin-top:15px;">
                <button type="button" class="popup-btn popup-btn-primary" style="font-size:16px; padding:12px 24px;" onclick="saveProcessedImage()">
                    <i class="fas fa-save"></i> Save Changes & Use This Photo
                </button>
            </div>
        </div>

        <!-- Photo History Section -->
        <div class="photo-history-section">
            <h4>📁 Previous Photos</h4>
            <div class="photo-history-grid" id="photoHistoryGrid">
                @if (Model.PhotoHistory != null && Model.PhotoHistory.Any())
                {
                    @foreach (var photo in Model.PhotoHistory)
                    {
                        <div class="history-photo" data-photo="/photos/@photo.FileName"
                             data-photo-id="@photo.Id" onclick="selectHistoryPhoto(this)">
                            <img src="/photos/@photo.FileName" alt="Profile Photo">
                            @if (photo.FileName == Model.PhotoURL)
                            {
                                <div class="current-photo-indicator">✓</div>
                            }
                            <div class="photo-date">@photo.UploadDate.ToString("MMM yyyy")</div>
                        </div>
                    }
                }
                else
                {
                    <div class="history-photo" data-photo="/photos/@Model.PhotoURL" onclick="selectHistoryPhoto(this)">
                        <img src="/photos/@Model.PhotoURL" alt="Profile Photo">
                        <div class="current-photo-indicator">✓</div>
                        <div class="photo-date me-md-3">Current</div>
                    </div>
                }
            </div>
        </div>

        <!-- Popup Actions -->
        <div class="popup-actions">
            <button class="popup-btn popup-btn-primary default-button" onclick="applySelectedPhoto()">Apply Selected</button>
            <button class="popup-btn popup-btn-secondary" onclick="closePhotoPopup()">Cancel</button>
            <button class="popup-btn popup-btn-danger" onclick="deleteSelectedPhoto()">Delete Photo</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <link href="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
    <script>
        let selectedPhotoElement = null;
        let currentPhotoPath = '/photos/@Model.PhotoURL';
        let cropper = null;
        let cropperImage = document.getElementById('cropperImage');
        let imageProcessingSection = document.getElementById('imageProcessingSection');
        let originalImageData = null; // Store original image for reset
        let hasProcessedImage = false; // Flag to track if we have a processed image

        function openPhotoPopup() {
            document.getElementById('photoPopup').style.display = 'flex';
            markCurrentPhoto();
        }

        function closePhotoPopup() {
            document.getElementById('photoPopup').style.display = 'none';
            selectedPhotoElement = null;
            clearSelections();

            // Clean up cropper and reset image processing
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            imageProcessingSection.style.display = 'none';
            originalImageData = null;
            hasProcessedImage = false;

            // Clear the processed image data if user cancels
            document.getElementById('processedImageData').value = '';
        }

        function markCurrentPhoto() {
            const historyPhotos = document.querySelectorAll('.history-photo');
            historyPhotos.forEach(photo => {
                const indicator = photo.querySelector('.current-photo-indicator');
                if (photo.dataset.photo === currentPhotoPath) {
                    if (indicator) indicator.style.display = 'flex';
                    photo.classList.add('selected');
                    selectedPhotoElement = photo;
                } else {
                    if (indicator) indicator.style.display = 'none';
                    photo.classList.remove('selected');
                }
            });
        }

        function selectHistoryPhoto(photoElement) {
            clearSelections();
            photoElement.classList.add('selected');
            selectedPhotoElement = photoElement;
        }

        function clearSelections() {
            document.querySelectorAll('.history-photo').forEach(photo => {
                photo.classList.remove('selected');
            });
        }

        function applySelectedPhoto() {
            if (selectedPhotoElement) {
                const newPhotoPath = selectedPhotoElement.dataset.photo;
                const photoId = selectedPhotoElement.dataset.photoId;

                document.getElementById('currentProfilePhoto').src = newPhotoPath;
                document.getElementById('selectedPhotoPath').value = photoId || newPhotoPath;
                currentPhotoPath = newPhotoPath;

                updateCurrentPhotoIndicators();
                showFeedback('Profile photo updated! Remember to click "Update" to save changes.');
            }
            closePhotoPopup();
        }

        function updateCurrentPhotoIndicators() {
            document.querySelectorAll('.current-photo-indicator').forEach(indicator => {
                indicator.style.display = 'none';
            });

            if (selectedPhotoElement) {
                const currentIndicator = selectedPhotoElement.querySelector('.current-photo-indicator');
                if (currentIndicator) {
                    currentIndicator.style.display = 'flex';
                }
            }
        }

        function deleteSelectedPhoto() {
            if (selectedPhotoElement) {
                const isCurrentPhoto = selectedPhotoElement.querySelector('.current-photo-indicator') &&
                                     selectedPhotoElement.querySelector('.current-photo-indicator').style.display === 'flex';

                if (isCurrentPhoto) {
                    alert('Cannot delete the current profile photo. Please select a different photo first.');
                    return;
                }

                if (confirm('Are you sure you want to delete this photo from your history?')) {
                    const photoId = selectedPhotoElement.dataset.photoId;
                    selectedPhotoElement.remove();
                    selectedPhotoElement = null;
                    showFeedback('Photo deleted from history');
                }
            } else {
                alert('Please select a photo to delete.');
            }
        }

        // Handle new photo upload
        document.getElementById('newPhotoInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                // Validate file size (max 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    alert('File size must be less than 5MB');
                    this.value = ''; // Clear the input
                    return;
                }

                // Validate file type
                const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp', 'image/gif'];
                if (!allowedTypes.includes(file.type)) {
                    alert('Please select a valid image file (JPEG, PNG, JPG, WebP, GIF)');
                    this.value = ''; // Clear the input
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    originalImageData = e.target.result; // Store original
                    cropperImage.src = e.target.result;
                    imageProcessingSection.style.display = 'block';

                    // Destroy existing cropper
                    if (cropper) {
                        cropper.destroy();
                    }

                    // Initialize new cropper
                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 1, // Square aspect ratio for profile photos
                        viewMode: 1,
                        autoCropArea: 0.8,
                        responsive: true,
                        restore: false,
                        guides: true,
                        center: true,
                        highlight: false,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false,
                    });

                    hasProcessedImage = false; // Reset processed flag
                };
                reader.readAsDataURL(file);
            }
        });

        function cropImage() {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 300,
                    height: 300,
                    minWidth: 100,
                    minHeight: 100,
                    maxWidth: 800,
                    maxHeight: 800,
                    fillColor: '#fff',
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                const croppedDataUrl = canvas.toDataURL('image/jpeg', 0.8);
                cropperImage.src = croppedDataUrl;

                // Reinitialize cropper with the cropped image
                cropper.destroy();
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 1,
                    responsive: true,
                });

                hasProcessedImage = true;
                showFeedback('Image cropped successfully!');
            }
        }

        function rotateImage(deg) {
            if (cropper) {
                cropper.rotate(deg);
                hasProcessedImage = true;
                showFeedback(`Image rotated ${deg > 0 ? 'right' : 'left'}!`);
            }
        }

        function flipImage(direction) {
            if (cropper) {
                const data = cropper.getData();
                if (direction === 'horizontal') {
                    cropper.scaleX(data.scaleX === 1 ? -1 : 1);
                } else if (direction === 'vertical') {
                    cropper.scaleY(data.scaleY === 1 ? -1 : 1);
                }
                hasProcessedImage = true;
                showFeedback(`Image flipped ${direction}!`);
            }
        }

        function resetImage() {
            if (originalImageData && cropper) {
                cropperImage.src = originalImageData;
                cropper.destroy();
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 0.8,
                    responsive: true,
                });
                hasProcessedImage = false;
                showFeedback('Image reset to original!');
            }
        }

        function saveProcessedImage() {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 300,
                    height: 300,
                    minWidth: 100,
                    minHeight: 100,
                    maxWidth: 800,
                    maxHeight: 800,
                    fillColor: '#fff',
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                // Convert to JPEG format with quality 0.8
                const processedDataUrl = canvas.toDataURL('image/jpeg', 0.8);

                // Store the processed image data
                document.getElementById('processedImageData').value = processedDataUrl;

                // Update preview
                document.getElementById('currentProfilePhoto').src = processedDataUrl;

                // Clear selected photo path since we're using a new image
                document.getElementById('selectedPhotoPath').value = '';

                // Create a Blob from the canvas
                canvas.toBlob(function(blob) {
                    const file = new File([blob], 'profile-photo.jpg', { type: 'image/jpeg' });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    document.getElementById('newPhotoInput').files = dataTransfer.files;
                }, 'image/jpeg', 0.8);

                showFeedback('Image processed and ready to save! Click "Update" to apply changes.');
                closePhotoPopup();
            }
        }

        // Add form submission handling
        document.querySelector('.tidy-form').addEventListener('submit', async function(e) {
            e.preventDefault();

            const processedImageData = document.getElementById('processedImageData').value;
            
            if (processedImageData) {
                try {
                    // Convert base64 to blob
                    const base64Response = await fetch(processedImageData);
                    const blob = await base64Response.blob();
                    
                    // Create a File object
                    const file = new File([blob], 'profile-photo.jpg', { type: 'image/jpeg' });
                    
                    // Create a new DataTransfer object and add our file
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    
                    // Set the files property of the input element
                    document.getElementById('newPhotoInput').files = dataTransfer.files;
                    
                    // Clear the processed image data
                    document.getElementById('processedImageData').value = '';
                } catch (error) {
                    console.error('Error processing image:', error);
                }
            }

            // Submit the form
            this.submit();
        });

        // Show feedback notification
        function showFeedback(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'error' ? '#dc3545' : '#28a745'};
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                z-index: 10000;
                font-weight: 500;
                max-width: 300px;
                animation: fadeInOut 3s ease-in-out;
            `;

            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Add CSS for notification animation
        const style = document.createElement('style');
        style.textContent = `
            @@keyframes fadeInOut {
                0% { opacity: 0; transform: translateX(100%); }
                10%, 90% { opacity: 1; transform: translateX(0); }
                100% { opacity: 0; transform: translateX(100%); }
            }
        `;
        document.head.appendChild(style);

        // Delete account confirmation
        document.getElementById('deleteAccountForm').addEventListener('submit', function (e) {
            if (!confirm('Do you really want to delete your account? This action will send a confirmation email to your registered address.')) {
                e.preventDefault();
            }
        });

        // Close popup when clicking outside
        document.getElementById('photoPopup').addEventListener('click', function(e) {
            if (e.target === this) {
                closePhotoPopup();
            }
        });

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Profile photo history system initialized');
        });
    </script>
}