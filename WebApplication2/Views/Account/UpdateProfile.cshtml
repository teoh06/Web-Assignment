@model UpdateProfileVM

@{
    ViewBag.Title = "Account | Update Profile";
}

<div class="profile-page-flex">
    <div class="profile-main-card">
        <form class="tidy-form" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly"></div>

            <div class="profile-photo-wrapper">
                <label class="upload" onclick="openPhotoPopup()">
                    <img src="@(string.IsNullOrEmpty(Model.PhotoURL) ? "/photos/default.png" : $"/photos/{Model.PhotoURL}")"
                         id="currentProfilePhoto"
                         alt="Profile Photo"
                         onerror="this.src='/photos/default.png'">
                </label>
                <br><small>Click photo to change or view history</small><br>
                <span asp-validation-for="ProfilePicture" class="field-validation-error"></span>

                <input type="hidden" id="selectedPhotoPath" name="SelectedPhotoPath" value="">
                <input type="file" id="newPhotoInput" asp-for="ProfilePicture"
                       accept="image/jpeg, image/png, image/jpg, image/webp, image/gif, image/bmp, image/svg+xml, image/tiff"
                       class="hidden">

                <input type="hidden" id="processedImageData" name="ProcessedImageData" value="">
            </div>

            <div class="form-fields">
                <div class="field-row">
                    <label asp-for="Email">Email</label>
                    <div class="email-display">@Model.Email</div>
                </div>

                <div class="field-row">
                    <label asp-for="Address">Address</label>
                    <div class="address-input-container">
                        <input asp-for="Address" class="form-input address-input"
                               placeholder="Enter your full address (e.g., 123 Main Street, City, State ZIP)"
                               autocomplete="street-address"
                               data-validation-url="/Account/ValidateAddress"
                               data-suggestions-url="/Account/GetAddressSuggestions">
                        <div class="address-suggestions" id="addressSuggestions" hidden></div>
                        <div class="address-validation-feedback" id="addressFeedback" hidden></div>
                    </div>
                    <span asp-validation-for="Address" class="field-validation-error"></span>
                </div>

                <div class="field-row">
                    <label asp-for="Name">Name</label>
                    <input asp-for="Name" class="form-input" autofocus>
                    <span asp-validation-for="Name" class="field-validation-error"></span>
                </div>
                
                <div class="field-row">
                    <label asp-for="PhoneNumber">Phone Number</label>
                    <input asp-for="PhoneNumber" class="form-input" placeholder="Enter your phone number for order notifications">
                    <span asp-validation-for="PhoneNumber" class="field-validation-error"></span>
                </div>
            </div>

            <div class="form-buttons">
                <button type="submit" class="btn-primary">Update</button>
                <button type="reset" class="btn-secondary">Reset</button>
            </div>
        </form>

        <hr />

        <section class="danger-zone">
            <h3>Delete Account</h3>
            <p>Once you delete your account, you will receive an email to finalize the process. There is a grace period for recovery.</p>
            <form id="deleteAccountForm" asp-controller="Account" asp-action="InitiateAccountDeletion" method="post">
                <button class="delete-button" type="submit">Delete Your Account</button>
            </form>
        </section>
    </div>
    <div class="profile-favorites-card">
        <h2 class="favorite-title">Your Favorite Dishes</h2>
        <div id="favoriteList">
        @if (User.IsInRole("Member"))
        {
            @inject DB db
            var favIds = db.MenuItemFavorites.Where(f => f.MemberEmail == User.Identity.Name).Select(f => f.MenuItemId).ToList();
            var favorites = db.MenuItems.Where(m => favIds.Contains(m.MenuItemId)).ToList();
            if (favorites.Any())
            {
                <div class="favorite-list-grid">
                    @foreach (var item in favorites)
                    {
                        <div class="favorite-card">
                            <a href="/MenuItem/Details/@item.MenuItemId">
                                <img src="/Images/@(item.PhotoURL ?? "default.jpg")" alt="@item.Name" class="favorite-img" />
                            </a>
                            <div class="favorite-info">
                                <div class="favorite-name">@item.Name</div>
                                <div class="favorite-category">@item.Category?.Name</div>
                                <div class="favorite-price">@item.Price.ToString("C", new System.Globalization.CultureInfo("en-MY"))</div>
                                <a href="/MenuItem/Details/@item.MenuItemId" class="btn btn-sm btn-info">Details</a>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-favorite">You have not added any favorites yet.</div>
            }
        }
        </div>
    </div>
</div>

<style>
.profile-page-flex {
    display: flex;
    flex-direction: row;
    gap: 40px;
    align-items: flex-start;
    justify-content: center;
    margin: 40px auto;
    max-width: 1400px;
}
.profile-main-card {
    flex: 2;
    border-radius: 16px;
    box-shadow: 0 4px 24px #0002;
    padding: 32px;
    min-width: 400px;
}
.profile-favorites-card {
    flex: 1;
    border-radius: 16px;
    box-shadow: 0 4px 24px #0002;
    padding: 32px;
    min-width: 320px;
    max-width: 420px;
}
.favorite-title {
    font-family: 'Victor Mono', monospace;
    font-size: 1.5rem;
    color: var(--primary-brand);
    margin-bottom: 18px;
}
.favorite-list-grid {
    display: flex;
    flex-direction: column;
    gap: 24px;
}
.favorite-card {
    border-radius: 12px;
    box-shadow: 0 2px 8px #0003;
    padding: 18px;
    display: flex;
    gap: 18px;
    align-items: center;
}
.favorite-img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
}
.favorite-info {
    flex: 1;
    text-align: left;
}
.favorite-name {
    font-size: 1.1rem;
    font-weight: bold;
    margin-bottom: 2px;
}
.favorite-category {
    color: var(--text-secondary);
    font-size: 0.95rem;
    margin-bottom: 2px;
}
.favorite-price {
    color: var(--accent-green);
    font-weight: bold;
    margin-bottom: 6px;
}
.empty-favorite {
    font-style: italic;
    margin-top: 12px;
}
@@media (max-width: 900px) {
    .profile-page-flex { flex-direction: column; gap: 24px; }
    .profile-main-card, .profile-favorites-card { min-width: 100%; max-width: 100%; }
    .favorite-list-grid { flex-direction: row; flex-wrap: wrap; gap: 18px; }
    .favorite-card { flex-direction: column; align-items: flex-start; }
}
</style>

@section Scripts {
    <script src="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <link href="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
    <script>
        let selectedPhotoElement = null;
        let currentPhotoPath = '/photos/@Model.PhotoURL';
        let cropper = null;
        let cropperImage = document.getElementById('cropperImage');
        let imageProcessingSection = document.getElementById('imageProcessingSection');
        let originalImageData = null;
        let hasProcessedImage = false;

        function openPhotoPopup() {
            document.getElementById('photoPopup').style.display = 'flex';
            markCurrentPhoto();
        }

        function closePhotoPopup() {
            document.getElementById('photoPopup').style.display = 'none';
            selectedPhotoElement = null;
            clearSelections();
            if (cropper) { cropper.destroy(); cropper = null; }
            imageProcessingSection.style.display = 'none';
            originalImageData = null;
            hasProcessedImage = false;
            document.getElementById('processedImageData').value = '';
        }

        function markCurrentPhoto() {
            const historyPhotos = document.querySelectorAll('.history-photo');
            historyPhotos.forEach(photo => {
                const indicator = photo.querySelector('.current-photo-indicator');
                if (indicator) { // This means it's the current photo
                    photo.classList.add('selected');
                    selectedPhotoElement = photo;
                } else {
                    photo.classList.remove('selected');
                }
            });
        }

        function selectHistoryPhoto(photoElement) {
            clearSelections();
            photoElement.classList.add('selected');
            selectedPhotoElement = photoElement;
            document.getElementById('processedImageData').value = '';
            document.getElementById('newPhotoInput').value = '';
        }

        function clearSelections() {
            document.querySelectorAll('.history-photo').forEach(p => p.classList.remove('selected'));
        }

        // Only one way to update photo: Apply Selected
        function applySelectedPhoto() {
            if (imageProcessingSection.style.display === 'block' && cropper) {
                // If a new photo is uploaded and processed
                const canvas = cropper.getCroppedCanvas({
                     width: 300, height: 300, fillColor: '#fff', imageSmoothingEnabled: true, imageSmoothingQuality: 'high'
                });
                const processedDataUrl = canvas.toDataURL('image/jpeg', 0.8);
                document.getElementById('processedImageData').value = processedDataUrl;
                document.getElementById('currentProfilePhoto').src = processedDataUrl;
                document.getElementById('selectedPhotoPath').value = '';
            } else if (selectedPhotoElement) {
                // If a previous photo is selected
                const newPhotoPath = selectedPhotoElement.dataset.photoPath;
                const photoId = selectedPhotoElement.dataset.photoId;
                document.getElementById('currentProfilePhoto').src = newPhotoPath;
                document.getElementById('selectedPhotoPath').value = photoId; // Always send ID
                document.getElementById('processedImageData').value = '';
                document.getElementById('newPhotoInput').value = '';
            }
            closePhotoPopup();
        }

        function deleteSelectedPhoto() {
            if (!selectedPhotoElement) {
                alert('Please select a photo to delete.');
                return;
            }

            const isCurrentPhoto = !!selectedPhotoElement.querySelector('.current-photo-indicator');
            if (isCurrentPhoto) {
                alert('Cannot delete the current profile photo. Please select a different photo first.');
                return;
            }

            if (confirm('Are you sure you want to permanently delete this photo from your history?')) {
                const photoId = selectedPhotoElement.dataset.photoId;
                if (!photoId || photoId === '0') {
                    alert('This photo cannot be deleted.');
                    return;
                }

                fetch('/Account/DeleteMemberPhoto', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'id=' + photoId
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        selectedPhotoElement.remove();
                        selectedPhotoElement = null;
                        showFeedback(data.message || 'Photo deleted from history.');
                    } else {
                        showFeedback(data.message || 'Failed to delete photo.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showFeedback('An error occurred. Please try again.', 'error');
                });
            }
        }

        // Handle new photo upload
        document.getElementById('newPhotoInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                if (file.size > 5 * 1024 * 1024) { alert('File size must be less than 5MB'); this.value = ''; return; }
                const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp', 'image/gif'];
                if (!allowedTypes.includes(file.type)) { alert('Please select a valid image file (JPEG, PNG, JPG, WebP, GIF)'); this.value = ''; return; }
                const reader = new FileReader();
                reader.onload = function(e) {
                    originalImageData = e.target.result;
                    cropperImage.src = e.target.result;
                    imageProcessingSection.style.display = 'block';
                    if (cropper) { cropper.destroy(); }
                    cropper = new Cropper(cropperImage, { aspectRatio: 1, viewMode: 1, autoCropArea: 0.8, responsive: true });
                    hasProcessedImage = false;
                    // When a new image is uploaded, it becomes the selection
                    clearSelections();
                    selectedPhotoElement = null;
                };
                reader.readAsDataURL(file);
            }
        });

        function cropImage() { if (cropper) { cropper.crop(); hasProcessedİmage = true; showFeedback('Image cropped!'); } }
        function rotateImage(deg) { if (cropper) { cropper.rotate(deg); hasProcessedİmage = true; showFeedback('Image rotated!'); } }
        function flipImage(direction) { if (cropper) { if (direction === 'horizontal') cropper.scaleX(cropper.getData().scaleX === 1 ? -1 : 1); else cropper.scaleY(cropper.getData().scaleY === 1 ? -1 : 1); hasProcessedİmage = true; showFeedback('Image flipped!'); } }
        function resetImage() { if (originalImageData && cropper) { cropperImage.src = originalImageData; cropper.destroy(); cropper = new Cropper(cropperImage, { aspectRatio: 1, viewMode: 1, autoCropArea: 0.8, responsive: true }); hasProcessedİmage = false; showFeedback('Image reset!'); } }

        // Show feedback notification
        function showFeedback(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `position: fixed; top: 20px; right: 20px; background: ${type === 'error' ? '#dc3545' : '#28a745'}; color: white; padding: 15px 20px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 10000; font-weight: 500; max-width: 300px; animation: fadeInOut 3s ease-in-out;`;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => { notification.remove(); }, 3000);
        }

        // Delete account confirmation
        document.getElementById('deleteAccountForm').addEventListener('submit', function (e) {
            if (!confirm('Do you really want to delete your account? This action will send a confirmation email to your registered address.')) {
                e.preventDefault();
            }
        });

        // Close popup when clicking outside
        document.getElementById('photoPopup').addEventListener('click', function(e) {
            if (e.target === this) { closePhotoPopup(); }
        });

        // Refresh favorite list after favorite is toggled
        function refreshFavoriteList() {
            $.get('/Account/GetFavoriteListPartial', function(html) {
                $('#favoriteList').html(html);
            });
        }
        // Listen for favorite button click on menu page
        $(document).on('click', '.menu-card-fav-btn', function() {
            var btn = $(this);
            var id = btn.data('id');
            $.post('/MenuItem/ToggleFavorite', { menuItemId: id }, function(data) {
                if (data.favorited !== undefined) {
                    // Optionally update button UI here
                    refreshFavoriteList(); // Refresh profile favorite list
                }
            });
        });
    </script>
}