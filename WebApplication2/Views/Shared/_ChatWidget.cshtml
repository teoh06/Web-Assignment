@inject DB db
@{
    string displayName = "Guest";
    string userRole = "Guest";
    string userIdentifier = "";
    
    if (User.Identity.IsAuthenticated && User.IsInRole("Member"))
    {
        userRole = "Member";
        var member = db.Members.Find(User.Identity.Name);
        if (member != null && !string.IsNullOrEmpty(member.Email))
        {
            userIdentifier = member.Email;
            var email = member.Email;
            int atIdx = email.IndexOf('@');
            displayName = atIdx > 2 ? email.Substring(0, 2) + "***" + email.Substring(atIdx) : email;
        }
    }
    else if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
    {
        userRole = "Admin";
        userIdentifier = User.Identity.Name;
        displayName = User.Identity.Name;
    }
}

<div id="chatWidget" class="chat-widget">
    <div id="chatHeader" class="chat-header">
        <i class="fas fa-comments"></i> Customer Support Chat
        <div class="chat-controls">
            <button id="chatClearBtn" title="Clear chat history"><i class="fas fa-trash"></i></button>
            <button id="chatMinimizeBtn" title="Minimize chat"><i class="fas fa-minus"></i></button>
        </div>
    </div>
    <div id="chatBody" class="chat-body">
        <div id="chatMessages" class="chat-messages">
            <!-- Messages will appear here -->
        </div>
        <div id="chatSuggestions" class="chat-suggestions">
            <!-- Quick suggestion buttons will appear here -->
        </div>
        <div class="chat-input-container">
            <input id="chatInput" class="chat-input" type="text" placeholder="Type your message..." />
            <button id="chatUploadBtn" class="chat-upload-btn" title="Upload image"><i class="fas fa-image"></i></button>
            <button id="chatSendBtn" class="chat-send-btn">Send</button>
        </div>
        <input type="file" id="chatFileInput" accept="image/*" style="display: none;" />
    </div>
</div>

<style>
    .chat-widget {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 350px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 1000;
        overflow: hidden;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .chat-header {
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        font-weight: bold;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .chat-controls {
        display: flex;
        gap: 10px;
    }
    
    .chat-controls button {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 14px;
    }
    
    .chat-body {
        max-height: 400px;
        display: flex;
        flex-direction: column;
    }
    
    .chat-messages {
        padding: 15px;
        overflow-y: auto;
        max-height: 300px;
        flex-grow: 1;
    }
    
    .chat-messages div {
        margin-bottom: 10px;
        padding: 8px 12px;
        border-radius: 18px;
        max-width: 80%;
        word-wrap: break-word;
    }
    
    .chat-messages .user-message {
        background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
        margin-left: auto;
        border-bottom-right-radius: 5px;
    }
    
    .chat-messages .support-message {
        background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
        margin-right: auto;
        border-bottom-left-radius: 5px;
    }
    
    .chat-input-container {
        display: flex;
        padding: 10px;
        border-top: 1px solid #eee;
    }
    
    .chat-input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 20px;
        outline: none;
    }
    
    .chat-send-btn, .chat-upload-btn {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 15px;
        margin-left: 5px;
        border-radius: 20px;
        cursor: pointer;
    }
    
    .chat-upload-btn {
        padding: 10px 12px;
    }
    
    .chat-suggestions {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        padding: 10px;
        border-top: 1px solid #eee;
    }
    
    .suggestion-btn {
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        border-radius: 15px;
        padding: 5px 10px;
        font-size: 12px;
        cursor: pointer;
        white-space: nowrap;
    }
    
    .suggestion-btn:hover {
        background-color: #e0e0e0;
    }
    
    .chat-image {
        max-width: 200px;
        max-height: 150px;
        border-radius: 10px;
        margin: 5px 0;
    }
    
    .menu-item-card {
        display: flex;
        background-color: #f9f9f9;
        border-radius: 6px;
        padding: 5px;
        margin: 5px 0;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        max-width: 100%;
        overflow: hidden;
        align-items: center;
    }
    
    .menu-item-image {
        width: 40px;
        height: 40px;
        border-radius: 3px;
        object-fit: cover;
        flex-shrink: 0;
    }
    
    .menu-item-details {
        margin-left: 6px;
        flex-grow: 1;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        max-width: calc(100% - 50px);
    }
    
    .menu-item-name {
        font-weight: bold;
        margin-bottom: 2px;
        font-size: 12px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }
    
    .menu-item-price {
        color: #4CAF50;
        font-weight: bold;
        font-size: 11px;
        margin-top: 1px;
    }
    
    .menu-item-description {
        font-size: 10px;
        color: #666;
        margin-bottom: 1px;
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: 14px;
    }
    
    .order-status-card {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .order-status-header {
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
    }
    
    .order-status-progress {
        height: 10px;
        background-color: #eee;
        border-radius: 5px;
        margin-bottom: 10px;
        overflow: hidden;
    }
    
    .order-status-bar {
        height: 100%;
        background-color: #4CAF50;
        border-radius: 5px;
        transition: width 0.5s ease;
    }
    
    .order-status-details {
        display: flex;
        justify-content: space-between;
        font-size: 12px;
        color: #666;
    }
    
    .typing-indicator {
        display: flex;
        padding: 10px;
        align-items: center;
    }
    
    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #aaa;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
        animation: typing 1s infinite ease-in-out;
    }
    
    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    /* Admin Confirmation Dialog */
    .admin-confirmation {
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        border-radius: 8px;
        padding: 10px 15px;
        margin: 5px 0;
    }
    
    .admin-confirmation p {
        margin: 0 0 10px 0;
        font-weight: bold;
        color: #856404;
    }
    
    .admin-confirmation-buttons {
        display: flex;
        gap: 10px;
    }
    
    .admin-confirmation-buttons button {
        padding: 5px 15px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        font-weight: bold;
    }
    
    .confirm-yes {
        background-color: #28a745;
        color: white;
    }
    
    .confirm-no {
        background-color: #dc3545;
        color: white;
    }
    
    /* Image Recognition Results */
    .image-recognition-result {
        background-color: #e8f4fd;
        border: 1px solid #b8daff;
        border-radius: 8px;
        padding: 10px;
        margin: 5px 0;
    }
    
    .image-recognition-result h4 {
        margin: 0 0 5px 0;
        color: #004085;
    }
    
    .recognized-items {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 5px;
    }
    
    .recognized-item {
        background-color: #007bff;
        color: white;
        border-radius: 15px;
        padding: 3px 8px;
        font-size: 12px;
        cursor: pointer;
    }
    
    .recognized-item:hover {
        background-color: #0056b3;
    }
    
    @@keyframes typing {
        0% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
        100% { transform: translateY(0); }
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" crossorigin="anonymous"></script>
<script>
    // --- SignalR connection setup ---
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .withAutomaticReconnect()
        .build();
    
    // User role and identifier from server-side
    const userRole = "@userRole";
    const userIdentifier = "@userIdentifier";
    
    // --- Chat history persistence ---
    function saveChatHistory() {
        sessionStorage.setItem('chatHistory', document.getElementById('chatMessages').innerHTML);
    }
    
    function loadChatHistory() {
        var history = sessionStorage.getItem('chatHistory');
        if (history) {
            document.getElementById('chatMessages').innerHTML = history;
        } else {
            // Welcome message if no history
            addSupportMessage(`👋 Welcome to QuickBite support! I see you're logged in as a <strong>${userRole}</strong>. How can I help you today?`);
            
            // Show role-specific suggestions
            if (userRole === "Member") {
                showSuggestions(['Order food', 'Track my order', 'Menu recommendations', 'Delivery options']);
            } else if (userRole === "Admin") {
                showSuggestions(['Modify prices', 'Menu management', 'Order statistics', 'Customer feedback']);
            } else {
                showSuggestions(['Menu recommendations', 'Create account', 'Delivery options', 'Payment methods']);
            }
        }
    }
    
    function clearChatHistory() {
        document.getElementById('chatMessages').innerHTML = '';
        sessionStorage.removeItem('chatHistory');
        addSupportMessage(`Chat history cleared. How can I help you today?`);
        
        // Show role-specific suggestions after clearing
        if (userRole === "Member") {
            showSuggestions(['Order food', 'Track my order', 'Menu recommendations', 'Delivery options']);
        } else if (userRole === "Admin") {
            showSuggestions(['Modify prices', 'Menu management', 'Order statistics', 'Customer feedback']);
        } else {
            showSuggestions(['Menu recommendations', 'Create account', 'Delivery options', 'Payment methods']);
        }
    }
    
    // --- Message handling functions ---
    function addUserMessage(message) {
        const msgDiv = document.createElement('div');
        msgDiv.className = 'user-message';
        msgDiv.innerHTML = `<b>You:</b> ${message}`;
        document.getElementById('chatMessages').appendChild(msgDiv);
        scrollToBottom();
    }
    
    function addSupportMessage(message) {
        const msgDiv = document.createElement('div');
        msgDiv.className = 'support-message';
        msgDiv.innerHTML = message;
        document.getElementById('chatMessages').appendChild(msgDiv);
        scrollToBottom();
        saveChatHistory();
    }
    
    function showTypingIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'typing-indicator support-message';
        indicator.id = 'typingIndicator';
        indicator.innerHTML = `<span></span><span></span><span></span>`;
        document.getElementById('chatMessages').appendChild(indicator);
        scrollToBottom();
    }
    
    function removeTypingIndicator() {
        const indicator = document.getElementById('typingIndicator');
        if (indicator) indicator.remove();
    }
    
    function scrollToBottom() {
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // --- Suggestion buttons ---
    function showSuggestions(suggestions) {
        const suggestionsContainer = document.getElementById('chatSuggestions');
        suggestionsContainer.innerHTML = '';
        
        suggestions.forEach(suggestion => {
            const btn = document.createElement('button');
            btn.className = 'suggestion-btn';
            btn.textContent = suggestion;
            btn.onclick = function() {
                // Direct navigation for specific actions
                if (suggestion === 'View cart') {
                    window.location.href = '/Cart';
                } else if (suggestion === 'Checkout') {
                    window.location.href = '/Cart/Payment';
                } else if (suggestion === 'Track my order') {
                    window.location.href = '/Cart/Track';
                } else if (suggestion === 'Show menu' || suggestion === 'Menu recommendations') {
                    window.location.href = '/MenuItem';
                } else if (suggestion === 'Order history') {
                    window.location.href = '/Cart/History';
                } else {
                    // For other suggestions, process through the chat
                    handleUserInput(suggestion);
                }
            };
            suggestionsContainer.appendChild(btn);
        });
    }
    
    // --- Handle user input ---
    async function handleUserInput(message) {
        if (!message.trim()) return;
        
        // Add user message to chat
        addUserMessage(message);
        
        // Clear input field
        document.getElementById('chatInput').value = '';
        
        // Show typing indicator
        showTypingIndicator();
        
        try {
            // Send message to SignalR hub
            await connection.invoke("ProcessUserMessage", userRole, userIdentifier, message);
        } catch (err) {
            console.error(err);
            removeTypingIndicator();
            addSupportMessage("Sorry, there was an error processing your request. Please try again later.");
        }
    }
    
    // --- Handle image upload ---
    async function handleImageUpload(file) {
        if (!file) return;
        
        // Create a message showing the uploaded image
        const reader = new FileReader();
        reader.onload = async function(e) {
            const imageUrl = e.target.result;
            
            // Add user message with image
            const msgDiv = document.createElement('div');
            msgDiv.className = 'user-message';
            msgDiv.innerHTML = `<b>You:</b> <br><img src="${imageUrl}" class="chat-image" alt="Uploaded image">`;
            document.getElementById('chatMessages').appendChild(msgDiv);
            scrollToBottom();
            
            // Show typing indicator
            showTypingIndicator();
            
            try {
                // Send image to SignalR hub for processing
                await connection.invoke("ProcessImageUpload", userRole, userIdentifier, imageUrl);
            } catch (err) {
                console.error(err);
                removeTypingIndicator();
                addSupportMessage("Sorry, there was an error processing your image. Please try again later.");
            }
        };
        reader.readAsDataURL(file);
    }
    
    // --- Admin confirmation dialog ---
    function showAdminConfirmation(message, actionData) {
        const confirmDiv = document.createElement('div');
        confirmDiv.className = 'support-message';
        confirmDiv.innerHTML = `
            <div class="admin-confirmation">
                <p>${message}</p>
                <div class="admin-confirmation-buttons">
                    <button class="confirm-yes">Yes</button>
                    <button class="confirm-no">No</button>
                </div>
            </div>
        `;
        document.getElementById('chatMessages').appendChild(confirmDiv);
        scrollToBottom();
        
        // Add event listeners to buttons
        confirmDiv.querySelector('.confirm-yes').addEventListener('click', async () => {
            // Remove confirmation dialog
            confirmDiv.remove();
            
            // Show typing indicator
            showTypingIndicator();
            
            try {
                // Send confirmation to SignalR hub
                await connection.invoke("ConfirmAdminAction", actionData.action, actionData.itemName, actionData.newPrice);
            } catch (err) {
                console.error(err);
                removeTypingIndicator();
                addSupportMessage("Sorry, there was an error processing your request. Please try again later.");
            }
        });
        
        confirmDiv.querySelector('.confirm-no').addEventListener('click', () => {
            // Remove confirmation dialog
            confirmDiv.remove();
            
            // Add message that action was cancelled
            addSupportMessage("Action cancelled. How else can I assist you?");
        });
    }
    
    // --- Add items to cart ---
    async function addItemsToCart(items) {
        if (!items || items.length === 0) return;
        
        // For each item, make an AJAX call to add to cart
        for (const item of items) {
            try {
                const response = await fetch('/Cart/Add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `menuItemId=${item.menuItemId}&quantity=${item.quantity}${item.selectedPersonalizations ? '&SelectedPersonalizations=' + encodeURIComponent(item.selectedPersonalizations) : ''}`
                });
                
                const result = await response.json();
                if (!result.success) {
                    console.error('Error adding item to cart:', result.message);
                }
            } catch (err) {
                console.error('Error adding item to cart:', err);
            }
        }
        
        // Update cart count or notification if needed
        // This would depend on how your site handles cart updates
    }
    
    // --- SignalR event handlers ---
    connection.on("ReceiveResponse", (message) => {
        removeTypingIndicator();
        addSupportMessage(message);
    });
    
    connection.on("ShowSuggestions", (suggestions) => {
        showSuggestions(suggestions);
    });
    
    connection.on("ConfirmAdminAction", (message, actionData) => {
        removeTypingIndicator();
        showAdminConfirmation(message, actionData);
    });
    
    connection.on("AddToCart", (items) => {
        addItemsToCart(items);
    });
    
    connection.on("ShowImageRecognitionResults", (results) => {
        removeTypingIndicator();
        
        // Create a message with the recognition results
        let message = `<div class="image-recognition-result">
            <h4>Image Recognition Results</h4>
            <p>I've identified these items in your image:</p>
            <div class="recognized-items">`;
            
        results.items.forEach(item => {
            message += `<span class="recognized-item" onclick="handleUserInput('Order ${item.name}')">${item.name}</span>`;
        });
        
        message += `</div>
            <p style="margin-top: 10px;">Click on any item above to order it, or use the suggestions below.</p>
        </div>`;
        
        addSupportMessage(message);
        
        // Create custom suggestions based on recognized items
        const customSuggestions = [];
        if (results.items.length > 0) {
            customSuggestions.push(`Order ${results.items[0].name}`);
            if (results.items.length > 1) {
                customSuggestions.push(`Order ${results.items[1].name}`);
            }
        }
        customSuggestions.push('Show menu');
        customSuggestions.push('View cart');
        
        // Show relevant suggestions
        showSuggestions(customSuggestions);
    });
    
    // --- Initialize chat ---
    async function initializeChat() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
            
            // Load chat history after connection is established
            loadChatHistory();
            
            // Set up event listeners
            document.getElementById('chatSendBtn').addEventListener('click', () => {
                const message = document.getElementById('chatInput').value;
                handleUserInput(message);
            });
            
            document.getElementById('chatInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const message = document.getElementById('chatInput').value;
                    handleUserInput(message);
                }
            });
            
            document.getElementById('chatClearBtn').addEventListener('click', clearChatHistory);
            
            document.getElementById('chatMinimizeBtn').addEventListener('click', () => {
                const chatBody = document.getElementById('chatBody');
                chatBody.style.display = chatBody.style.display === 'none' ? 'flex' : 'none';
            });
            
            document.getElementById('chatUploadBtn').addEventListener('click', () => {
                document.getElementById('chatFileInput').click();
            });
            
            document.getElementById('chatFileInput').addEventListener('change', (e) => {
                if (e.target.files && e.target.files[0]) {
                    handleImageUpload(e.target.files[0]);
                }
            });
            
        } catch (err) {
            console.error(err);
            setTimeout(initializeChat, 5000);
        }
    }
    
    // Start the chat when the page loads
    document.addEventListener('DOMContentLoaded', initializeChat);
    
    // Add click handler for chat header to toggle visibility
    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('chatHeader').onclick = function(e) {
            if (e.target.id === 'chatHeader' || e.target.tagName === 'I' && e.target.parentNode.id === 'chatHeader') {
                var body = document.getElementById('chatBody');
                body.style.display = body.style.display === 'none' ? 'flex' : 'none';
            }
        };
    });
</script>

              