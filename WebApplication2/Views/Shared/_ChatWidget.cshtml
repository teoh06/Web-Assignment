@inject DB db
@{
    string displayName = "Guest";
    string userRole = "Guest";
    string userIdentifier = "";
    
    if (User.Identity.IsAuthenticated && User.IsInRole("Member"))
    {
        userRole = "Member";
        var member = db.Members.Find(User.Identity.Name);
        if (member != null && !string.IsNullOrEmpty(member.Email))
        {
            userIdentifier = member.Email;
            var email = member.Email;
            int atIdx = email.IndexOf('@');
            displayName = atIdx > 2 ? email.Substring(0, 2) + "***" + email.Substring(atIdx) : email;
        }
    }
    else if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
    {
        userRole = "Admin";
        userIdentifier = User.Identity.Name;
        displayName = User.Identity.Name;
    }
}

@if (userRole != "Admin")
{
    <div id="chatWidget" class="chat-widget">
        <div id="chatHeader" class="chat-header">
            <i class="fas fa-comments"></i> Customer Support Chat
            <div class="chat-controls">
                <button id="chatClearBtn" title="Clear chat history"><i class="fas fa-trash"></i></button>
                <button id="chatMinimizeBtn" title="Minimize chat"><i class="fas fa-minus"></i></button>
            </div>
        </div>
        <div id="chatBody" class="chat-body">
            <div id="chatMessages" class="chat-messages">
                <!-- Messages will appear here -->
            </div>
            <div id="chatSuggestions" class="chat-suggestions">
                <!-- Quick suggestion buttons will appear here -->
            </div>
            <div class="chat-input-container">
                <input id="chatInput" class="chat-input" type="text" placeholder="Type your message..." />
                <button id="chatSendBtn" class="chat-send-btn">Send</button>
            </div>
            <div id="chatFeedback" style="display:none; margin:10px 0;">
                <span>Rate your experience:</span>
                <button class="feedback-btn" data-rating="5">üòä</button>
                <button class="feedback-btn" data-rating="4">üôÇ</button>
                <button class="feedback-btn" data-rating="3">üòê</button>
                <button class="feedback-btn" data-rating="2">üôÅ</button>
                <button class="feedback-btn" data-rating="1">üò°</button>
            </div>
        </div>
    </div>
}

<style>
    .chat-widget {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 350px;
        background-color: var(--bg-primary);
        border-radius: 10px;
        box-shadow: var(--shadow-lg);
        z-index: 1000;
        overflow: hidden;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        border: 1px solid var(--border-light);
    }
    
    .chat-header {
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        font-weight: bold;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .chat-controls {
        display: flex;
        gap: 10px;
    }
    
    .chat-controls button {
        background: none;
        color: var(--text-primary);
        border: none;
        cursor: pointer;
        font-size: 14px;
    }
    
    .chat-body {
        max-height: 400px;
        display: none;
        flex-direction: column;
    }
    
    .chat-messages {
        padding: 15px;
        overflow-y: auto;
        max-height: 300px;
        flex-grow: 1;
    }
    
    .chat-messages div {
        margin-bottom: 10px;
        padding: 8px 12px;
        border-radius: 18px;
        max-width: 80%;
        word-wrap: break-word;
    }
    
    .chat-messages .user-message {
        background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
        margin-left: auto;
        border-bottom-right-radius: 5px;
    }
    
    .chat-messages .support-message {
        background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
        margin-right: auto;
        border-bottom-left-radius: 5px;
    }
    
    .chat-input-container {
        display: flex;
        padding: 10px;
        border-top: 1px solid var(--border-light);
        background-color: var(--bg-primary);
    }
    
    .chat-input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid var(--border-medium);
        border-radius: 20px;
        outline: none;
        background-color: var(--bg-primary);
        color: var(--text-primary);
    }
    
    .chat-input:focus {
        border-color: #4CAF50;
        box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
    }
    
    .chat-send-btn, .chat-upload-btn {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 15px;
        margin-left: 5px;
        border-radius: 20px;
        cursor: pointer;
    }
    
    .chat-upload-btn {
        padding: 10px 12px;
    }
    
    .chat-suggestions {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        padding: 10px;
        border-top: 1px solid #eee;
    }
    
    .suggestion-btn {
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        border-radius: 15px;
        padding: 5px 10px;
        font-size: 12px;
        cursor: pointer;
        white-space: nowrap;
    }
    
    .suggestion-btn:hover {
        background-color: #e0e0e0;
    }
    
    .chat-image {
        max-width: 200px;
        max-height: 150px;
        border-radius: 10px;
        margin: 5px 0;
    }
    
    .menu-item-card {
        display: flex;
        background-color: #f9f9f9;
        border-radius: 6px;
        padding: 5px;
        margin: 5px 0;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        max-width: 100%;
        overflow: hidden;
        align-items: center;
    }
    
    .menu-item-image {
        width: 40px;
        height: 40px;
        border-radius: 3px;
        object-fit: cover;
        flex-shrink: 0;
    }
    
    .menu-item-details {
        margin-left: 6px;
        flex-grow: 1;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        max-width: calc(100% - 50px);
    }
    
    .menu-item-name {
        font-weight: bold;
        margin-bottom: 2px;
        font-size: 12px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }
    
    .menu-item-price {
        color: #4CAF50;
        font-weight: bold;
        font-size: 11px;
        margin-top: 1px;
    }
    
    .menu-item-description {
        font-size: 10px;
        color: #666;
        margin-bottom: 1px;
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: 14px;
    }
    
    .order-status-card {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .order-status-header {
        font-weight: bold;
        margin-bottom: 10px;
        color: #333;
    }
    
    .order-status-progress {
        height: 10px;
        background-color: #eee;
        border-radius: 5px;
        margin-bottom: 10px;
        overflow: hidden;
    }
    
    .order-status-bar {
        height: 100%;
        background-color: #4CAF50;
        border-radius: 5px;
        transition: width 0.5s ease;
    }
    
    .order-status-details {
        display: flex;
        justify-content: space-between;
        font-size: 12px;
        color: #666;
    }
    
    .typing-indicator {
        display: flex;
        padding: 10px;
        align-items: center;
    }
    
    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #aaa;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
        animation: typing 1s infinite ease-in-out;
    }
    
    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    /* Admin Confirmation Dialog */
    .admin-confirmation {
        background: linear-gradient(135deg, var(--bg-accent), var(--bg-secondary));
        border: 1px solid #ffeeba;
        border-radius: 8px;
        padding: 10px 15px;
        margin: 5px 0;
    }
    
    .admin-confirmation p {
        margin: 0 0 10px 0;
        font-weight: bold;
        color: #856404;
    }
    
    .admin-confirmation-buttons {
        display: flex;
        gap: 10px;
    }
    
    .admin-confirmation-buttons button {
        padding: 5px 15px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        font-weight: bold;
    }
    
    .confirm-yes {
        background-color: #28a745;
        color: white;
    }
    
    .confirm-no {
        background-color: #dc3545;
        color: white;
    }
    
    /* Image Recognition Results */
    .image-recognition-result {
        background-color: #e8f4fd;
        border: 1px solid #b8daff;
        border-radius: 8px;
        padding: 10px;
        margin: 5px 0;
    }
    
    .image-recognition-result h4 {
        margin: 0 0 5px 0;
        color: #004085;
    }
    
    .recognized-items {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 5px;
    }
    
    .recognized-item {
        background-color: #007bff;
        color: white;
        border-radius: 15px;
        padding: 3px 8px;
        font-size: 12px;
        cursor: pointer;
    }
    
    .recognized-item:hover {
        background-color: #0056b3;
    }
    
    @@keyframes typing {
        0% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
        100% { transform: translateY(0); }
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" crossorigin="anonymous"></script>
<script>
    // --- SignalR connection setup ---
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .withAutomaticReconnect()
        .build();
    
    // User role and identifier from server-side
    const userRole = "@userRole";
    const userIdentifier = "@userIdentifier";
    
    // --- Connection status feedback ---
    function setConnectionStatus(connected) {
        let header = document.getElementById('chatHeader');
        if (!header) return;
        if (connected) {
            header.style.backgroundColor = '#4CAF50';
            header.title = 'Connected to support';
        } else {
            header.style.backgroundColor = '#b71c1c';
            header.title = 'Disconnected from support. Trying to reconnect...';
        }
    }
    
    // --- Role-based chat history and state persistence ---
    function saveChatHistory() {
        const roleKey = `chatHistory_${userRole}_${userIdentifier || 'anonymous'}`;
        const suggestionsKey = `chatSuggestions_${userRole}_${userIdentifier || 'anonymous'}`;
        localStorage.setItem(roleKey, document.getElementById('chatMessages').innerHTML);
        localStorage.setItem(suggestionsKey, document.getElementById('chatSuggestions').innerHTML);
    }
    
    function saveChatState() {
        const chatBody = document.getElementById('chatBody');
        const isMinimized = chatBody.style.display === 'none';
        const stateKey = `chatMinimized_${userRole}_${userIdentifier || 'anonymous'}`;
        localStorage.setItem(stateKey, isMinimized.toString());
    }
    
    function loadChatState() {
        const stateKey = `chatMinimized_${userRole}_${userIdentifier || 'anonymous'}`;
        const isMinimized = localStorage.getItem(stateKey);
        const chatBody = document.getElementById('chatBody');
        
        // Default to minimized if no state saved or explicitly minimized
        if (isMinimized === null || isMinimized === 'true') {
            chatBody.style.display = 'none';
        } else {
            chatBody.style.display = 'flex';
        }
    }
    
    function loadChatHistory() {
        const roleKey = `chatHistory_${userRole}_${userIdentifier || 'anonymous'}`;
        const suggestionsKey = `chatSuggestions_${userRole}_${userIdentifier || 'anonymous'}`;
        var history = localStorage.getItem(roleKey);
        var suggestions = localStorage.getItem(suggestionsKey);
        
        if (history) {
            document.getElementById('chatMessages').innerHTML = history;
        }
        
        if (suggestions) {
            document.getElementById('chatSuggestions').innerHTML = suggestions;
            // Re-attach event listeners to suggestion buttons
            reattachSuggestionListeners();
        }
        
        // Only show welcome message if no history exists
        if (!history || document.getElementById('chatMessages').innerHTML.trim() === '') {
            if (userRole === 'Admin') {
                addSupportMessage(`‚ö° <strong>Admin Dashboard</strong> - Welcome back, ${userIdentifier}! Your administrative command center is ready. What would you like to manage today?`);
            } else {
                addSupportMessage(`üëã Welcome to QuickBite support! I see you're logged in as a <strong>${userRole}</strong>. How can I help you today?`);
            }
            
            // Show role-specific suggestions
            showRoleBasedSuggestions();
        }
    }
    
    function clearChatHistory() {
        document.getElementById('chatMessages').innerHTML = '';
        document.getElementById('chatSuggestions').innerHTML = '';
        const roleKey = `chatHistory_${userRole}_${userIdentifier || 'anonymous'}`;
        const suggestionsKey = `chatSuggestions_${userRole}_${userIdentifier || 'anonymous'}`;
        localStorage.removeItem(roleKey);
        localStorage.removeItem(suggestionsKey);
        
        if (userRole === 'Admin') {
            addSupportMessage(`üóëÔ∏è <strong>Admin Session Cleared</strong> - Ready for new administrative tasks. What would you like to manage?`);
        } else {
            addSupportMessage(`Chat history cleared. How can I help you today?`);
        }
        
        // Show role-specific suggestions after clearing
        showRoleBasedSuggestions();
    }
    
    // --- Message handling functions ---
    function addUserMessage(message) {
        const msgDiv = document.createElement('div');
        msgDiv.className = 'user-message';
        msgDiv.innerHTML = `<b>You:</b> ${message}`;
        document.getElementById('chatMessages').appendChild(msgDiv);
        scrollToBottom();
    }
    
    function addSupportMessage(message) {
        const msgDiv = document.createElement('div');
        msgDiv.className = 'support-message';
        msgDiv.innerHTML = message;
        document.getElementById('chatMessages').appendChild(msgDiv);
        scrollToBottom();
        saveChatHistory();
    }
    
    function showTypingIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'typing-indicator support-message';
        indicator.id = 'typingIndicator';
        indicator.innerHTML = `<span></span><span></span><span></span>`;
        document.getElementById('chatMessages').appendChild(indicator);
        scrollToBottom();
    }
    
    function removeTypingIndicator() {
        const indicator = document.getElementById('typingIndicator');
        if (indicator) indicator.remove();
    }
    
    function scrollToBottom() {
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // --- Suggestion buttons ---
    function reattachSuggestionListeners() {
        const suggestionBtns = document.querySelectorAll('.suggestion-btn');
        suggestionBtns.forEach(btn => {
            btn.onclick = function() {
                const suggestion = btn.textContent;
                handleSuggestionClick(suggestion);
            };
        });
    }
    
    // --- Role-based access control ---
    function checkRoleAccess(action) {
        const restrictedForGuests = ['View cart', 'Checkout', 'Track my order', 'Order history', 'Reorder previous order', 'Track my order (live)', 'Order food'];
        const adminOnly = ['Modify menu item', 'Modify category', 'Menu management', 'Category management', 'Modify prices', 'Order statistics'];
        
        if (userRole === 'Guest' && restrictedForGuests.includes(action)) {
            return false;
        }
        
        if (userRole !== 'Admin' && adminOnly.includes(action)) {
            return false;
        }
        
        return true;
    }
    
    function showAccessDeniedMessage(action) {
        if (userRole === 'Guest') {
            addSupportMessage(`üîí <strong>Access Restricted:</strong> "${action}" requires a member account. Please <a href="/Account/Register" target="_blank" style="color: #4CAF50; text-decoration: underline;">create an account</a> or <a href="/Account/Login" target="_blank" style="color: #4CAF50; text-decoration: underline;">login</a> to access this feature.`);
            showSuggestions(['Show menu', 'Menu recommendations', 'Create account', 'Login', 'Delivery info']);
        } else {
            addSupportMessage(`üîí <strong>Access Restricted:</strong> "${action}" is only available for administrators.`);
        }
    }
    
    function showRoleBasedSuggestions() {
        if (userRole === "Member") {
            showSuggestions(['Order food', 'Track my order', 'Menu recommendations', 'Delivery options', 'Order history']);
        } else if (userRole === "Admin") {
            showSuggestions(['Quick Actions', 'Menu Management', 'User Management', 'Order Analytics', 'System Settings', 'Bulk Operations']);
        } else { // Guest
            showSuggestions(['Show menu', 'Menu recommendations', 'Create account', 'Login', 'Delivery info']);
        }
    }
    
    // --- Menu recommendations with funny responses ---
    function showMenuRecommendations() {
        const funnyRecommendations = [
            {
                message: "üçî Feeling adventurous? Our Classic Burger is like a warm hug for your taste buds! It's so good, even vegetarians have trust issues with it! üòÑ",
                items: ['Classic Burger', 'Cheese Burger']
            },
            {
                message: "üçï Pizza lovers unite! Our Margherita Pizza is flatter than my jokes but way more satisfying! Fun fact: It's named after a queen, so you'll feel royal eating it! üëë",
                items: ['Margherita Pizza', 'Pepperoni Pizza']
            },
            {
                message: "ü•ó Trying to be healthy? Our Caesar Salad is so fresh, the lettuce is still gossiping about the garden! Plus, croutons are basically bread confetti! üéâ",
                items: ['Caesar Salad', 'Garden Salad']
            },
            {
                message: "üçü Craving crispy goodness? Our Fish and Chips are so flaky, even the fish is jealous of the batter! And don‚Äôt worry, no fishy business here‚Äîjust deliciousness! üêü",
                items: ['Fish and Chip']
            },
            {
                message: "ü•§ Need a pick-me-up? Our Iced Latte is so cool, it‚Äôll make your day chillier than your ex‚Äôs excuses! Plus, it‚Äôs got layers like your complicated love life. ‚òï‚ùÑÔ∏è",
                items: ['Iced Latte']
            },
            {
                message: "üçï Margherita Pizza so fresh, it might just jump off the plate! Perfect for those who like their pizza like their jokes‚Äîcheesy and a little bit saucy! üòú",
                items: ['Margherita Pizza']
            },
            {
                message: "üç∞ Pudding or Tiramisu? Why choose? Indulge in both! It‚Äôs the sweet way to end your day‚Äîlike a hug from your dessert-loving grandma! üçÆ",
                items: ['Pudding', 'Tiramisu']
            },
            {
                message: "ü•§ Out of stock? Don‚Äôt worry, we‚Äôre just giving other items a chance to shine! But seriously, come back soon for more delicious surprises! ‚ú®",
                items: []
            }
        ];
        
        const randomRec = funnyRecommendations[Math.floor(Math.random() * funnyRecommendations.length)];
        addSupportMessage(randomRec.message);
        
        // Create suggestion buttons for the recommended items
        const suggestions = [];
        if (userRole !== 'Guest') {
            suggestions.push(...randomRec.items.map(item => `Order ${item}`));
        }
        suggestions.push('Show menu', 'Another recommendation');
        if (userRole === 'Guest') {
            suggestions.push('Create account', 'Login');
        }
        
        showSuggestions(suggestions);
    }
    
    // --- Enhanced Admin Actions ---
    function showAdminQuickActions() {
        addSupportMessage(`‚ö° <strong>Quick Admin Actions</strong> - Choose from these common administrative tasks:`);
        showSuggestions(['Add Menu Item', 'Modify Prices', 'View Orders', 'Manage Users', 'System Status', 'Back to Main']);
    }
    
    function showAdminMenuManagement() {
        addSupportMessage(`üçΩÔ∏è <strong>Menu Management Hub</strong> - Control your restaurant's menu:`);
        showSuggestions(['Add New Item', 'Edit Existing Item', 'Remove Item', 'Category Management', 'Bulk Price Update', 'Back to Main']);
    }
    
    function showAdminUserManagement() {
        addSupportMessage(`üë• <strong>User Management Center</strong> - Manage customer accounts and permissions:`);
        showSuggestions(['View All Users', 'Search User', 'User Statistics', 'Account Status', 'Role Management', 'Back to Main']);
    }
    
    function showAdminAnalytics() {
        addSupportMessage(`üìä <strong>Order Analytics Dashboard</strong> - View business insights and statistics:`);
        showSuggestions(['Daily Sales', 'Popular Items', 'Customer Analytics', 'Revenue Reports', 'Order Trends', 'Back to Main']);
    }
    
    function showAdminSystemSettings() {
        addSupportMessage(`‚öôÔ∏è <strong>System Settings</strong> - Configure application settings:`);
        showSuggestions(['App Settings', 'Email Configuration', 'Payment Settings', 'Backup Data', 'System Logs', 'Back to Main']);
    }
    
    function showAdminBulkOperations() {
        addSupportMessage(`üîÑ <strong>Bulk Operations</strong> - Perform batch operations efficiently:`);
        showSuggestions(['Bulk Price Update', 'Mass Email', 'Batch Order Status', 'Data Export', 'Import Menu', 'Back to Main']);
    }
    
    function handleSuggestionClick(suggestion) {
        // Check role-based access first
        if (!checkRoleAccess(suggestion)) {
            showAccessDeniedMessage(suggestion);
            return;
        }
        
        // --- Enhanced Admin Action Handling ---
        if (userRole === "Admin") {
            switch(suggestion) {
                case 'Quick Actions':
                    showAdminQuickActions();
                    return;
                case 'Menu Management':
                    showAdminMenuManagement();
                    return;
                case 'User Management':
                    showAdminUserManagement();
                    return;
                case 'Order Analytics':
                    showAdminAnalytics();
                    return;
                case 'System Settings':
                    showAdminSystemSettings();
                    return;
                case 'Bulk Operations':
                    showAdminBulkOperations();
                    return;
                case 'Back to Main':
                    showRoleBasedSuggestions();
                    return;
                case 'Add Menu Item':
                case 'Add New Item':
                    promptAdminAddMenuItem();
                    return;
                case 'Edit Existing Item':
                case 'Modify menu item':
                    promptAdminModifyMenuItem();
                    return;
                case 'Category Management':
                case 'Modify category':
                    promptAdminModifyCategory();
                    return;
                case 'Menu management':
                case 'Go to menu management':
                    showNavigationConfirmation('Menu management');
                    return;
                case 'Go to category management':
                    showNavigationConfirmation('Category management');
                    return;
                case 'Modify Prices':
                    promptAdminModifyPrices();
                    return;
                case 'View Orders':
                    promptAdminViewOrders();
                    return;
                case 'Manage Users':
                    promptAdminManageUsers();
                    return;
                case 'System Status':
                    promptAdminSystemStatus();
                    return;
                case 'Remove Item':
                    promptAdminRemoveItem();
                    return;
                case 'Bulk Price Update':
                    promptAdminBulkPriceUpdate();
                    return;
                case 'View All Users':
                    promptAdminViewAllUsers();
                    return;
                case 'Search User':
                    promptAdminSearchUser();
                    return;
                case 'User Statistics':
                    promptAdminUserStatistics();
                    return;
                case 'Daily Sales':
                    promptAdminDailySales();
                    return;
                case 'Popular Items':
                    promptAdminPopularItems();
                    return;
                case 'Customer Analytics':
                    promptAdminCustomerAnalytics();
                    return;
                case 'Revenue Reports':
                    promptAdminRevenueReports();
                    return;
                case 'Order Trends':
                    promptAdminOrderTrends();
                    return;
                case 'App Settings':
                    promptAdminAppSettings();
                    return;
                case 'Email Configuration':
                    promptAdminEmailConfig();
                    return;
                case 'Payment Settings':
                    promptAdminPaymentSettings();
                    return;
                case 'Backup Data':
                    promptAdminBackupData();
                    return;
                case 'System Logs':
                    promptAdminSystemLogs();
                    return;
                case 'Mass Email':
                    promptAdminMassEmail();
                    return;
                case 'Batch Order Status':
                    promptAdminBatchOrderStatus();
                    return;
                case 'Data Export':
                    promptAdminDataExport();
                    return;
                case 'Import Menu':
                    promptAdminImportMenu();
                    return;
            }
        }
        
        // --- Menu recommendations with funny responses ---
        if (suggestion === 'Menu recommendations') {
            showMenuRecommendations();
            return;
        }
        
        if (suggestion === 'Another recommendation') {
            showMenuRecommendations();
            return;
        }
        
        // --- Reorder feature ---
        if (suggestion === 'Reorder previous order') {
            showReorderConfirmation();
            return;
        }
        // --- Live order tracking feature ---
        if (suggestion === 'Track my order (live)') {
            promptTrackOrderLive();
            return;
        }
        // --- Account creation/login for guests ---
        if (suggestion === 'Create account') {
            showNavigationConfirmation('Create account');
            return;
        }
        if (suggestion === 'Login') {
            showNavigationConfirmation('Login');
            return;
        }
        
        if (['View cart', 'Checkout', 'Track my order', 'Show menu', 'Order history', 'Order food'].includes(suggestion)) {
            showNavigationConfirmation(suggestion);
        } else {
            handleUserInput(suggestion);
        }
    }
    
    function showSuggestions(suggestions) {
        const suggestionsContainer = document.getElementById('chatSuggestions');
        suggestionsContainer.innerHTML = '';
        suggestions.forEach(suggestion => {
            const btn = document.createElement('button');
            btn.className = 'suggestion-btn';
            btn.textContent = suggestion;
            btn.onclick = function() {
                handleSuggestionClick(suggestion);
            };
            suggestionsContainer.appendChild(btn);
        });
        saveChatHistory(); // Save suggestions state
    }

    // --- Reorder confirmation dialog ---
    function showReorderConfirmation() {
        const confirmDiv = document.createElement('div');
        confirmDiv.className = 'support-message';
        confirmDiv.innerHTML = `
            <div class="admin-confirmation">
                <p>Do you want to reorder your previous order?</p>
                <div class="admin-confirmation-buttons">
                    <button class="confirm-yes">Yes</button>
                    <button class="confirm-no">No</button>
                </div>
            </div>
        `;
        document.getElementById('chatMessages').appendChild(confirmDiv);
        scrollToBottom();
        confirmDiv.querySelector('.confirm-yes').addEventListener('click', async () => {
            confirmDiv.remove();
            showTypingIndicator();
            await connection.invoke('ReorderPreviousOrder', userRole, userIdentifier);
        });
        confirmDiv.querySelector('.confirm-no').addEventListener('click', () => {
            confirmDiv.remove();
            addSupportMessage('Reorder cancelled.');
        });
    }

    // --- Prompt for live order tracking ---
    function promptTrackOrderLive() {
        const msgDiv = document.createElement('div');
        msgDiv.className = 'support-message';
        msgDiv.innerHTML = `
            <div class="admin-confirmation">
                <p>Enter your order number to track live status:</p>
                <input id="liveOrderInput" type="text" style="width:90%" placeholder="e.g. 12345" />
                <div class="admin-confirmation-buttons">
                    <button class="confirm-yes">Track</button>
                    <button class="confirm-no">Cancel</button>
                </div>
            </div>
        `;
        document.getElementById('chatMessages').appendChild(msgDiv);
        scrollToBottom();
        msgDiv.querySelector('.confirm-yes').addEventListener('click', async () => {
            const val = document.getElementById('liveOrderInput').value;
            msgDiv.remove();
            if (val) {
                showTypingIndicator();
                await connection.invoke('TrackOrderLive', userRole, userIdentifier, val);
            } else {
                addSupportMessage('Please enter a valid order number.');
            }
        });
        msgDiv.querySelector('.confirm-no').addEventListener('click', () => {
            msgDiv.remove();
            addSupportMessage('Live tracking cancelled.');
        });
    }

    // --- SignalR event handlers for new features ---
    connection.on("LiveOrderStatus", (status) => {
        removeTypingIndicator();
        // Show a timeline/status in chat
        addSupportMessage(status.timelineHtml || status.timeline || status.message || status);
        if (status.estimatedTime) {
            addSupportMessage(`<b>Estimated time:</b> ${status.estimatedTime}`);
        }
        if (status.suggestions) {
            showSuggestions(status.suggestions);
        }
    });
    connection.on("ReorderResult", (result) => {
        removeTypingIndicator();
        addSupportMessage(result);
    });
    
    // --- SignalR event handlers ---
    connection.on("ReceiveResponse", (message) => {
        removeTypingIndicator();
        addSupportMessage(message);
    });
    
    connection.on("ShowSuggestions", (suggestions) => {
        showSuggestions(suggestions);
    });
    
    connection.on("ConfirmAdminAction", (message, actionData) => {
        removeTypingIndicator();
        showAdminConfirmation(message, actionData);
    });
    
    connection.on("AddToCart", (items) => {
        addItemsToCart(items);
    });
    
    connection.on("ShowImageRecognitionResults", (results) => {
        removeTypingIndicator();
        
        // Create a message with the recognition results
        let message = `<div class="image-recognition-result">
            <h4>Image Recognition Results</h4>
            <p>I've identified these items in your image:</p>
            <div class="recognized-items">`;
            
        results.items.forEach(item => {
            message += `<span class="recognized-item" onclick="handleUserInput('Order ${item.name}')">${item.name}</span>`;
        });
        
        message += `</div>
            <p style="margin-top: 10px;">Click on any item above to order it, or use the suggestions below.</p>
        </div>`;
        
        addSupportMessage(message);
        
        // Create custom suggestions based on recognized items
        const customSuggestions = [];
        if (results.items.length > 0) {
            customSuggestions.push(`Order ${results.items[0].name}`);
            if (results.items.length > 1) {
                customSuggestions.push(`Order ${results.items[1].name}`);
            }
        }
        customSuggestions.push('Show menu');
        customSuggestions.push('View cart');
        
        // Show relevant suggestions
        showSuggestions(customSuggestions);
    });
    
    // --- Initialize chat without auto-showing welcome ---
    function initializeChatContent() {
        // Load existing chat state and history
        loadChatState();
        loadChatHistory();
    }

    // --- Initialize chat ---
    async function initializeChat() {
        try {
            await connection.start();
            setConnectionStatus(true);
            console.log("SignalR Connected.");
            initializeChatContent();
            
            // Add event listeners for user input
            const sendBtn = document.getElementById('chatSendBtn');
            const chatInput = document.getElementById('chatInput');
            
            if (sendBtn) {
                sendBtn.addEventListener('click', () => {
                    const message = chatInput.value;
                    if (message && message.trim()) {
                        handleUserInput(message);
                    }
                });
            }
            
            if (chatInput) {
                chatInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        const message = chatInput.value;
                        if (message && message.trim()) {
                            handleUserInput(message);
                        }
                    }
                });
            }
            
            const clearBtn = document.getElementById('chatClearBtn');
            if (clearBtn) {
                clearBtn.addEventListener('click', clearChatHistory);
            }
            
            const minimizeBtn = document.getElementById('chatMinimizeBtn');
            if (minimizeBtn) {
                minimizeBtn.addEventListener('click', () => {
                    const chatBody = document.getElementById('chatBody');
                    if (chatBody) {
                        chatBody.style.display = chatBody.style.display === 'none' ? 'flex' : 'none';
                        saveChatState(); // Save minimized state
                    }
                });
            }
        } catch (err) {
            setConnectionStatus(false);
            addSupportMessage('<span style="color:#b71c1c">‚ùå Unable to connect to support chat. Retrying...</span>');
            console.error(err);
            setTimeout(initializeChat, 5000);
        }
    }
    
    // SignalR connection events
    connection.onclose(() => setConnectionStatus(false));
    connection.onreconnecting(() => setConnectionStatus(false));
    connection.onreconnected(() => setConnectionStatus(true));
    
    // Start the chat when the page loads
    document.addEventListener('DOMContentLoaded', initializeChat);
    
    // Add click handler for chat header to toggle visibility
    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('chatHeader').onclick = function(e) {
            if (e.target.id === 'chatHeader' || e.target.tagName === 'I' && e.target.parentNode.id === 'chatHeader') {
                var body = document.getElementById('chatBody');
                body.style.display = body.style.display === 'none' ? 'flex' : 'none';
                saveChatState(); // Save state when toggled via header
            }
        };
    });
    
    // --- Admin confirmation dialog handler (missing in original) ---
    function showAdminConfirmation(message, actionData) {
        const confirmDiv = document.createElement('div');
        confirmDiv.className = 'support-message';
        confirmDiv.innerHTML = `
            <div class="admin-confirmation">
                <p>${message}</p>
                <div class="admin-confirmation-buttons">
                    <button class="confirm-yes">Yes</button>
                    <button class="confirm-no">No</button>
                </div>
            </div>
        `;
        document.getElementById('chatMessages').appendChild(confirmDiv);
        scrollToBottom();
        confirmDiv.querySelector('.confirm-yes').addEventListener('click', async () => {
            confirmDiv.remove();
            showTypingIndicator();
            await connection.invoke('ConfirmAdminAction', actionData.action, actionData.itemName, actionData.newPrice);
        });
        confirmDiv.querySelector('.confirm-no').addEventListener('click', () => {
            confirmDiv.remove();
            addSupportMessage('Admin action cancelled.');
        });
    }

    // --- Add to cart handler with role checking ---
    function addItemsToCart(items) {
        // Check if user has permission to add to cart
        if (userRole === 'Guest') {
            addSupportMessage('üîí <strong>Login Required:</strong> You need to be logged in to add items to cart. Please <a href="/Account/Login" target="_blank" style="color: #4CAF50; text-decoration: underline;">login</a> or <a href="/Account/Register" target="_blank" style="color: #4CAF50; text-decoration: underline;">create an account</a> first.');
            showSuggestions(['Login', 'Create account', 'Show menu', 'Item details']);
            return;
        }
        
        // Get anti-forgery token from page (if present)
        let token = document.querySelector('input[name="__RequestVerificationToken"]');
        let antiForgeryToken = token ? token.value : null;
        let addedMsg = 'Added to cart:';
        let errorMsg = '';
        let completed = 0;
        let errors = 0;
        let total = items.length;

        if (!Array.isArray(items)) items = [items];

        items.forEach(item => {
            // Prepare form data
            const formData = new FormData();
            formData.append('menuItemId', item.menuItemId || item.menuItemId || item.MenuItemId);
            formData.append('quantity', item.quantity || item.Quantity || 1);
            formData.append('SelectedPersonalizations', item.selectedPersonalizations || item.SelectedPersonalizations || '');
            if (antiForgeryToken) formData.append('__RequestVerificationToken', antiForgeryToken);

            fetch('/Cart/Add', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {},
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addedMsg += `<br>- ${formData.get('quantity')} x ${item.name || item.Name}`;
                } else {
                    errorMsg += `<br>‚ùå ${item.name || item.Name}: ${data.message}`;
                    errors++;
                }
            })
            .catch(err => {
                errorMsg += `<br>‚ùå ${item.name || item.Name}: Error adding to cart.`;
                errors++;
            })
            .finally(() => {
                completed++;
                if (completed === total) {
                    if (addedMsg !== 'Added to cart:') addSupportMessage(addedMsg);
                    if (errorMsg) addSupportMessage(errorMsg);
                    // Optionally reload cart section if present
                    if (window.location.pathname.toLowerCase().includes('/cart')) {
                        // If on cart page, reload via AJAX or refresh
                        location.reload();
                    }
                }
            });
        });
    }

    // --- User input handler with role-based processing ---
    async function handleUserInput(message) {
        if (!message || !message.trim()) return;
        
        // Clear input field
        const chatInput = document.getElementById('chatInput');
        if (chatInput) {
            chatInput.value = '';
        }
        
        // Add user message to chat
        addUserMessage(message);
        
        // Check for role-restricted keywords in user input
        const restrictedKeywords = {
            'Guest': ['cart', 'checkout', 'order', 'payment', 'track order', 'order history'],
            'Member': ['admin', 'modify', 'manage users', 'statistics'],
            'Admin': [] // Admin has no restrictions
        };
        
        const userKeywords = restrictedKeywords[userRole] || [];
        const messageWords = message.toLowerCase().split(' ');
        const hasRestrictedKeyword = userKeywords.some(keyword => 
            messageWords.some(word => word.includes(keyword.toLowerCase()))
        );
        
        if (hasRestrictedKeyword && userRole === 'Guest') {
            removeTypingIndicator();
            
            // Check if they're asking about menu recommendations specifically
            if (message.toLowerCase().includes('recommend') || message.toLowerCase().includes('suggestion')) {
                showMenuRecommendations();
                return;
            }
            
            addSupportMessage(`üîí I understand you're interested in "${message}", but this feature requires a member account. I can help you with menu browsing, item details, or account creation instead!`);
            showSuggestions(['Show menu', 'Menu recommendations', 'Create account', 'Login', 'Item details']);
            return;
        }
        
        showTypingIndicator();
        
        try {
            // Check connection state and reconnect if needed
            if (connection.state !== 'Connected') {
                console.log('Connection not in Connected state. Current state:', connection.state);
                await connection.start();
                console.log('Reconnected to SignalR hub');
            }
            
            // Send message to hub with role context
            await connection.invoke('ProcessUserMessage', userRole, userIdentifier, message);
        } catch (error) {
            console.error('Error sending message:', error);
            removeTypingIndicator();
            addSupportMessage('<span style="color:#b71c1c">‚ùå Error sending message. Please try again.</span>');
            
            // Try to reconnect
            try {
                await connection.start();
                setConnectionStatus(true);
            } catch (reconnectError) {
                console.error('Failed to reconnect:', reconnectError);
                setConnectionStatus(false);
            }
        }
    }

    // --- Navigation confirmation handler ---
    function showNavigationConfirmation(action) {
        let url = '';
        let confirmMessage = '';
        
        switch (action) {
            case 'View cart':
                url = '/Cart';
                confirmMessage = 'Go to your cart to review and modify your order?';
                break;
            case 'Checkout':
                url = '/Cart';
                confirmMessage = 'Go to checkout to complete your order?';
                break;
            case 'Track my order':
                url = '/Cart/Track';
                confirmMessage = 'Go to order tracking page?';
                break;
            case 'Show menu':
            case 'Menu recommendations':
                url = '/MenuItem';
                confirmMessage = 'Browse our delicious menu?';
                break;
            case 'Order food':
                url = '/MenuItem';
                confirmMessage = 'Browse our menu to place an order?';
                break;
            case 'Order history':
                url = '/Cart/History';
                confirmMessage = 'View your order history?';
                break;
            case 'Menu management':
                url = '/MenuItem/Index';
                confirmMessage = 'Go to menu management page?';
                break;
            case 'Category management':
                url = '/Category/Index';
                confirmMessage = 'Go to category management page?';
                break;
            case 'Create account':
                url = '/Account/Register';
                confirmMessage = 'Go to account registration page?';
                break;
            case 'Login':
                url = '/Account/Login';
                confirmMessage = 'Go to login page now?';
                break;
            default:
                handleUserInput(action);
                return;
        }
        
        const confirmDiv = document.createElement('div');
        confirmDiv.className = 'support-message';
        confirmDiv.innerHTML = `
            <div class="admin-confirmation">
                <p>${confirmMessage}</p>
                <div class="admin-confirmation-buttons">
                    <button class="confirm-yes">Yes</button>
                    <button class="confirm-no">No</button>
                </div>
            </div>
        `;
        document.getElementById('chatMessages').appendChild(confirmDiv);
        scrollToBottom();
        
        confirmDiv.querySelector('.confirm-yes').addEventListener('click', () => {
            confirmDiv.remove();
            window.open(url, '_blank');
            addSupportMessage(`Opening ${action} page for you!`);
        });
        
        confirmDiv.querySelector('.confirm-no').addEventListener('click', () => {
            confirmDiv.remove();
            addSupportMessage('No problem! What else can I help you with?');
        });
    }
</script>
