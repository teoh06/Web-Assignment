@using WebApplication2.Models
@using Microsoft.EntityFrameworkCore
@inject DB db
@{
    WebApplication2.Models.Member member = null;
    if (User.Identity?.IsAuthenticated == true && User.IsInRole("Member"))
    {
        member = db.Members.FirstOrDefault(m => m.Email == User.Identity.Name);
    }
}

@if (TempData["EditMessage"] != null)
{
    <div class="alert alert-dismissible fade show" role="alert">
        @Html.Raw(TempData["EditMessage"])
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="shortcut icon" href="/images/quickbite.png">

    <!-- Immediate theme application to prevent flashing -->
    <script>
        (function () {
            const themeCookie = document.cookie.split('; ').find(row => row.startsWith('theme='));
            const savedTheme = themeCookie ? themeCookie.split('=')[1] : null;
            if (savedTheme === 'dark') {
                document.documentElement.classList.add('dark-theme');
            }
        })();
    </script>

    <script>
        // Expose authentication state and user email for client-side personalization gating and namespacing
        window.isAuthenticated = @(User?.Identity?.IsAuthenticated == true ? "true" : "false");
        // Convert string to real boolean
        window.isAuthenticated = (window.isAuthenticated === true || window.isAuthenticated === 'true');
        window.userEmail = @(User?.Identity?.IsAuthenticated == true ? $"'" + (User.Identity?.Name ?? "") + "'" : "null");
    </script>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="/css/app.css" asp-append-version="true">
    
    <style>
        /* Enhanced Layout Styles */
        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            margin: 0;
            padding: 0;
        }

        header {
            background: var(--background-secondary);
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            z-index: 1000;
            transition: transform 0.4s cubic-bezier(.4,0,.2,1), opacity 0.3s;
        }

        header h1 {
            margin: 0;
            font-size: 2.5rem;
        }

        .header-content {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        nav {
            background: var(--background-primary);
            padding: 0.5rem 2rem;
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        nav a {
            color: var(--text-primary);
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        nav a:hover {
            background: var(--background-hover);
            color: var(--primary-brand);
        }

        main {
            flex: 1;
            padding: 2rem;
            background: var(--background-primary);
        }

        footer {
            background: var(--background-secondary);
            color: var(--text-primary);
            padding: 2rem;
            text-align: center;
            margin-top: auto;
        }

        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            text-align: left;
        }

        .footer-section {
            padding: 1rem;
        }

        .footer-section h3 {
            color: var(--primary-brand);
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .footer-section p {
            margin: 0.5rem 0;
        }

        .footer-bottom {
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
            text-align: center;
        }

        .social-links {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
        }

        .social-links a {
            color: var(--text-primary);
            font-size: 1.5rem;
            transition: color 0.3s ease;
        }

        .social-links a:hover {
            color: var(--primary-brand);
        }

        /* Existing styles */
        .support-buttons-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            flex-direction: row;
            align-items: flex-end;
            gap: 16px;
            z-index: 1000;
        }

        .info {
            position: fixed;
            top: 30px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9999;
            min-width: 300px;
            max-width: 600px;
            text-align: center;
            pointer-events: auto;
            transition: opacity 0.5s;
        }

        @@media (max-width: 768px) {
            header {
                padding: 1rem;
                flex-direction: column;
                text-align: center;
            }

            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            nav {
                justify-content: center;
                padding: 0.5rem;
            }

            .footer-content {
                grid-template-columns: 1fr;
                text-align: center;
            }
        }

        .header-hidden {
            transform: translateY(-100%);
            opacity: 0;
            pointer-events: none;
        }
    </style>

    @RenderSection("head", false)
</head>

<body data-auth="@(User?.Identity?.IsAuthenticated == true ? "true" : "false")">
    @if (TempData["Info"] != null && !string.IsNullOrWhiteSpace(TempData["Info"].ToString()))
    {
        <div class="info">
            @Html.Raw(TempData["Info"])
        </div>
    }

    <header>
        <div class="header-content">
            <h1 style="font-family: 'Brush Script MT', cursive; font-style: italic;">
                <a href="/" style="text-decoration: none; color: inherit;">QuickBite</a>
            </h1>

            @if (User.Identity!.IsAuthenticated)
            {
                <div class="user-info">
                    <div>
                        @(User.IsInRole("Member") && member != null ? member.Name : User.Identity?.Name ?? "Member") |
                        @(User.IsInRole("Admin") ? "Admin" : "")
                        @(User.IsInRole("Member") ? "Member" : "")
                    </div>
                    @if (User.IsInRole("Member") && member != null)
                    {
                        <img src="/photos/@(string.IsNullOrEmpty(member.PhotoURL) ? "default.png" : member.PhotoURL)" alt="Profile Photo" />
                    }
                </div>
            }
        </div>

        <div id="themeToggle" style="font-size: 2rem; background: none; border: none; cursor: pointer; padding: 0; margin-right: 1rem;">
            <span class="theme-toggle-icon">🌙</span>
            <span class="theme-toggle-text"></span>
        </div>
    </header>

    <nav>
        <a href="/">Home</a>

        @if (User.IsInRole("Member") || !User.IsInRole("Admin"))
        {
            <a href="/MenuItem">Menu</a>
        }

        @if (User.IsInRole("Member"))
        {
            <a href="/Cart">Cart</a>
            <a href="/Cart/History">My Orders</a>
            <a href="/Cart/Track">Track Order</a>
        }

        @if (User.IsInRole("Admin"))
        {
            <a href="/MenuItem/Index">Manage Menu Items</a>
            <a href="/Category/Index">Manage Categories</a>
            <a class="nav-link default-button" asp-controller="Admin" asp-action="Index">Admin Panel</a>
            <a href="/Admin/Orders">Order Maintenance</a>
        }

        @if (User.Identity!.IsAuthenticated)
        {
            <a href="/Account/UpdatePassword">Update Password</a>
            @if (User.IsInRole("Member"))
            {
                <a href="/Account/UpdateProfile">Update Profile</a>
            }
            <form asp-controller="Account" asp-action="Logout" method="post" onsubmit="return confirmLogout();" style="margin: 0;">
                <button type="submit" class="default-button" style="border: none; line-height: 1.8;">Logout</button>
            </form>
        }
        else
        {
            <a href="/Account/Login">Login</a>
            <a href="/Account/Register">Register</a>
            <a href="/Account/ResetPassword">Reset Password</a>
        }
    </nav>

    <main>
        <h1>@ViewBag.Title</h1>
        @await Html.PartialAsync("_HelpPanel")
        @RenderBody()
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>About QuickBite</h3>
                <p>Your favorite food delivery service, bringing delicious meals right to your doorstep.</p>
            </div>
            <div class="footer-section">
                <h3>Quick Links</h3>
                <p><a href="/Home/Privacy" style="text-decoration: none; color: var(--text-primary);">Privacy Policy</a></p>
                <p><a href="/MenuItem" style="text-decoration: none; color: var(--text-primary);">Menu</a></p>
                @if (User.IsInRole("Member"))
                {
                    <p><a href="/Cart" style="text-decoration: none; color: var(--text-primary);">My Cart</a></p>
                }
            </div>
            <div class="footer-section">
                <h3>Connect With Us</h3>
                <div class="social-links">
                    <a href="https://www.facebook.com/mcdonalds" title="Facebook" target="_blank"><i class="fab fa-facebook"></i></a>
                    <a href="https://twitter.com/McDonalds" title="Twitter" target="_blank"><i class="fab fa-twitter"></i></a>
                    <a href="https://www.instagram.com/mcdonalds/" title="Instagram" target="_blank"><i class="fab fa-instagram"></i></a>
                    <a href="https://github.com/mcdcorp" title="GitHub" target="_blank"><i class="fab fa-github"></i></a>
                    <a href="https://www.youtube.com/channel/UCRI5ZedBs0_BYY4PlxD6m7w" title="Youtube" target="_blank"><i class="fab fa-youtube"></i></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            <p>Developed by <b>QuickBite</b> &middot; Copyrighted &copy; @DateTime.Today.Year</p>
        </div>
    </footer>

    <div class="support-buttons-container">
        @if (!User.IsInRole("Admin"))
        {
            <button id="helpButton" class="help-button" onclick="toggleHelpPanel()" title="Get Help">
                <i class="fas fa-question"></i>
            </button>
        }
        @await Html.PartialAsync("_ChatWidget")
    </div>

    <!-- Rest of the scripts -->
    <script src="/js/jquery.min.js"></script>
    <script src="/js/jquery.unobtrusive-ajax.min.js"></script>
    <script src="/js/jquery.validate.min.js"></script>
    <script src="/js/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/app.js" asp-append-version="true"></script>
    <script src="/js/personalization.js" asp-append-version="true"></script>

    <!-- Original scripts -->
    <script>
        function confirmLogout() {
            return confirm("Are you sure you want to logout?");
        }

        // Auto-dismiss .info messages after 40 seconds
        document.addEventListener('DOMContentLoaded', function () {
            const infoDiv = document.querySelector('.info');
            if (infoDiv && infoDiv.textContent.trim() !== "") {
                infoDiv.style.opacity = 1;
                setTimeout(function () {
                    infoDiv.style.opacity = 0;
                    setTimeout(() => infoDiv.remove(), 500);
                }, 6000); // 6 seconds
            }
        });

        // Auto-dismiss success messages after 40 seconds (for important Bootstrap alerts)
        document.addEventListener('DOMContentLoaded', function () {
            const autoDissmissAlerts = document.querySelectorAll('.alert.auto-dismiss');
            autoDissmissAlerts.forEach(function(alert) {
                setTimeout(function() {
                    if (typeof bootstrap !== 'undefined' && bootstrap.Alert) {
                        const bootstrapAlert = bootstrap.Alert.getOrCreateInstance(alert);
                        bootstrapAlert.close();
                    } else {
                        alert.classList.remove('show');
                        setTimeout(() => alert.remove(), 150);
                    }
                }, 40000); // 40 seconds
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            const themeToggle = document.getElementById('themeToggle');
            const themeToggleIcon = themeToggle.querySelector('.theme-toggle-icon');
            const themeToggleText = themeToggle.querySelector('.theme-toggle-text');

            // Helper to get cookie
            function getCookie(name) {
                const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
                return match ? match[2] : null;
            }

            // Helper to set cookie
            function setCookie(name, value, days = 365) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                document.cookie = `${name}=${value}; expires=${date.toUTCString()}; path=/`;
            }

            // Apply the theme from cookie or default to light
            const savedTheme = getCookie("theme") || "light";
            applyTheme(savedTheme);

            themeToggle.addEventListener('click', function () {
                const isDarkTheme = document.documentElement.classList.contains('dark-theme');
                const newTheme = isDarkTheme ? "light" : "dark";
                applyTheme(newTheme);
                setCookie("theme", newTheme);
            });

            function applyTheme(theme) {
                if (theme === 'dark') {
                    document.documentElement.classList.add('dark-theme');
                    themeToggleIcon.textContent = '☀️';
                    themeToggleText.textContent = '';
                } else {
                    document.documentElement.classList.remove('dark-theme');
                    themeToggleIcon.textContent = '🌙';
                    themeToggleText.textContent = '';
                }

                // Optional: trigger visual refresh for dynamic content
                document.querySelectorAll('.card').forEach(card => {
                    card.style.display = 'none';
                    card.offsetHeight; // trigger reflow
                    card.style.display = '';
                });
            }
        });

        // Header hide/show on scroll
        let lastScrollY = window.scrollY;
        let ticking = false;
        const header = document.querySelector('header');
        function onScroll() {
            if (!header) return;
            if (window.scrollY > lastScrollY && window.scrollY > 60) {
                // Scrolling down
                header.classList.add('header-hidden');
            } else {
                // Scrolling up
                header.classList.remove('header-hidden');
            }
            lastScrollY = window.scrollY;
            ticking = false;
        }
        window.addEventListener('scroll', function() {
            if (!ticking) {
                window.requestAnimationFrame(onScroll);
                ticking = true;
            }
        });
    </script>

    @RenderSection("foot", false)
    @RenderSection("Scripts", required: false)
</body>
</html>